/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ICreditManagerV2Exceptions,
  ICreditManagerV2ExceptionsInterface,
} from "../../../../contracts/interfaces/ICreditManagerV2.sol/ICreditManagerV2Exceptions";

const _abi = [
  {
    inputs: [],
    name: "AdaptersOrFacadeOnlyException",
    type: "error",
  },
  {
    inputs: [],
    name: "BorrowAmountOutOfLimitsException",
    type: "error",
  },
  {
    inputs: [],
    name: "HasNoOpenedAccountException",
    type: "error",
  },
  {
    inputs: [],
    name: "IncorrectLimitsException",
    type: "error",
  },
  {
    inputs: [],
    name: "NotCreditConfiguratorException",
    type: "error",
  },
  {
    inputs: [],
    name: "NotCreditFacadeException",
    type: "error",
  },
  {
    inputs: [],
    name: "NotEnoughCollateralException",
    type: "error",
  },
  {
    inputs: [],
    name: "TargetContractNotAllowedExpcetion",
    type: "error",
  },
  {
    inputs: [],
    name: "TokenAlreadyAddedException",
    type: "error",
  },
  {
    inputs: [],
    name: "TokenNotAllowedException",
    type: "error",
  },
  {
    inputs: [],
    name: "TooMuchTokensException",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddressOrUserAlreadyHasAccountException",
    type: "error",
  },
];

export class ICreditManagerV2Exceptions__factory {
  static readonly abi = _abi;
  static createInterface(): ICreditManagerV2ExceptionsInterface {
    return new utils.Interface(_abi) as ICreditManagerV2ExceptionsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ICreditManagerV2Exceptions {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ICreditManagerV2Exceptions;
  }
}
