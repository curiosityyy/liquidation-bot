/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export type MultiCallStruct = { target: string; callData: BytesLike };

export type MultiCallStructOutput = [string, string] & {
  target: string;
  callData: string;
};

export declare namespace Terminator {
  export type UniV2ParamsStruct = {
    amountIn: BigNumberish;
    path: string[];
    amountOutMin: BigNumberish;
  };

  export type UniV2ParamsStructOutput = [BigNumber, string[], BigNumber] & {
    amountIn: BigNumber;
    path: string[];
    amountOutMin: BigNumber;
  };
}

export interface TerminatorInterface extends utils.Interface {
  functions: {
    "addYearn(address)": FunctionFragment;
    "allowExecutor(address)": FunctionFragment;
    "executors(address)": FunctionFragment;
    "forbidExecutor(address)": FunctionFragment;
    "liquidateAndSellOnV2(address,address,uint256,bool,(address,bytes)[],address,(uint256,address[],uint256)[])": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferToOwner(address,uint256)": FunctionFragment;
    "wethToken()": FunctionFragment;
    "yearn(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addYearn"
      | "allowExecutor"
      | "executors"
      | "forbidExecutor"
      | "liquidateAndSellOnV2"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "transferToOwner"
      | "wethToken"
      | "yearn"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "addYearn", values: [string]): string;
  encodeFunctionData(
    functionFragment: "allowExecutor",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "executors", values: [string]): string;
  encodeFunctionData(
    functionFragment: "forbidExecutor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateAndSellOnV2",
    values: [
      string,
      string,
      BigNumberish,
      boolean,
      MultiCallStruct[],
      string,
      Terminator.UniV2ParamsStruct[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToOwner",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "wethToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "yearn", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "addYearn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "executors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forbidExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateAndSellOnV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wethToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yearn", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Terminator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TerminatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addYearn(
      _yearn: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowExecutor(
      _executor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executors(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    forbidExecutor(
      _executor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidateAndSellOnV2(
      _creditFacade: string,
      _borrower: string,
      skipTokenMask: BigNumberish,
      convertWETH: boolean,
      calls: MultiCallStruct[],
      _router: string,
      _paths: Terminator.UniV2ParamsStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferToOwner(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wethToken(overrides?: CallOverrides): Promise<[string]>;

    yearn(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
  };

  addYearn(
    _yearn: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowExecutor(
    _executor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executors(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  forbidExecutor(
    _executor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidateAndSellOnV2(
    _creditFacade: string,
    _borrower: string,
    skipTokenMask: BigNumberish,
    convertWETH: boolean,
    calls: MultiCallStruct[],
    _router: string,
    _paths: Terminator.UniV2ParamsStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferToOwner(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wethToken(overrides?: CallOverrides): Promise<string>;

  yearn(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addYearn(_yearn: string, overrides?: CallOverrides): Promise<void>;

    allowExecutor(_executor: string, overrides?: CallOverrides): Promise<void>;

    executors(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    forbidExecutor(_executor: string, overrides?: CallOverrides): Promise<void>;

    liquidateAndSellOnV2(
      _creditFacade: string,
      _borrower: string,
      skipTokenMask: BigNumberish,
      convertWETH: boolean,
      calls: MultiCallStruct[],
      _router: string,
      _paths: Terminator.UniV2ParamsStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferToOwner(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    wethToken(overrides?: CallOverrides): Promise<string>;

    yearn(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    addYearn(
      _yearn: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowExecutor(
      _executor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executors(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    forbidExecutor(
      _executor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidateAndSellOnV2(
      _creditFacade: string,
      _borrower: string,
      skipTokenMask: BigNumberish,
      convertWETH: boolean,
      calls: MultiCallStruct[],
      _router: string,
      _paths: Terminator.UniV2ParamsStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferToOwner(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wethToken(overrides?: CallOverrides): Promise<BigNumber>;

    yearn(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addYearn(
      _yearn: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowExecutor(
      _executor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executors(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    forbidExecutor(
      _executor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidateAndSellOnV2(
      _creditFacade: string,
      _borrower: string,
      skipTokenMask: BigNumberish,
      convertWETH: boolean,
      calls: MultiCallStruct[],
      _router: string,
      _paths: Terminator.UniV2ParamsStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferToOwner(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wethToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    yearn(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
