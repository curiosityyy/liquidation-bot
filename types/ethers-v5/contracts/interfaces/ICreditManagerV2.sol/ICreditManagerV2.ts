/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface ICreditManagerV2Interface extends utils.Interface {
  functions: {
    "adapterToContract(address)": FunctionFragment;
    "addCollateral(address,address,address,uint256)": FunctionFragment;
    "allowedTokens(uint256)": FunctionFragment;
    "allowedTokensCount()": FunctionFragment;
    "approveCreditAccount(address,address,address,uint256)": FunctionFragment;
    "calcClosePayments(uint256,bool,uint256,uint256)": FunctionFragment;
    "calcCreditAccountAccruedInterest(address)": FunctionFragment;
    "checkAndEnableToken(address,address)": FunctionFragment;
    "closeCreditAccount(address,bool,uint256,address,address,uint256,bool)": FunctionFragment;
    "creditAccounts(address)": FunctionFragment;
    "creditConfigurator()": FunctionFragment;
    "creditFacade()": FunctionFragment;
    "enabledTokensMap(address)": FunctionFragment;
    "executeOrder(address,address,bytes)": FunctionFragment;
    "fastCollateralCheck(address,address,address,uint256,uint256)": FunctionFragment;
    "feeInterest()": FunctionFragment;
    "feeLiquidation()": FunctionFragment;
    "forbiddenTokenMask()": FunctionFragment;
    "fullCollateralCheck(address)": FunctionFragment;
    "getCreditAccountOrRevert(address)": FunctionFragment;
    "liquidationDiscount()": FunctionFragment;
    "liquidationThresholds(address)": FunctionFragment;
    "manageDebt(address,uint256,bool)": FunctionFragment;
    "maxBorrowedAmount()": FunctionFragment;
    "minBorrowedAmount()": FunctionFragment;
    "openCreditAccount(uint256,address)": FunctionFragment;
    "pool()": FunctionFragment;
    "poolService()": FunctionFragment;
    "priceOracle()": FunctionFragment;
    "tokenMasksMap(address)": FunctionFragment;
    "transferAccountOwnership(address,address)": FunctionFragment;
    "underlying()": FunctionFragment;
    "version()": FunctionFragment;
    "wethAddress()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "adapterToContract"
      | "addCollateral"
      | "allowedTokens"
      | "allowedTokensCount"
      | "approveCreditAccount"
      | "calcClosePayments"
      | "calcCreditAccountAccruedInterest"
      | "checkAndEnableToken"
      | "closeCreditAccount"
      | "creditAccounts"
      | "creditConfigurator"
      | "creditFacade"
      | "enabledTokensMap"
      | "executeOrder"
      | "fastCollateralCheck"
      | "feeInterest"
      | "feeLiquidation"
      | "forbiddenTokenMask"
      | "fullCollateralCheck"
      | "getCreditAccountOrRevert"
      | "liquidationDiscount"
      | "liquidationThresholds"
      | "manageDebt"
      | "maxBorrowedAmount"
      | "minBorrowedAmount"
      | "openCreditAccount"
      | "pool"
      | "poolService"
      | "priceOracle"
      | "tokenMasksMap"
      | "transferAccountOwnership"
      | "underlying"
      | "version"
      | "wethAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "adapterToContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addCollateral",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedTokensCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveCreditAccount",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcClosePayments",
    values: [BigNumberish, boolean, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcCreditAccountAccruedInterest",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkAndEnableToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "closeCreditAccount",
    values: [
      string,
      boolean,
      BigNumberish,
      string,
      string,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "creditAccounts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "creditConfigurator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creditFacade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enabledTokensMap",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "executeOrder",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fastCollateralCheck",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeInterest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeLiquidation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forbiddenTokenMask",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fullCollateralCheck",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreditAccountOrRevert",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationDiscount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationThresholds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "manageDebt",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "maxBorrowedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minBorrowedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openCreditAccount",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolService",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenMasksMap",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAccountOwnership",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "wethAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "adapterToContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedTokensCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveCreditAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcClosePayments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcCreditAccountAccruedInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAndEnableToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeCreditAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditConfigurator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditFacade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enabledTokensMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fastCollateralCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forbiddenTokenMask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fullCollateralCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreditAccountOrRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationThresholds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "manageDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxBorrowedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minBorrowedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openCreditAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenMasksMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAccountOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wethAddress",
    data: BytesLike
  ): Result;

  events: {
    "ExecuteOrder(address,address)": EventFragment;
    "NewConfigurator(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExecuteOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewConfigurator"): EventFragment;
}

export interface ExecuteOrderEventObject {
  borrower: string;
  target: string;
}
export type ExecuteOrderEvent = TypedEvent<
  [string, string],
  ExecuteOrderEventObject
>;

export type ExecuteOrderEventFilter = TypedEventFilter<ExecuteOrderEvent>;

export interface NewConfiguratorEventObject {
  newConfigurator: string;
}
export type NewConfiguratorEvent = TypedEvent<
  [string],
  NewConfiguratorEventObject
>;

export type NewConfiguratorEventFilter = TypedEventFilter<NewConfiguratorEvent>;

export interface ICreditManagerV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICreditManagerV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    adapterToContract(
      adapter: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    addCollateral(
      payer: string,
      onBehalfOf: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowedTokens(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    allowedTokensCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    approveCreditAccount(
      borrower: string,
      targetContract: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calcClosePayments(
      totalValue: BigNumberish,
      isLiquidated: boolean,
      borrowedAmount: BigNumberish,
      borrowedAmountWithInterest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountToPool: BigNumber;
        remainingFunds: BigNumber;
        profit: BigNumber;
        loss: BigNumber;
      }
    >;

    calcCreditAccountAccruedInterest(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        borrowedAmount: BigNumber;
        borrowedAmountWithInterest: BigNumber;
      }
    >;

    checkAndEnableToken(
      creditAccount: string,
      tokenOut: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closeCreditAccount(
      borrower: string,
      isLiquidated: boolean,
      totalValue: BigNumberish,
      caller: string,
      to: string,
      skipTokenMask: BigNumberish,
      convertWETH: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    creditAccounts(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    creditConfigurator(overrides?: CallOverrides): Promise<[string]>;

    creditFacade(overrides?: CallOverrides): Promise<[string]>;

    enabledTokensMap(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    executeOrder(
      borrower: string,
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fastCollateralCheck(
      creditAccount: string,
      tokenIn: string,
      tokenOut: string,
      balanceInBefore: BigNumberish,
      balanceOutBefore: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeInterest(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeLiquidation(overrides?: CallOverrides): Promise<[BigNumber]>;

    forbiddenTokenMask(overrides?: CallOverrides): Promise<[BigNumber]>;

    fullCollateralCheck(
      creditAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCreditAccountOrRevert(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    liquidationDiscount(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidationThresholds(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    manageDebt(
      borrower: string,
      amount: BigNumberish,
      increase: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxBorrowedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    minBorrowedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    openCreditAccount(
      borrowedAmount: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pool(overrides?: CallOverrides): Promise<[string]>;

    poolService(overrides?: CallOverrides): Promise<[string]>;

    priceOracle(overrides?: CallOverrides): Promise<[string]>;

    tokenMasksMap(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferAccountOwnership(
      from: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    underlying(overrides?: CallOverrides): Promise<[string]>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;

    wethAddress(overrides?: CallOverrides): Promise<[string]>;
  };

  adapterToContract(
    adapter: string,
    overrides?: CallOverrides
  ): Promise<string>;

  addCollateral(
    payer: string,
    onBehalfOf: string,
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowedTokens(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  allowedTokensCount(overrides?: CallOverrides): Promise<BigNumber>;

  approveCreditAccount(
    borrower: string,
    targetContract: string,
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calcClosePayments(
    totalValue: BigNumberish,
    isLiquidated: boolean,
    borrowedAmount: BigNumberish,
    borrowedAmountWithInterest: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      amountToPool: BigNumber;
      remainingFunds: BigNumber;
      profit: BigNumber;
      loss: BigNumber;
    }
  >;

  calcCreditAccountAccruedInterest(
    creditAccount: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      borrowedAmount: BigNumber;
      borrowedAmountWithInterest: BigNumber;
    }
  >;

  checkAndEnableToken(
    creditAccount: string,
    tokenOut: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closeCreditAccount(
    borrower: string,
    isLiquidated: boolean,
    totalValue: BigNumberish,
    caller: string,
    to: string,
    skipTokenMask: BigNumberish,
    convertWETH: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  creditAccounts(borrower: string, overrides?: CallOverrides): Promise<string>;

  creditConfigurator(overrides?: CallOverrides): Promise<string>;

  creditFacade(overrides?: CallOverrides): Promise<string>;

  enabledTokensMap(
    creditAccount: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  executeOrder(
    borrower: string,
    target: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fastCollateralCheck(
    creditAccount: string,
    tokenIn: string,
    tokenOut: string,
    balanceInBefore: BigNumberish,
    balanceOutBefore: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeInterest(overrides?: CallOverrides): Promise<BigNumber>;

  feeLiquidation(overrides?: CallOverrides): Promise<BigNumber>;

  forbiddenTokenMask(overrides?: CallOverrides): Promise<BigNumber>;

  fullCollateralCheck(
    creditAccount: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCreditAccountOrRevert(
    borrower: string,
    overrides?: CallOverrides
  ): Promise<string>;

  liquidationDiscount(overrides?: CallOverrides): Promise<BigNumber>;

  liquidationThresholds(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  manageDebt(
    borrower: string,
    amount: BigNumberish,
    increase: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxBorrowedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  minBorrowedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  openCreditAccount(
    borrowedAmount: BigNumberish,
    onBehalfOf: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pool(overrides?: CallOverrides): Promise<string>;

  poolService(overrides?: CallOverrides): Promise<string>;

  priceOracle(overrides?: CallOverrides): Promise<string>;

  tokenMasksMap(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  transferAccountOwnership(
    from: string,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  underlying(overrides?: CallOverrides): Promise<string>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  wethAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    adapterToContract(
      adapter: string,
      overrides?: CallOverrides
    ): Promise<string>;

    addCollateral(
      payer: string,
      onBehalfOf: string,
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    allowedTokens(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    allowedTokensCount(overrides?: CallOverrides): Promise<BigNumber>;

    approveCreditAccount(
      borrower: string,
      targetContract: string,
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    calcClosePayments(
      totalValue: BigNumberish,
      isLiquidated: boolean,
      borrowedAmount: BigNumberish,
      borrowedAmountWithInterest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountToPool: BigNumber;
        remainingFunds: BigNumber;
        profit: BigNumber;
        loss: BigNumber;
      }
    >;

    calcCreditAccountAccruedInterest(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        borrowedAmount: BigNumber;
        borrowedAmountWithInterest: BigNumber;
      }
    >;

    checkAndEnableToken(
      creditAccount: string,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<void>;

    closeCreditAccount(
      borrower: string,
      isLiquidated: boolean,
      totalValue: BigNumberish,
      caller: string,
      to: string,
      skipTokenMask: BigNumberish,
      convertWETH: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditAccounts(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<string>;

    creditConfigurator(overrides?: CallOverrides): Promise<string>;

    creditFacade(overrides?: CallOverrides): Promise<string>;

    enabledTokensMap(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeOrder(
      borrower: string,
      target: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    fastCollateralCheck(
      creditAccount: string,
      tokenIn: string,
      tokenOut: string,
      balanceInBefore: BigNumberish,
      balanceOutBefore: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    feeInterest(overrides?: CallOverrides): Promise<BigNumber>;

    feeLiquidation(overrides?: CallOverrides): Promise<BigNumber>;

    forbiddenTokenMask(overrides?: CallOverrides): Promise<BigNumber>;

    fullCollateralCheck(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getCreditAccountOrRevert(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<string>;

    liquidationDiscount(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationThresholds(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    manageDebt(
      borrower: string,
      amount: BigNumberish,
      increase: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxBorrowedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minBorrowedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    openCreditAccount(
      borrowedAmount: BigNumberish,
      onBehalfOf: string,
      overrides?: CallOverrides
    ): Promise<string>;

    pool(overrides?: CallOverrides): Promise<string>;

    poolService(overrides?: CallOverrides): Promise<string>;

    priceOracle(overrides?: CallOverrides): Promise<string>;

    tokenMasksMap(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferAccountOwnership(
      from: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    underlying(overrides?: CallOverrides): Promise<string>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    wethAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ExecuteOrder(address,address)"(
      borrower?: string | null,
      target?: string | null
    ): ExecuteOrderEventFilter;
    ExecuteOrder(
      borrower?: string | null,
      target?: string | null
    ): ExecuteOrderEventFilter;

    "NewConfigurator(address)"(
      newConfigurator?: string | null
    ): NewConfiguratorEventFilter;
    NewConfigurator(
      newConfigurator?: string | null
    ): NewConfiguratorEventFilter;
  };

  estimateGas: {
    adapterToContract(
      adapter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addCollateral(
      payer: string,
      onBehalfOf: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowedTokens(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowedTokensCount(overrides?: CallOverrides): Promise<BigNumber>;

    approveCreditAccount(
      borrower: string,
      targetContract: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calcClosePayments(
      totalValue: BigNumberish,
      isLiquidated: boolean,
      borrowedAmount: BigNumberish,
      borrowedAmountWithInterest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcCreditAccountAccruedInterest(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkAndEnableToken(
      creditAccount: string,
      tokenOut: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closeCreditAccount(
      borrower: string,
      isLiquidated: boolean,
      totalValue: BigNumberish,
      caller: string,
      to: string,
      skipTokenMask: BigNumberish,
      convertWETH: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    creditAccounts(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditConfigurator(overrides?: CallOverrides): Promise<BigNumber>;

    creditFacade(overrides?: CallOverrides): Promise<BigNumber>;

    enabledTokensMap(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeOrder(
      borrower: string,
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fastCollateralCheck(
      creditAccount: string,
      tokenIn: string,
      tokenOut: string,
      balanceInBefore: BigNumberish,
      balanceOutBefore: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeInterest(overrides?: CallOverrides): Promise<BigNumber>;

    feeLiquidation(overrides?: CallOverrides): Promise<BigNumber>;

    forbiddenTokenMask(overrides?: CallOverrides): Promise<BigNumber>;

    fullCollateralCheck(
      creditAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCreditAccountOrRevert(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidationDiscount(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationThresholds(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    manageDebt(
      borrower: string,
      amount: BigNumberish,
      increase: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxBorrowedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minBorrowedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    openCreditAccount(
      borrowedAmount: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<BigNumber>;

    poolService(overrides?: CallOverrides): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    tokenMasksMap(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferAccountOwnership(
      from: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    wethAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    adapterToContract(
      adapter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addCollateral(
      payer: string,
      onBehalfOf: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowedTokens(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowedTokensCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approveCreditAccount(
      borrower: string,
      targetContract: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calcClosePayments(
      totalValue: BigNumberish,
      isLiquidated: boolean,
      borrowedAmount: BigNumberish,
      borrowedAmountWithInterest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcCreditAccountAccruedInterest(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkAndEnableToken(
      creditAccount: string,
      tokenOut: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closeCreditAccount(
      borrower: string,
      isLiquidated: boolean,
      totalValue: BigNumberish,
      caller: string,
      to: string,
      skipTokenMask: BigNumberish,
      convertWETH: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    creditAccounts(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creditConfigurator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creditFacade(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enabledTokensMap(
      creditAccount: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeOrder(
      borrower: string,
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fastCollateralCheck(
      creditAccount: string,
      tokenIn: string,
      tokenOut: string,
      balanceInBefore: BigNumberish,
      balanceOutBefore: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeInterest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeLiquidation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forbiddenTokenMask(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fullCollateralCheck(
      creditAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCreditAccountOrRevert(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidationDiscount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidationThresholds(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    manageDebt(
      borrower: string,
      amount: BigNumberish,
      increase: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxBorrowedAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minBorrowedAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openCreditAccount(
      borrowedAmount: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolService(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenMasksMap(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferAccountOwnership(
      from: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wethAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
