pub use datacompressor_mod::*;
#[allow(clippy::too_many_arguments)]
mod datacompressor_mod {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    pub use super::super::shared_types::*;
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "DataCompressor was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static DATACOMPRESSOR_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressProvider\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"WETHToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"addressProvider\",\"outputs\":[{\"internalType\":\"contract AddressProvider\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creditManager\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"calcExpectedAtOpenHf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creditManager\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"calcExpectedHf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"contractsRegister\",\"outputs\":[{\"internalType\":\"contract ContractsRegister\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creditManager\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_allowedContract\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getAdapter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creditManager\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getCreditAccountData\",\"outputs\":[{\"internalType\":\"struct CreditAccountData\",\"name\":\"\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"inUse\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"creditManager\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"borrowedAmountPlusInterest\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"borrowRate\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"struct TokenBalance[]\",\"name\":\"balances\",\"type\":\"tuple[]\",\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\",\"components\":[]}]},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"liquidationAmount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"canBeClosed\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"cumulativeIndexAtOpen\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"since\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\",\"components\":[]}]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getCreditAccountList\",\"outputs\":[{\"internalType\":\"struct CreditAccountData[]\",\"name\":\"\",\"type\":\"tuple[]\",\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"inUse\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"creditManager\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"borrowedAmountPlusInterest\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"borrowRate\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"struct TokenBalance[]\",\"name\":\"balances\",\"type\":\"tuple[]\",\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\",\"components\":[]}]},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"liquidationAmount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"canBeClosed\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"cumulativeIndexAtOpen\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"since\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\",\"components\":[]}]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creditManager\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getCreditManagerData\",\"outputs\":[{\"internalType\":\"struct CreditManagerData\",\"name\":\"\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"hasAccount\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"isWETH\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"canBorrow\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"borrowRate\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"maxLeverageFactor\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"availableLiquidity\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address[]\",\"name\":\"allowedTokens\",\"type\":\"address[]\",\"components\":[]},{\"internalType\":\"struct ContractAdapter[]\",\"name\":\"adapters\",\"type\":\"tuple[]\",\"components\":[{\"internalType\":\"address\",\"name\":\"allowedContract\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\",\"components\":[]}]},{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\",\"components\":[]}]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getCreditManagersList\",\"outputs\":[{\"internalType\":\"struct CreditManagerData[]\",\"name\":\"\",\"type\":\"tuple[]\",\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"hasAccount\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"isWETH\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"canBorrow\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"borrowRate\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"maxLeverageFactor\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"availableLiquidity\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address[]\",\"name\":\"allowedTokens\",\"type\":\"address[]\",\"components\":[]},{\"internalType\":\"struct ContractAdapter[]\",\"name\":\"adapters\",\"type\":\"tuple[]\",\"components\":[{\"internalType\":\"address\",\"name\":\"allowedContract\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\",\"components\":[]}]},{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\",\"components\":[]}]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getPoolData\",\"outputs\":[{\"internalType\":\"struct PoolData\",\"name\":\"\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"isWETH\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"dieselToken\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"linearCumulativeIndex\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"availableLiquidity\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"expectedLiquidity\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"expectedLiquidityLimit\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"totalBorrowed\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"depositAPY_RAY\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"borrowAPY_RAY\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"dieselRate_RAY\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"withdrawFee\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"cumulativeIndex_RAY\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"timestampLU\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\",\"components\":[]}]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getPoolsList\",\"outputs\":[{\"internalType\":\"struct PoolData[]\",\"name\":\"\",\"type\":\"tuple[]\",\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"isWETH\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"dieselToken\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"linearCumulativeIndex\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"availableLiquidity\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"expectedLiquidity\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"expectedLiquidityLimit\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"totalBorrowed\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"depositAPY_RAY\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"borrowAPY_RAY\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"dieselRate_RAY\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"withdrawFee\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"cumulativeIndex_RAY\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"timestampLU\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\",\"components\":[]}]}]},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getTokenData\",\"outputs\":[{\"internalType\":\"struct TokenInfo[]\",\"name\":\"\",\"type\":\"tuple[]\",\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\",\"components\":[]},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\",\"components\":[]}]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creditManager\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"hasOpenedCreditAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static DATACOMPRESSOR_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x60e06040523480156200001157600080fd5b506040516200365238038062003652833981016040819052620000349162000185565b60408051808201909152600281526105a360f41b60208201526001600160a01b038216620000805760405162461bcd60e51b8152600401620000779190620001b7565b60405180910390fd5b506001600160a01b03811660808190526040805163c513c9bb60e01b8152905163c513c9bb916004808201926020929091908290030181865afa158015620000cc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000f2919062000185565b6001600160a01b031660a0816001600160a01b0316815250506080516001600160a01b0316634c252f916040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200014c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000172919062000185565b6001600160a01b031660c052506200020f565b6000602082840312156200019857600080fd5b81516001600160a01b0381168114620001b057600080fd5b9392505050565b600060208083528351808285015260005b81811015620001e657858101830151858201604001528201620001c8565b81811115620001f9576000604083870101525b50601f01601f1916929092016040019392505050565b60805160a05160c0516133b1620002a1600039600081816101bd01528181610ccf01526117d00152600081816101ff0152818161073601528181610f7a0152818161107701528181611343015281816113fa0152818161149a015281816115a00152818161164001528181611b9001528181611c8e0152818161248d015261256a0152600061015d01526133b16000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806354fd4d5011610097578063b816903911610066578063b816903914610261578063ba3b734514610281578063bf2eb19e14610294578063fc9914cb146102b457600080fd5b806354fd4d50146101f25780637a0c7b21146101fa578063a80deda314610221578063b10b074e1461024157600080fd5b80632954018c116100d35780632954018c1461015857806339595cf8146101975780634b2f336d146101b85780634c472fc9146101df57600080fd5b80630dbd616d146100fa57806313d21cdf146101235780631bcd8fc014610143575b600080fd5b61010d610108366004612933565b6102d7565b60405161011a9190612ae8565b60405180910390f35b610136610131366004612afb565b61070d565b60405161011a9190612bfa565b61014b610f74565b60405161011a9190612c09565b61017f7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161011a565b6101aa6101a5366004612c58565b61112d565b60405190815260200161011a565b61017f7f000000000000000000000000000000000000000000000000000000000000000081565b61017f6101ed366004612933565b61131f565b6101aa600281565b61017f7f000000000000000000000000000000000000000000000000000000000000000081565b61023461022f366004612afb565b6113f2565b60405161011a9190612c9e565b61025461024f366004612933565b611715565b60405161011a9190612e6d565b61027461026f366004612afb565b611b8a565b60405161011a9190612e80565b6101aa61028f366004612f40565b611dc6565b6102a76102a2366004612ffd565b612273565b60405161011a91906130ef565b6102c76102c2366004612933565b612469565b604051901515815260200161011a565b6102df61274c565b6000806102eb85612544565b604051633a562dc160e21b81526001600160a01b03878116600483015292945090925060009184169063e958b70490602401602060405180830381865afa15801561033a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035e919061317e565b905061036861274c565b6001600160a01b038087166020808401919091528882166060840152838216835260408051636f307dc360e01b8152905192871692636f307dc3926004808401939192918290030181865afa1580156103c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e9919061317e565b81608001906001600160a01b031690816001600160a01b0316815250506000846001600160a01b031663570a7af26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610446573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046a919061317e565b9050806001600160a01b03166345d31f9d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ce919061319b565b826101000181815250506000856001600160a01b03166320a05ff76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610518573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053c919061319b565b604051630c64865760e21b81526001600160a01b03868116600483015291925090871690633192195c906024016040805180830381865afa158015610585573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a991906131b4565b60a08501526101a0840152604080516317d11a1560e01b815290516001600160a01b038616916317d11a159160048083019260209291908290030181865afa1580156105f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061d919061319b565b836101c0018181525050836001600160a01b0316633dc54b406040518163ffffffff1660e01b8152600401602060405180830381865afa158015610665573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610689919061319b565b836101e0018181525050856001600160a01b03166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f5919061319b565b60ff1661020084015250909450505050505b92915050565b6107156127fb565b604051635b16ebb760e01b81526001600160a01b03808416600483015283917f000000000000000000000000000000000000000000000000000000000000000090911690635b16ebb790602401602060405180830381865afa15801561077f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a391906131d8565b60405180604001604052806002815260200161052560f41b815250906107e55760405162461bcd60e51b81526004016107dc91906131fa565b60405180910390fd5b506107ee6127fb565b6001600160a01b0384168082526040805163fe14112d60e01b8152905186929163fe14112d9160048083019260209291908290030181865afa158015610838573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085c919061319b565b8260c0018181525050806001600160a01b031663ef8d96036040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c7919061319b565b8260e0018181525050806001600160a01b031663743753596040518163ffffffff1660e01b8152600401602060405180830381865afa15801561090e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610932919061319b565b8260a0018181525050806001600160a01b0316634c19386c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610979573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099d919061319b565b82610100018181525050806001600160a01b031663788c6bfe6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a09919061319b565b82610160018181525050806001600160a01b0316630fce70fb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a75919061319b565b826080018181525050806001600160a01b03166345d31f9d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610abc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae0919061319b565b82610140018181525050806001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4c919061317e565b82604001906001600160a01b031690816001600160a01b031681525050806001600160a01b03166336dda7d56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ba7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcb919061317e565b82606001906001600160a01b031690816001600160a01b031681525050806001600160a01b031663788c6bfe6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4a919061319b565b82610160018181525050806001600160a01b031663e941fa786040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb6919061319b565b6101808301526040808301516001600160a01b039081167f0000000000000000000000000000000000000000000000000000000000000000821614602080860191909152825163609ae31760e01b815292519184169263609ae31792600480830193928290030181865afa158015610d32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d56919061319b565b826101c0018181525050806001600160a01b031663dbcb313b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc2919061319b565b826101a0018181525050600082606001516001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e34919061319b565b604051630a84f92760e31b8152600481018290529091506000906001600160a01b03841690635427c93890602401602060405180830381865afa158015610e7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea3919061319b565b90508015610eed5780610ede856101800151612710610ec29190613223565b866101000151876101400151610ed8919061323a565b9061267e565b610ee89190613259565b610ef4565b8361014001515b84610120018181525050826001600160a01b03166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f60919061319b565b60ff166101e0850152509195945050505050565b606060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b4ac68606040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffa919061319b565b905060008167ffffffffffffffff81111561101757611017612ed5565b60405190808252806020026020018201604052801561105057816020015b61103d6127fb565b8152602001906001900390816110355790505b50905060005b82811015611126576040516315895f4760e31b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ac4afa3890602401602060405180830381865afa1580156110c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ea919061317e565b90506110f58161070d565b8383815181106111075761110761327b565b602002602001018190525050808061111e90613291565b915050611056565b5092915050565b600080600061113b87612544565b915091506000826001600160a01b0316632630c12f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561117f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a3919061317e565b604051630f064e8760e31b81526001600160a01b038981166004830152919250600091851690637832743890602401602060405180830381865afa1580156111ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611213919061319b565b826001600160a01b031663b66102df898b886001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611262573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611286919061317e565b6040516001600160e01b031960e086901b16815260048101939093526001600160a01b039182166024840152166044820152606401602060405180830381865afa1580156112d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fc919061319b565b611306919061323a565b90506113128682613259565b9998505050505050505050565b604051636fbc6f6b60e01b81526001600160a01b03808416600483015260009184917f00000000000000000000000000000000000000000000000000000000000000001690636fbc6f6b90602401602060405180830381865afa15801561138a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ae91906131d8565b60405180604001604052806002815260200161043560f41b815250906113e75760405162461bcd60e51b81526004016107dc91906131fa565b506000949350505050565b60606000805b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c29277cd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611456573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147a919061319b565b81101561153f57604051630785b93f60e21b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631e16e4fc90602401602060405180830381865afa1580156114e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150d919061317e565b90506115198186612469565b1561152c578261152881613291565b9350505b508061153781613291565b9150506113f8565b5060008167ffffffffffffffff81111561155b5761155b612ed5565b60405190808252806020026020018201604052801561159457816020015b61158161274c565b8152602001906001900390816115795790505b5090506000915060005b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c29277cd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611620919061319b565b81101561170d57604051630785b93f60e21b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631e16e4fc90602401602060405180830381865afa15801561168f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b3919061317e565b90506116bf8187612469565b156116fa576116ce81876102d7565b8385815181106116e0576116e061327b565b602002602001018190525083806116f690613291565b9450505b508061170581613291565b91505061159e565b509392505050565b61171d612898565b60008061172985612544565b91509150611735612898565b6001600160a01b038616815261174b8686612469565b151560208083019190915260408051636f307dc360e01b815290516001600160a01b03861692636f307dc392600480820193918290030181865afa158015611797573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117bb919061317e565b6001600160a01b0390811660408084018290527f0000000000000000000000000000000000000000000000000000000000000000831690911460608401528051632b853d7960e11b8152905160009286169163570a7af29160048083019260209291908290030181865afa158015611837573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185b919061317e565b604051632e97ca2160e01b81526001600160a01b03898116600483015291925090821690632e97ca2190602401602060405180830381865afa1580156118a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c991906131d8565b15156080830152604080516345d31f9d60e01b815290516001600160a01b038316916345d31f9d9160048083019260209291908290030181865afa158015611915573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611939919061319b565b8260a0018181525050806001600160a01b031663743753596040518163ffffffff1660e01b8152600401602060405180830381865afa158015611980573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a4919061319b565b826101200181815250506000846001600160a01b03166320a05ff76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a12919061319b565b90508067ffffffffffffffff811115611a2d57611a2d612ed5565b604051908082528060200260200182016040528015611a56578160200160208202803683370190505b5061014084015260005b81811015611b1257604051632f2f971360e11b8152600481018290526001600160a01b03871690635e5f2e2690602401602060405180830381865afa158015611aad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad1919061317e565b8461014001518281518110611ae857611ae861327b565b6001600160a01b039092166020928302919091019091015280611b0a81613291565b915050611a60565b50846001600160a01b03166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b75919061319b565b60ff1661018084015250909695505050505050565b606060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c29277cd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c10919061319b565b905060008167ffffffffffffffff811115611c2d57611c2d612ed5565b604051908082528060200260200182016040528015611c6657816020015b611c53612898565b815260200190600190039081611c4b5790505b5090506000805b83811015611dbc57604051630785b93f60e21b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631e16e4fc90602401602060405180830381865afa158015611cdd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d01919061317e565b9050806001600160a01b03166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d65919061319b565b60011415611d735750611daa565b611d7d8188611715565b848481518110611d8f57611d8f61327b565b60200260200101819052508280611da590613291565b935050505b80611db481613291565b915050611c6d565b5090949350505050565b6000806000611dd486612544565b604051633a562dc160e21b81526001600160a01b03888116600483015292945090925060009184169063e958b70490602401602060405180830381865afa158015611e23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e47919061317e565b90506000836001600160a01b0316632630c12f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ead919061317e565b90506000846001600160a01b03166320a05ff76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611eef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f13919061319b565b905080875114611f655760405162461bcd60e51b815260206004820152601760248201527f496e636f72726563742062616c616e6365732073697a6500000000000000000060448201526064016107dc565b600080866001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611fa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fca919061317e565b905060005b838110156121e757604051632f2f971360e11b8152600481018290526001600160a01b038916906378327438908290635e5f2e2690602401602060405180830381865afa158015612024573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612048919061317e565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561208c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b0919061319b565b856001600160a01b031663b66102df8c84815181106120d1576120d161327b565b60200260200101518b6001600160a01b0316635e5f2e26866040518263ffffffff1660e01b815260040161210791815260200190565b602060405180830381865afa158015612124573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612148919061317e565b6040516001600160e01b031960e085901b16815260048101929092526001600160a01b03908116602483015286166044820152606401602060405180830381865afa15801561219b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121bf919061319b565b6121c9919061323a565b6121d390846132ac565b9250806121df81613291565b915050611fcf565b50604051630c64865760e21b81526001600160a01b03868116600483015260009190891690633192195c906024016040805180830381865afa158015612231573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061225591906131b4565b915061226390508184613259565b9c9b505050505050505050505050565b60606000825167ffffffffffffffff81111561229157612291612ed5565b6040519080825280602002602001820160405280156122f257816020015b6122df604051806060016040528060006001600160a01b0316815260200160608152602001600060ff1681525090565b8152602001906001900390816122af5790505b50905060005b835181101561112657604051806060016040528085838151811061231e5761231e61327b565b60200260200101516001600160a01b031681526020018583815181106123465761234661327b565b60200260200101516001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801561238b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526123b391908101906132c4565b81526020018583815181106123ca576123ca61327b565b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561240f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124339190613358565b60ff1681525082828151811061244b5761244b61327b565b6020026020010181905250808061246190613291565b9150506122f8565b604051636fbc6f6b60e01b81526001600160a01b03808416600483015260009184917f00000000000000000000000000000000000000000000000000000000000000001690636fbc6f6b90602401602060405180830381865afa1580156124d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f891906131d8565b60405180604001604052806002815260200161043560f41b815250906125315760405162461bcd60e51b81526004016107dc91906131fa565b5061253c84846126cb565b949350505050565b604051636fbc6f6b60e01b81526001600160a01b038281166004830152600091829184917f000000000000000000000000000000000000000000000000000000000000000090911690636fbc6f6b90602401602060405180830381865afa1580156125b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d791906131d8565b60405180604001604052806002815260200161043560f41b815250906126105760405162461bcd60e51b81526004016107dc91906131fa565b50839250826001600160a01b0316632f7a18816040518163ffffffff1660e01b8152600401602060405180830381865afa158015612652573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612676919061317e565b915050915091565b600082158061268b575081155b1561269857506000610707565b6127106126a6600282613259565b6126b0848661323a565b6126ba91906132ac565b6126c49190613259565b9392505050565b60405163055ee9b560e01b81526001600160a01b038281166004830152600091829185169063055ee9b590602401602060405180830381865afa158015612716573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061273a919061317e565b6001600160a01b031614159392505050565b60405180610220016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160001515815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001606081526020016000815260200160008152602001600015158152602001600081526020016000815260200160008152602001600060ff1681525090565b60405180610200016040528060006001600160a01b0316815260200160001515815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600060ff1681525090565b604051806101a0016040528060006001600160a01b0316815260200160001515815260200160006001600160a01b0316815260200160001515815260200160001515815260200160008152602001600081526020016000815260200160008152602001600081526020016060815260200160608152602001600060ff1681525090565b6001600160a01b038116811461293057600080fd5b50565b6000806040838503121561294657600080fd5b82356129518161291b565b915060208301356129618161291b565b809150509250929050565b600081518084526020808501945080840160005b838110156129bd57815180516001600160a01b03168852838101518489015260409081015115159088015260609096019590820190600101612980565b509495945050505050565b80516001600160a01b03168252600061022060208301516129f460208601826001600160a01b03169052565b506040830151612a08604086018215159052565b506060830151612a2360608601826001600160a01b03169052565b506080830151612a3e60808601826001600160a01b03169052565b5060a083015160a085015260c083015160c085015260e083015160e0850152610100808401518186015250610120808401518282870152612a818387018261296c565b9250505061014080840151818601525061016080840151818601525061018080840151612ab18287018215159052565b50506101a083810151908501526101c080840151908501526101e080840151908501526102008084015160ff811682870152611dbc565b6020815260006126c460208301846129c8565b600060208284031215612b0d57600080fd5b81356126c48161291b565b80516001600160a01b031682526020810151612b38602084018215159052565b506040810151612b5360408401826001600160a01b03169052565b506060810151612b6e60608401826001600160a01b03169052565b506080818101519083015260a0808201519083015260c0808201519083015260e08082015190830152610100808201519083015261012080820151908301526101408082015190830152610160808201519083015261018080820151908301526101a080820151908301526101c080820151908301526101e08082015160ff8116828501525b50505050565b61020081016107078284612b18565b6020808252825182820181905260009190848201906040850190845b81811015612c4c57612c38838551612b18565b928401926102009290920191600101612c25565b50909695505050505050565b60008060008060808587031215612c6e57600080fd5b8435612c798161291b565b93506020850135612c898161291b565b93969395505050506040820135916060013590565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015612cf357603f19888603018452612ce18583516129c8565b94509285019290850190600101612cc5565b5092979650505050505050565b600081518084526020808501945080840160005b838110156129bd5781516001600160a01b031687529582019590820190600101612d14565b600081518084526020808501945080840160005b838110156129bd57815180516001600160a01b03908116895290840151168388015260409096019590820190600101612d4d565b80516001600160a01b0316825260006101a06020830151612da6602086018215159052565b506040830151612dc160408601826001600160a01b03169052565b506060830151612dd5606086018215159052565b506080830151612de9608086018215159052565b5060a083015160a085015260c083015160c085015260e083015160e0850152610100808401518186015250610120808401518186015250610140808401518282870152612e3883870182612d00565b925050506101608084015185830382870152612e548382612d39565b9250505061018080840151611dbc8287018260ff169052565b6020815260006126c46020830184612d81565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015612cf357603f19888603018452612ec3858351612d81565b94509285019290850190600101612ea7565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612f1457612f14612ed5565b604052919050565b600067ffffffffffffffff821115612f3657612f36612ed5565b5060051b60200190565b600080600060608486031215612f5557600080fd5b8335612f608161291b565b9250602084810135612f718161291b565b9250604085013567ffffffffffffffff811115612f8d57600080fd5b8501601f81018713612f9e57600080fd5b8035612fb1612fac82612f1c565b612eeb565b81815260059190911b82018301908381019089831115612fd057600080fd5b928401925b82841015612fee57833582529284019290840190612fd5565b80955050505050509250925092565b6000602080838503121561301057600080fd5b823567ffffffffffffffff81111561302757600080fd5b8301601f8101851361303857600080fd5b8035613046612fac82612f1c565b81815260059190911b8201830190838101908783111561306557600080fd5b928401925b8284101561308c57833561307d8161291b565b8252928401929084019061306a565b979650505050505050565b60005b838110156130b257818101518382015260200161309a565b83811115612bf45750506000910152565b600081518084526130db816020860160208601613097565b601f01601f19169290920160200192915050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561317057888303603f19018552815180516001600160a01b031684528781015160608986018190529061314f828701826130c3565b9289015160ff16958901959095525094870194925090860190600101613116565b509098975050505050505050565b60006020828403121561319057600080fd5b81516126c48161291b565b6000602082840312156131ad57600080fd5b5051919050565b600080604083850312156131c757600080fd5b505080516020909101519092909150565b6000602082840312156131ea57600080fd5b815180151581146126c457600080fd5b6020815260006126c460208301846130c3565b634e487b7160e01b600052601160045260246000fd5b6000828210156132355761323561320d565b500390565b60008160001904831182151516156132545761325461320d565b500290565b60008261327657634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b60006000198214156132a5576132a561320d565b5060010190565b600082198211156132bf576132bf61320d565b500190565b6000602082840312156132d657600080fd5b815167ffffffffffffffff808211156132ee57600080fd5b818401915084601f83011261330257600080fd5b81518181111561331457613314612ed5565b613327601f8201601f1916602001612eeb565b915080825285602082850101111561333e57600080fd5b61334f816020840160208601613097565b50949350505050565b60006020828403121561336a57600080fd5b815160ff811681146126c457600080fdfea2646970667358221220c3e3278916e4b1aa6906001080eb5339eab79fdc9db0bb14962aa89ef2e2bbc764736f6c634300080a0033" . parse () . expect ("invalid bytecode")
        });
    #[derive(Clone)]
    pub struct DataCompressor<M>(ethers::contract::Contract<M>);
    impl<M> std::ops::Deref for DataCompressor<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for DataCompressor<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(DataCompressor))
                .field(&self.address())
                .finish()
        }
    }
    impl<'a, M: ethers::providers::Middleware> DataCompressor<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), DATACOMPRESSOR_ABI.clone(), client)
                .into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                DATACOMPRESSOR_ABI.clone(),
                DATACOMPRESSOR_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `WETHToken` (0x4b2f336d) function"]
        pub fn weth_token(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([75, 47, 51, 109], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `addressProvider` (0x2954018c) function"]
        pub fn address_provider(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([41, 84, 1, 140], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `calcExpectedAtOpenHf` (0x39595cf8) function"]
        pub fn calc_expected_at_open_hf(
            &self,
            credit_manager: ethers::core::types::Address,
            token: ethers::core::types::Address,
            amount: ethers::core::types::U256,
            borrowed_amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash(
                    [57, 89, 92, 248],
                    (credit_manager, token, amount, borrowed_amount),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `calcExpectedHf` (0xba3b7345) function"]
        pub fn calc_expected_hf(
            &self,
            credit_manager: ethers::core::types::Address,
            borrower: ethers::core::types::Address,
            balances: ::std::vec::Vec<ethers::core::types::U256>,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([186, 59, 115, 69], (credit_manager, borrower, balances))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `contractsRegister` (0x7a0c7b21) function"]
        pub fn contracts_register(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([122, 12, 123, 33], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getAdapter` (0x4c472fc9) function"]
        pub fn get_adapter(
            &self,
            credit_manager: ethers::core::types::Address,
            allowed_contract: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([76, 71, 47, 201], (credit_manager, allowed_contract))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getCreditAccountData` (0x0dbd616d) function"]
        pub fn get_credit_account_data(
            &self,
            credit_manager: ethers::core::types::Address,
            borrower: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, CreditAccountData> {
            self.0
                .method_hash([13, 189, 97, 109], (credit_manager, borrower))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getCreditAccountList` (0xa80deda3) function"]
        pub fn get_credit_account_list(
            &self,
            borrower: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ::std::vec::Vec<CreditAccountData>>
        {
            self.0
                .method_hash([168, 13, 237, 163], borrower)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getCreditManagerData` (0xb10b074e) function"]
        pub fn get_credit_manager_data(
            &self,
            credit_manager: ethers::core::types::Address,
            borrower: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, CreditManagerData> {
            self.0
                .method_hash([177, 11, 7, 78], (credit_manager, borrower))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getCreditManagersList` (0xb8169039) function"]
        pub fn get_credit_managers_list(
            &self,
            borrower: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ::std::vec::Vec<CreditManagerData>>
        {
            self.0
                .method_hash([184, 22, 144, 57], borrower)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getPoolData` (0x13d21cdf) function"]
        pub fn get_pool_data(
            &self,
            pool: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, PoolData> {
            self.0
                .method_hash([19, 210, 28, 223], pool)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getPoolsList` (0x1bcd8fc0) function"]
        pub fn get_pools_list(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ::std::vec::Vec<PoolData>> {
            self.0
                .method_hash([27, 205, 143, 192], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getTokenData` (0xbf2eb19e) function"]
        pub fn get_token_data(
            &self,
            addr: ::std::vec::Vec<ethers::core::types::Address>,
        ) -> ethers::contract::builders::ContractCall<M, ::std::vec::Vec<TokenInfo>> {
            self.0
                .method_hash([191, 46, 177, 158], addr)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hasOpenedCreditAccount` (0xfc9914cb) function"]
        pub fn has_opened_credit_account(
            &self,
            credit_manager: ethers::core::types::Address,
            borrower: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([252, 153, 20, 203], (credit_manager, borrower))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `version` (0x54fd4d50) function"]
        pub fn version(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([84, 253, 77, 80], ())
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for DataCompressor<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[doc = "Container type for all input parameters for the `WETHToken`function with signature `WETHToken()` and selector `[75, 47, 51, 109]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "WETHToken", abi = "WETHToken()")]
    pub struct WethtokenCall;
    #[doc = "Container type for all input parameters for the `addressProvider`function with signature `addressProvider()` and selector `[41, 84, 1, 140]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "addressProvider", abi = "addressProvider()")]
    pub struct AddressProviderCall;
    #[doc = "Container type for all input parameters for the `calcExpectedAtOpenHf`function with signature `calcExpectedAtOpenHf(address,address,uint256,uint256)` and selector `[57, 89, 92, 248]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "calcExpectedAtOpenHf",
        abi = "calcExpectedAtOpenHf(address,address,uint256,uint256)"
    )]
    pub struct CalcExpectedAtOpenHfCall {
        pub credit_manager: ethers::core::types::Address,
        pub token: ethers::core::types::Address,
        pub amount: ethers::core::types::U256,
        pub borrowed_amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `calcExpectedHf`function with signature `calcExpectedHf(address,address,uint256[])` and selector `[186, 59, 115, 69]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "calcExpectedHf",
        abi = "calcExpectedHf(address,address,uint256[])"
    )]
    pub struct CalcExpectedHfCall {
        pub credit_manager: ethers::core::types::Address,
        pub borrower: ethers::core::types::Address,
        pub balances: ::std::vec::Vec<ethers::core::types::U256>,
    }
    #[doc = "Container type for all input parameters for the `contractsRegister`function with signature `contractsRegister()` and selector `[122, 12, 123, 33]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "contractsRegister", abi = "contractsRegister()")]
    pub struct ContractsRegisterCall;
    #[doc = "Container type for all input parameters for the `getAdapter`function with signature `getAdapter(address,address)` and selector `[76, 71, 47, 201]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "getAdapter", abi = "getAdapter(address,address)")]
    pub struct GetAdapterCall {
        pub credit_manager: ethers::core::types::Address,
        pub allowed_contract: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `getCreditAccountData`function with signature `getCreditAccountData(address,address)` and selector `[13, 189, 97, 109]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "getCreditAccountData",
        abi = "getCreditAccountData(address,address)"
    )]
    pub struct GetCreditAccountDataCall {
        pub credit_manager: ethers::core::types::Address,
        pub borrower: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `getCreditAccountList`function with signature `getCreditAccountList(address)` and selector `[168, 13, 237, 163]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "getCreditAccountList", abi = "getCreditAccountList(address)")]
    pub struct GetCreditAccountListCall {
        pub borrower: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `getCreditManagerData`function with signature `getCreditManagerData(address,address)` and selector `[177, 11, 7, 78]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "getCreditManagerData",
        abi = "getCreditManagerData(address,address)"
    )]
    pub struct GetCreditManagerDataCall {
        pub credit_manager: ethers::core::types::Address,
        pub borrower: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `getCreditManagersList`function with signature `getCreditManagersList(address)` and selector `[184, 22, 144, 57]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "getCreditManagersList", abi = "getCreditManagersList(address)")]
    pub struct GetCreditManagersListCall {
        pub borrower: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `getPoolData`function with signature `getPoolData(address)` and selector `[19, 210, 28, 223]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "getPoolData", abi = "getPoolData(address)")]
    pub struct GetPoolDataCall {
        pub pool: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `getPoolsList`function with signature `getPoolsList()` and selector `[27, 205, 143, 192]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "getPoolsList", abi = "getPoolsList()")]
    pub struct GetPoolsListCall;
    #[doc = "Container type for all input parameters for the `getTokenData`function with signature `getTokenData(address[])` and selector `[191, 46, 177, 158]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "getTokenData", abi = "getTokenData(address[])")]
    pub struct GetTokenDataCall {
        pub addr: ::std::vec::Vec<ethers::core::types::Address>,
    }
    #[doc = "Container type for all input parameters for the `hasOpenedCreditAccount`function with signature `hasOpenedCreditAccount(address,address)` and selector `[252, 153, 20, 203]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "hasOpenedCreditAccount",
        abi = "hasOpenedCreditAccount(address,address)"
    )]
    pub struct HasOpenedCreditAccountCall {
        pub credit_manager: ethers::core::types::Address,
        pub borrower: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `version`function with signature `version()` and selector `[84, 253, 77, 80]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "version", abi = "version()")]
    pub struct VersionCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum DataCompressorCalls {
        Wethtoken(WethtokenCall),
        AddressProvider(AddressProviderCall),
        CalcExpectedAtOpenHf(CalcExpectedAtOpenHfCall),
        CalcExpectedHf(CalcExpectedHfCall),
        ContractsRegister(ContractsRegisterCall),
        GetAdapter(GetAdapterCall),
        GetCreditAccountData(GetCreditAccountDataCall),
        GetCreditAccountList(GetCreditAccountListCall),
        GetCreditManagerData(GetCreditManagerDataCall),
        GetCreditManagersList(GetCreditManagersListCall),
        GetPoolData(GetPoolDataCall),
        GetPoolsList(GetPoolsListCall),
        GetTokenData(GetTokenDataCall),
        HasOpenedCreditAccount(HasOpenedCreditAccountCall),
        Version(VersionCall),
    }
    impl ethers::core::abi::AbiDecode for DataCompressorCalls {
        fn decode(data: impl AsRef<[u8]>) -> Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <WethtokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DataCompressorCalls::Wethtoken(decoded));
            }
            if let Ok(decoded) =
                <AddressProviderCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DataCompressorCalls::AddressProvider(decoded));
            }
            if let Ok(decoded) =
                <CalcExpectedAtOpenHfCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DataCompressorCalls::CalcExpectedAtOpenHf(decoded));
            }
            if let Ok(decoded) =
                <CalcExpectedHfCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DataCompressorCalls::CalcExpectedHf(decoded));
            }
            if let Ok(decoded) =
                <ContractsRegisterCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DataCompressorCalls::ContractsRegister(decoded));
            }
            if let Ok(decoded) =
                <GetAdapterCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DataCompressorCalls::GetAdapter(decoded));
            }
            if let Ok(decoded) =
                <GetCreditAccountDataCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DataCompressorCalls::GetCreditAccountData(decoded));
            }
            if let Ok(decoded) =
                <GetCreditAccountListCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DataCompressorCalls::GetCreditAccountList(decoded));
            }
            if let Ok(decoded) =
                <GetCreditManagerDataCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DataCompressorCalls::GetCreditManagerData(decoded));
            }
            if let Ok(decoded) =
                <GetCreditManagersListCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DataCompressorCalls::GetCreditManagersList(decoded));
            }
            if let Ok(decoded) =
                <GetPoolDataCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DataCompressorCalls::GetPoolData(decoded));
            }
            if let Ok(decoded) =
                <GetPoolsListCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DataCompressorCalls::GetPoolsList(decoded));
            }
            if let Ok(decoded) =
                <GetTokenDataCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DataCompressorCalls::GetTokenData(decoded));
            }
            if let Ok(decoded) =
                <HasOpenedCreditAccountCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DataCompressorCalls::HasOpenedCreditAccount(decoded));
            }
            if let Ok(decoded) =
                <VersionCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DataCompressorCalls::Version(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for DataCompressorCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                DataCompressorCalls::Wethtoken(element) => element.encode(),
                DataCompressorCalls::AddressProvider(element) => element.encode(),
                DataCompressorCalls::CalcExpectedAtOpenHf(element) => element.encode(),
                DataCompressorCalls::CalcExpectedHf(element) => element.encode(),
                DataCompressorCalls::ContractsRegister(element) => element.encode(),
                DataCompressorCalls::GetAdapter(element) => element.encode(),
                DataCompressorCalls::GetCreditAccountData(element) => element.encode(),
                DataCompressorCalls::GetCreditAccountList(element) => element.encode(),
                DataCompressorCalls::GetCreditManagerData(element) => element.encode(),
                DataCompressorCalls::GetCreditManagersList(element) => element.encode(),
                DataCompressorCalls::GetPoolData(element) => element.encode(),
                DataCompressorCalls::GetPoolsList(element) => element.encode(),
                DataCompressorCalls::GetTokenData(element) => element.encode(),
                DataCompressorCalls::HasOpenedCreditAccount(element) => element.encode(),
                DataCompressorCalls::Version(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for DataCompressorCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                DataCompressorCalls::Wethtoken(element) => element.fmt(f),
                DataCompressorCalls::AddressProvider(element) => element.fmt(f),
                DataCompressorCalls::CalcExpectedAtOpenHf(element) => element.fmt(f),
                DataCompressorCalls::CalcExpectedHf(element) => element.fmt(f),
                DataCompressorCalls::ContractsRegister(element) => element.fmt(f),
                DataCompressorCalls::GetAdapter(element) => element.fmt(f),
                DataCompressorCalls::GetCreditAccountData(element) => element.fmt(f),
                DataCompressorCalls::GetCreditAccountList(element) => element.fmt(f),
                DataCompressorCalls::GetCreditManagerData(element) => element.fmt(f),
                DataCompressorCalls::GetCreditManagersList(element) => element.fmt(f),
                DataCompressorCalls::GetPoolData(element) => element.fmt(f),
                DataCompressorCalls::GetPoolsList(element) => element.fmt(f),
                DataCompressorCalls::GetTokenData(element) => element.fmt(f),
                DataCompressorCalls::HasOpenedCreditAccount(element) => element.fmt(f),
                DataCompressorCalls::Version(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<WethtokenCall> for DataCompressorCalls {
        fn from(var: WethtokenCall) -> Self {
            DataCompressorCalls::Wethtoken(var)
        }
    }
    impl ::std::convert::From<AddressProviderCall> for DataCompressorCalls {
        fn from(var: AddressProviderCall) -> Self {
            DataCompressorCalls::AddressProvider(var)
        }
    }
    impl ::std::convert::From<CalcExpectedAtOpenHfCall> for DataCompressorCalls {
        fn from(var: CalcExpectedAtOpenHfCall) -> Self {
            DataCompressorCalls::CalcExpectedAtOpenHf(var)
        }
    }
    impl ::std::convert::From<CalcExpectedHfCall> for DataCompressorCalls {
        fn from(var: CalcExpectedHfCall) -> Self {
            DataCompressorCalls::CalcExpectedHf(var)
        }
    }
    impl ::std::convert::From<ContractsRegisterCall> for DataCompressorCalls {
        fn from(var: ContractsRegisterCall) -> Self {
            DataCompressorCalls::ContractsRegister(var)
        }
    }
    impl ::std::convert::From<GetAdapterCall> for DataCompressorCalls {
        fn from(var: GetAdapterCall) -> Self {
            DataCompressorCalls::GetAdapter(var)
        }
    }
    impl ::std::convert::From<GetCreditAccountDataCall> for DataCompressorCalls {
        fn from(var: GetCreditAccountDataCall) -> Self {
            DataCompressorCalls::GetCreditAccountData(var)
        }
    }
    impl ::std::convert::From<GetCreditAccountListCall> for DataCompressorCalls {
        fn from(var: GetCreditAccountListCall) -> Self {
            DataCompressorCalls::GetCreditAccountList(var)
        }
    }
    impl ::std::convert::From<GetCreditManagerDataCall> for DataCompressorCalls {
        fn from(var: GetCreditManagerDataCall) -> Self {
            DataCompressorCalls::GetCreditManagerData(var)
        }
    }
    impl ::std::convert::From<GetCreditManagersListCall> for DataCompressorCalls {
        fn from(var: GetCreditManagersListCall) -> Self {
            DataCompressorCalls::GetCreditManagersList(var)
        }
    }
    impl ::std::convert::From<GetPoolDataCall> for DataCompressorCalls {
        fn from(var: GetPoolDataCall) -> Self {
            DataCompressorCalls::GetPoolData(var)
        }
    }
    impl ::std::convert::From<GetPoolsListCall> for DataCompressorCalls {
        fn from(var: GetPoolsListCall) -> Self {
            DataCompressorCalls::GetPoolsList(var)
        }
    }
    impl ::std::convert::From<GetTokenDataCall> for DataCompressorCalls {
        fn from(var: GetTokenDataCall) -> Self {
            DataCompressorCalls::GetTokenData(var)
        }
    }
    impl ::std::convert::From<HasOpenedCreditAccountCall> for DataCompressorCalls {
        fn from(var: HasOpenedCreditAccountCall) -> Self {
            DataCompressorCalls::HasOpenedCreditAccount(var)
        }
    }
    impl ::std::convert::From<VersionCall> for DataCompressorCalls {
        fn from(var: VersionCall) -> Self {
            DataCompressorCalls::Version(var)
        }
    }
}
