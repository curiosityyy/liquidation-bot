pub use creditconfigurator_mod::*;
#[allow(clippy::too_many_arguments)]
mod creditconfigurator_mod {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "CreditConfigurator was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static CREDITCONFIGURATOR_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"contract CreditManager\",\"name\":\"_creditManager\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"contract CreditFacade\",\"name\":\"_creditFacade\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"struct CreditManagerOpts\",\"name\":\"opts\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"uint256\",\"name\":\"minBorrowedAmount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"maxBorrowedAmount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"struct AllowedToken[]\",\"name\":\"allowedTokens\",\"type\":\"tuple[]\",\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\",\"components\":[]}]},{\"internalType\":\"address\",\"name\":\"degenNFT\",\"type\":\"address\",\"components\":[]}]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"AdapterHasIncorrectCreditManagerException\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"AdapterUsedTwiceException\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"ChiThresholdMoreOneException\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"ContractNotInAllowedList\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"CreditManagerOrFacadeUsedAsAllowContractsException\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"FastCheckNotCoverCollateralDropException\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"IncorrectFeesException\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"IncorrectLiquidationThresholdException\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"IncorrectPriceFeedException\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"IncorrectTokenContractException\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"SetLTForUnderlyingException\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"TokenNotAllowedException\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"ZeroAddressException\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"ContractAllowed\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"ContractForbidden\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCreditConfigurator\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"CreditConfiguratorUpgraded\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCreditFacade\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"CreditFacadeUpgraded\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chiThreshold\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"fastCheckDelay\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"FastCheckParametersUpdated\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeInterest\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"feeLiquidation\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"liquidationPremium\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"FeesUpdated\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minBorrowedAmount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"maxBorrowedAmount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"LimitsUpdated\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Paused\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPriceOracle\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"PriceOracleUpgraded\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"TokenAllowed\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"TokenForbidden\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"liquidityThreshold\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TokenLiquidationThresholdUpdated\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Unpaused\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"addTokenToAllowedList\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"addressProvider\",\"outputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"allowContract\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"allowToken\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"allowedContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"allowedContractsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"times\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"calcMaxPossibleDrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"creditFacade\",\"outputs\":[{\"internalType\":\"contract CreditFacade\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"creditManager\",\"outputs\":[{\"internalType\":\"contract CreditManager\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"forbidContract\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"forbidToken\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"pause\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_mode\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setDegenMode\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chiThreshold\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_hfCheckInterval\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setFastCheckParameters\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeInterest\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_feeLiquidation\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_liquidationPremium\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setFees\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_mode\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setIncreaseDebtForbidden\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBorrowedAmount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_maxBorrowedAmount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setLimits\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setLiquidationThreshold\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"unpause\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creditConfigurator\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"upgradeConfigurator\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creditFacade\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"upgradeCreditFacade\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"upgradePriceOracle\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static CREDITCONFIGURATOR_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x60a06040523480156200001157600080fd5b50604051620044b6380380620044b6833981016040819052620000349162000f9b565b826001600160a01b031663570a7af26040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000073573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000099919062001101565b6001600160a01b0316632954018c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620000d7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000fd919062001101565b6000805460ff1916905560408051808201909152600281526105a360f41b60208201526001600160a01b038216620001535760405162461bcd60e51b81526004016200014a919062001128565b60405180910390fd5b50806001600160a01b031663087376956040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000193573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001b9919062001101565b6001600160a01b03908116608052600280548683166001600160a01b0319918216811790925560018054938716939091169290921790915560408051636f307dc360e01b81529051919250636f307dc39160048083019260209291908290030181865afa1580156200022f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000255919062001101565b600360006101000a8154816001600160a01b0302191690836001600160a01b03160217905550826001600160a01b031663570a7af26040518163ffffffff1660e01b8152600401602060405180830381865afa158015620002ba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002e0919062001101565b6001600160a01b0316632954018c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200031e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000344919062001101565b600080546001600160a01b039290921661010002610100600160a81b0319909216919091179055805160208201516200039891906103e860c86200038d6101f461271062001196565b6126de60046200050b565b60408101515160005b818110156200042457600083604001518281518110620003c557620003c5620011b0565b6020026020010151600001519050620003e481620007d560201b60201c565b6200041a8185604001518481518110620004025762000402620011b0565b60200260200101516020015162000a2560201b60201c565b50600101620003a1565b5060025460408051632630c12f60e01b815290516001600160a01b03909216916311ca4fc29186918491632630c12f9160048083019260209291908290030181865afa15801562000479573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200049f919062001101565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401600060405180830381600087803b158015620004e857600080fd5b505af1158015620004fd573d6000803e3d6000fd5b505050505050505062001243565b600062000519858562001196565b600254600354604051630f064e8760e31b81526001600160a01b0391821660048201529293501690637832743890602401602060405180830381865afa15801562000568573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200058e9190620011c6565b8114620005a057620005a08162000ba3565b600254604080516347dedfc960e01b815290516000926001600160a01b0316916347dedfc99160048083019260209291908290030181865afa158015620005eb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006119190620011c6565b90506000600260009054906101000a90046001600160a01b03166001600160a01b031663e6dee2cc6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000669573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200068f9190620011c6565b90506000600260009054906101000a90046001600160a01b03166001600160a01b0316633915ffaa6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620006e7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200070d9190620011c6565b905082861415806200071f5750818514155b806200072b5750808814155b156200073e576200073e86868a62000dfd565b60025460405163670e22ab60e11b8152600481018d9052602481018c9052604481018b9052606481018a90526084810189905260a4810188905260c481018790526001600160a01b039091169063ce1c45569060e401600060405180830381600087803b158015620007af57600080fd5b505af1158015620007c4573d6000803e3d6000fd5b505050505050505050505050505050565b6001600160a01b038116620007fd57604051635919af9760e11b815260040160405180910390fd5b6040516370a0823160e01b81523060048201526001600160a01b038216906370a0823190602401602060405180830381865afa92505050801562000860575060408051601f3d908101601f191682019092526200085d91810190620011c6565b60015b6200087e5760405163528ca31d60e01b815260040160405180910390fd5b50600260009054906101000a90046001600160a01b03166001600160a01b0316632630c12f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620008d3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008f9919062001101565b604051630f9a650360e41b8152670de0b6b3a764000060048201526001600160a01b038381166024830152919091169063f9a6503090604401602060405180830381865afa9250505080156200096e575060408051601f3d908101601f191682019092526200096b91810190620011c6565b60015b6200098c576040516367a7cd4360e01b815260040160405180910390fd5b5060025460405163d48bfca760e01b81526001600160a01b0383811660048301529091169063d48bfca790602401600060405180830381600087803b158015620009d557600080fd5b505af1158015620009ea573d6000803e3d6000fd5b50506040516001600160a01b03841692507fbeceb48aeaa805aeae57be163cca6249077a18734e408a85aa74e875c43738099150600090a250565b6003546001600160a01b038381169116141562000a5557604051633b899cf960e01b815260040160405180910390fd5b80158062000ad45750600254600354604051630f064e8760e31b81526001600160a01b039182166004820152911690637832743890602401602060405180830381865afa15801562000aab573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ad19190620011c6565b81115b1562000af3576040516333c6608d60e01b815260040160405180910390fd5b600254604051630e30428d60e01b81526001600160a01b0384811660048301526024820184905290911690630e30428d90604401600060405180830381600087803b15801562000b4257600080fd5b505af115801562000b57573d6000803e3d6000fd5b50505050816001600160a01b03167fd5e67007f7834ddcc2f493b83810f7c6ab74e1bba7b88847f6d4adf9e03fbe828260405162000b9791815260200190565b60405180910390a25050565b600254600354604051630e30428d60e01b81526001600160a01b03918216600482015260248101849052911690630e30428d90604401600060405180830381600087803b15801562000bf457600080fd5b505af115801562000c09573d6000803e3d6000fd5b505050506000600260009054906101000a90046001600160a01b03166001600160a01b03166320a05ff76040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000c63573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c899190620011c6565b905060015b8181101562000df857600254604051632f2f971360e11b8152600481018390526000916001600160a01b031690635e5f2e2690602401602060405180830381865afa15801562000ce2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d08919062001101565b600254604051630f064e8760e31b81526001600160a01b038084166004830152929350869290911690637832743890602401602060405180830381865afa15801562000d58573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d7e9190620011c6565b111562000dee57600254604051630e30428d60e01b81526001600160a01b0383811660048301526024820187905290911690630e30428d90604401600060405180830381600087803b15801562000dd457600080fd5b505af115801562000de9573d6000803e3d6000fd5b505050505b5060010162000c8e565b505050565b600062000e0b848462000e43565b62000e199061271062001196565b90508181111562000e3d57604051631e62754760e21b815260040160405180910390fd5b50505050565b600061271083141562000e5a575061271062000ed1565b62000e6861271084620011e0565b9050600182111562000ec05760005b62000e8460018462001196565b81101562000ebe5761271062000e9b8584620011e0565b62000ea7919062001202565b91508062000eb58162001225565b91505062000e77565b505b62000ece6127108262001202565b90505b92915050565b6001600160a01b038116811462000eed57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b038111828210171562000f2b5762000f2b62000ef0565b60405290565b604080519081016001600160401b038111828210171562000f2b5762000f2b62000ef0565b604051601f8201601f191681016001600160401b038111828210171562000f815762000f8162000ef0565b604052919050565b805162000f968162000ed7565b919050565b60008060006060848603121562000fb157600080fd5b835162000fbe8162000ed7565b8093505060208085015162000fd38162000ed7565b604086810151919450906001600160401b038082111562000ff357600080fd5b908701906080828a0312156200100857600080fd5b6200101262000f06565b82518152848301518582015283830151828111156200103057600080fd5b8301601f81018b136200104257600080fd5b80518381111562001057576200105762000ef0565b62001067878260051b0162000f56565b818152878101945060069190911b82018701908c8211156200108857600080fd5b918701915b81831015620010d85786838e031215620010a75760008081fd5b620010b162000f31565b8351620010be8162000ed7565b81528389015189820152855293870193918601916200108d565b8387015250620010ed90506060840162000f89565b606082015280955050505050509250925092565b6000602082840312156200111457600080fd5b8151620011218162000ed7565b9392505050565b600060208083528351808285015260005b81811015620011575785810183015185820160400152820162001139565b818111156200116a576000604083870101525b50601f01601f1916929092016040019392505050565b634e487b7160e01b600052601160045260246000fd5b600082821015620011ab57620011ab62001180565b500390565b634e487b7160e01b600052603260045260246000fd5b600060208284031215620011d957600080fd5b5051919050565b6000816000190483118215151615620011fd57620011fd62001180565b500290565b6000826200122057634e487b7160e01b600052601260045260246000fd5b500490565b60006000198214156200123c576200123c62001180565b5060010190565b6080516131ee620012c86000396000818161036601528181610441015281816106bf015281816107b101528181610a4d01528181610dc401528181610f9601528181611064015281816111b10152818161142f01528181611556015281816118ad01528181611ae501528181611bdb01528181611cab0152611ef801526131ee6000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c80636f307dc3116100de578063c12c21c011610097578063cf64ffdf11610071578063cf64ffdf14610310578063dadfb98b14610323578063f0527ac614610336578063ffd9b9071461033e57600080fd5b8063c12c21c0146102d7578063c4590d3f146102ea578063cec10c11146102fd57600080fd5b80636f307dc3146102705780637bccacee146102835780638456cb5914610296578063b3c619431461029e578063b53472ef146102b1578063bbbae6ab146102c457600080fd5b806350e036ff1161013057806350e036ff1461020357806352438e541461021957806354fd4d501461022c5780635c975abb1461023457806362061c6d1461024a578063693ce7f51461025d57600080fd5b80630e30428d14610178578063241477081461018d5780632954018c146101a05780632f7a1881146101d55780633f4ba83a146101e85780635094cb4f146101f0575b600080fd5b61018b610186366004612f2f565b610351565b005b61018b61019b366004612f5b565b61042c565b6000546101b89061010090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6001546101b8906001600160a01b031681565b61018b6106aa565b6101b86101fe366004612f78565b610778565b61020b61078b565b6040519081526020016101cc565b61018b610227366004612f5b565b61079c565b61020b600281565b60005460ff1660405190151581526020016101cc565b61018b610258366004612f91565b610a38565b61018b61026b366004612f5b565b610daf565b6003546101b8906001600160a01b031681565b61018b610291366004612fb3565b610f81565b61018b61104f565b61020b6102ac366004612f91565b61111b565b61018b6102bf366004612f5b565b61119c565b61018b6102d2366004612f5b565b61141a565b6002546101b8906001600160a01b031681565b61018b6102f8366004612f91565b611541565b61018b61030b366004612fec565b611898565b61018b61031e366004613026565b611ad0565b61018b610331366004612f5b565b611bc6565b61018b611c96565b61018b61034c366004613026565b611ee3565b604051632f92cd5d60e11b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635f259aba90602401602060405180830381865afa1580156103b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d99190613043565b6040518060400160405280600481526020016320a1a61960e11b8152509061041d5760405162461bcd60e51b81526004016104149190613060565b60405180910390fd5b506104288282611fdc565b5050565b604051632f92cd5d60e11b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635f259aba90602401602060405180830381865afa158015610490573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b49190613043565b6040518060400160405280600481526020016320a1a61960e11b815250906104ef5760405162461bcd60e51b81526004016104149190613060565b50600254604051630f67c5bd60e41b81526001600160a01b038381166004830152600092169063f67c5bd090602401602060405180830381865afa15801561053b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055f91906130b5565b90506000600260009054906101000a90046001600160a01b03166001600160a01b031663e46c95bc6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105da91906130b5565b90508115806105e95750816001145b156106075760405163700ca0af60e01b815260040160405180910390fd5b8082166106a5576002546040516351b37a4b60e11b815291831760048301819052916001600160a01b039091169063a366f49690602401600060405180830381600087803b15801561065857600080fd5b505af115801561066c573d6000803e3d6000fd5b50506040516001600160a01b03861692507ff17b849746e74d7186170c9553d4bbf60b4f8bb1ed81fe50c099b934fb078f059150600090a25b505050565b604051630d4eb5db60e41b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d4eb5db090602401602060405180830381865afa15801561070e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107329190613043565b6040518060400160405280600481526020016341434c3160e01b8152509061076d5760405162461bcd60e51b81526004016104149190613060565b50610776612151565b565b60006107856004836121e4565b92915050565b600061079760046121f0565b905090565b604051632f92cd5d60e11b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635f259aba90602401602060405180830381865afa158015610800573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108249190613043565b6040518060400160405280600481526020016320a1a61960e11b8152509061085f5760405162461bcd60e51b81526004016104149190613060565b506001600160a01b03811661088757604051635919af9760e11b815260040160405180910390fd5b60015460405163fdd5764560e01b81526001600160a01b038381166004830152600092169063fdd5764590602401602060405180830381865afa1580156108d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f691906130ce565b90506001600160a01b03811661091f576040516308b8661760e11b815260040160405180910390fd5b600254604051631ba6397960e21b81526001600160a01b0383811660048301526000602483015290911690636e98e5e490604401600060405180830381600087803b15801561096d57600080fd5b505af1158015610981573d6000803e3d6000fd5b5050600154604051631450a27960e11b8152600060048201526001600160a01b03868116602483015290911692506328a144f29150604401600060405180830381600087803b1580156109d357600080fd5b505af11580156109e7573d6000803e3d6000fd5b505050506109ff8260046121fa90919063ffffffff16565b506040516001600160a01b038316907fab9f405bf0c19b97f65a7031634db41569cd2f0e0376a610a1e977f9ab22b58f90600090a25050565b604051632f92cd5d60e11b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635f259aba90602401602060405180830381865afa158015610a9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac09190613043565b6040518060400160405280600481526020016320a1a61960e11b81525090610afb5760405162461bcd60e51b81526004016104149190613060565b50612710821115610b1f576040516370ce7df760e11b815260040160405180910390fd5b600254604080516305e3b96d60e11b81529051610d71926001600160a01b031691630bc772da9160048083019260209291908290030181865afa158015610b6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8e91906130b5565b600260009054906101000a90046001600160a01b03166001600160a01b031663621869056040518163ffffffff1660e01b8152600401602060405180830381865afa158015610be1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0591906130b5565b600260009054906101000a90046001600160a01b03166001600160a01b0316635e0b63d36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7c91906130b5565b600260009054906101000a90046001600160a01b03166001600160a01b0316633915ffaa6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ccf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf391906130b5565b600260009054906101000a90046001600160a01b03166001600160a01b0316638053fcbe6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6a91906130b5565b878761220f565b60408051838152602081018390527f86c4e28f8d9aa63f858bc3a8f0c0bbed25c8e045c4ac2e280eedc497246fdf2991015b60405180910390a15050565b604051632f92cd5d60e11b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635f259aba90602401602060405180830381865afa158015610e13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e379190613043565b6040518060400160405280600481526020016320a1a61960e11b81525090610e725760405162461bcd60e51b81526004016104149190613060565b5060025460408051632630c12f60e01b815290516001600160a01b03909216916311ca4fc29184918491632630c12f9160048083019260209291908290030181865afa158015610ec6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eea91906130ce565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401600060405180830381600087803b158015610f3257600080fd5b505af1158015610f46573d6000803e3d6000fd5b50506040516001600160a01b03841692507fa8b21f72cb83bce808df32dc2330217d744a1c22f3e9e44e4b11bbf049d37d9d9150600090a250565b604051632f92cd5d60e11b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635f259aba90602401602060405180830381865afa158015610fe5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110099190613043565b6040518060400160405280600481526020016320a1a61960e11b815250906110445760405162461bcd60e51b81526004016104149190613060565b5061042882826124c1565b604051630e907b1960e21b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690633a41ec6490602401602060405180830381865afa1580156110b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d79190613043565b6040518060400160405280600481526020016341434c3160e01b815250906111125760405162461bcd60e51b81526004016104149190613060565b5061077661284d565b60006127108314156111305750612710610785565b61113c61271084613101565b905060018211156111895760005b611155600184613120565b811015611187576127106111698584613101565b6111739190613137565b91508061117f81613159565b91505061114a565b505b61119561271082613137565b9392505050565b604051632f92cd5d60e11b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635f259aba90602401602060405180830381865afa158015611200573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112249190613043565b6040518060400160405280600481526020016320a1a61960e11b8152509061125f5760405162461bcd60e51b81526004016104149190613060565b50600254604051630f67c5bd60e41b81526001600160a01b038381166004830152600092169063f67c5bd090602401602060405180830381865afa1580156112ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cf91906130b5565b90506000600260009054906101000a90046001600160a01b03166001600160a01b031663e46c95bc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611326573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134a91906130b5565b90508115806113595750816001145b156113775760405163700ca0af60e01b815260040160405180910390fd5b808216156106a5576002546040516351b37a4b60e11b815291831860048301819052916001600160a01b039091169063a366f49690602401600060405180830381600087803b1580156113c957600080fd5b505af11580156113dd573d6000803e3d6000fd5b50506040516001600160a01b03861692507fbeceb48aeaa805aeae57be163cca6249077a18734e408a85aa74e875c43738099150600090a2505050565b604051632f92cd5d60e11b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635f259aba90602401602060405180830381865afa15801561147e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a29190613043565b6040518060400160405280600481526020016320a1a61960e11b815250906114dd5760405162461bcd60e51b81526004016104149190613060565b50600254604051634fafc35760e11b81526001600160a01b03838116600483015290911690639f5f86ae906024015b600060405180830381600087803b15801561152657600080fd5b505af115801561153a573d6000803e3d6000fd5b5050505050565b604051632f92cd5d60e11b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635f259aba90602401602060405180830381865afa1580156115a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c99190613043565b6040518060400160405280600481526020016320a1a61960e11b815250906116045760405162461bcd60e51b81526004016104149190613060565b506118628282600260009054906101000a90046001600160a01b03166001600160a01b0316635e0b63d36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561165d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168191906130b5565b600260009054906101000a90046001600160a01b03166001600160a01b0316633915ffaa6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f891906130b5565b600260009054906101000a90046001600160a01b03166001600160a01b0316638053fcbe6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561174b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176f91906130b5565b600260009054906101000a90046001600160a01b03166001600160a01b03166347dedfc96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e691906130b5565b600260009054906101000a90046001600160a01b03166001600160a01b031663e6dee2cc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611839573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185d91906130b5565b61220f565b60408051838152602081018390527f4d4981437d0211f9e6843eb024d9ada1fa3a99514d4343d4aece106dd11524bb9101610da3565b604051632f92cd5d60e11b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635f259aba90602401602060405180830381865afa1580156118fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119209190613043565b6040518060400160405280600481526020016320a1a61960e11b8152509061195b5760405162461bcd60e51b81526004016104149190613060565b506127108310158061197857506127106119758383613174565b10155b1561199657604051630b361d6960e01b815260040160405180910390fd5b600254604080516305e3b96d60e11b81529051611a8a926001600160a01b031691630bc772da9160048083019260209291908290030181865afa1580156119e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0591906130b5565b600260009054906101000a90046001600160a01b03166001600160a01b031663621869056040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7c91906130b5565b858561176f86612710613120565b60408051848152602081018490529081018290527fcf8a1e1d5f09cf3c97dbb653cd9a4d7aace9292fbc1bb8211febf2d400febbdd9060600160405180910390a1505050565b604051632f92cd5d60e11b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635f259aba90602401602060405180830381865afa158015611b34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b589190613043565b6040518060400160405280600481526020016320a1a61960e11b81525090611b935760405162461bcd60e51b81526004016104149190613060565b5060015460405163cf64ffdf60e01b815282151560048201526001600160a01b039091169063cf64ffdf9060240161150c565b604051632f92cd5d60e11b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635f259aba90602401602060405180830381865afa158015611c2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4e9190613043565b6040518060400160405280600481526020016320a1a61960e11b81525090611c895760405162461bcd60e51b81526004016104149190613060565b50611c93816128c8565b50565b604051632f92cd5d60e11b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635f259aba90602401602060405180830381865afa158015611cfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d1e9190613043565b6040518060400160405280600481526020016320a1a61960e11b81525090611d595760405162461bcd60e51b81526004016104149190613060565b5060008060019054906101000a90046001600160a01b03166001600160a01b031663fca513a86040518163ffffffff1660e01b8152600401602060405180830381865afa158015611dae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd291906130ce565b60025460408051632f7a188160e01b815290519293506001600160a01b03909116916311ca4fc2918391632f7a1881916004808201926020929091908290030181865afa158015611e27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4b91906130ce565b6040516001600160e01b031960e084901b1681526001600160a01b0391821660048201529084166024820152604401600060405180830381600087803b158015611e9457600080fd5b505af1158015611ea8573d6000803e3d6000fd5b50506040516001600160a01b03841692507f3f82447be465b0b5a4a9e54c74d5f6ae73f2e9537f2cc1590a340524703d09619150600090a250565b604051632f92cd5d60e11b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635f259aba90602401602060405180830381865afa158015611f47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6b9190613043565b6040518060400160405280600481526020016320a1a61960e11b81525090611fa65760405162461bcd60e51b81526004016104149190613060565b506001546040516001622646f960e01b0319815282151560048201526001600160a01b039091169063ffd9b9079060240161150c565b6003546001600160a01b038381169116141561200b57604051633b899cf960e01b815260040160405180910390fd5b8015806120865750600254600354604051630f064e8760e31b81526001600160a01b039182166004820152911690637832743890602401602060405180830381865afa15801561205f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061208391906130b5565b81115b156120a4576040516333c6608d60e01b815260040160405180910390fd5b600254604051630e30428d60e01b81526001600160a01b0384811660048301526024820184905290911690630e30428d90604401600060405180830381600087803b1580156120f257600080fd5b505af1158015612106573d6000803e3d6000fd5b50505050816001600160a01b03167fd5e67007f7834ddcc2f493b83810f7c6ab74e1bba7b88847f6d4adf9e03fbe828260405161214591815260200190565b60405180910390a25050565b60005460ff1661219a5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610414565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60006111958383612b0a565b6000610785825490565b6000611195836001600160a01b038416612b34565b600061221b8585613120565b600254600354604051630f064e8760e31b81526001600160a01b0391821660048201529293501690637832743890602401602060405180830381865afa158015612269573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061228d91906130b5565b811461229c5761229c81612c27565b600254604080516347dedfc960e01b815290516000926001600160a01b0316916347dedfc99160048083019260209291908290030181865afa1580156122e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230a91906130b5565b90506000600260009054906101000a90046001600160a01b03166001600160a01b031663e6dee2cc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612361573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061238591906130b5565b90506000600260009054906101000a90046001600160a01b03166001600160a01b0316633915ffaa6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156123dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061240091906130b5565b905082861415806124115750818514155b8061241c5750808814155b1561242c5761242c86868a612e6c565b60025460405163670e22ab60e11b8152600481018d9052602481018c9052604481018b9052606481018a90526084810189905260a4810188905260c481018790526001600160a01b039091169063ce1c45569060e401600060405180830381600087803b15801561249c57600080fd5b505af11580156124b0573d6000803e3d6000fd5b505050505050505050505050505050565b6001600160a01b03821615806124de57506001600160a01b038116155b156124fc57604051635919af9760e11b815260040160405180910390fd5b6002546001600160a01b038381169116148061252557506001546001600160a01b038381169116145b8061253d57506002546001600160a01b038281169116145b8061255557506001546001600160a01b038281169116145b156125735760405163393ef2e360e11b815260040160405180910390fd5b600254604051600162978abd60e01b031981526001600160a01b038381166004830152600092169063ff68754390602401602060405180830381865afa1580156125c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e591906130ce565b6001600160a01b0316141580612671575060015460405163fdd5764560e01b81526001600160a01b038481166004830152600092169063fdd5764590602401602060405180830381865afa158015612641573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061266591906130ce565b6001600160a01b031614155b1561268f576040516321ff1e7160e01b815260040160405180910390fd5b60025460408051630304b08760e61b815290516001600160a01b039283169284169163c12c21c09160048083019260209291908290030181865afa1580156126db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126ff91906130ce565b6001600160a01b03161461272657604051630f0170bf60e01b815260040160405180910390fd5b600154604051631450a27960e11b81526001600160a01b0383811660048301528481166024830152909116906328a144f290604401600060405180830381600087803b15801561277557600080fd5b505af1158015612789573d6000803e3d6000fd5b5050600254604051631ba6397960e21b81526001600160a01b03858116600483015286811660248301529091169250636e98e5e49150604401600060405180830381600087803b1580156127dc57600080fd5b505af11580156127f0573d6000803e3d6000fd5b50505050612808826004612ead90919063ffffffff16565b50806001600160a01b0316826001600160a01b03167f4bcbefaef68b99503d502f5a6abe7bca2b183ab8ac55457013c77d084ebd130560405160405180910390a35050565b60005460ff16156128935760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610414565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586121c73390565b6001600160a01b0381166128ef57604051635919af9760e11b815260040160405180910390fd5b6040516370a0823160e01b81523060048201526001600160a01b038216906370a0823190602401602060405180830381865afa92505050801561294f575060408051601f3d908101601f1916820190925261294c918101906130b5565b60015b61296c5760405163528ca31d60e01b815260040160405180910390fd5b50600260009054906101000a90046001600160a01b03166001600160a01b0316632630c12f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156129c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129e491906130ce565b604051630f9a650360e41b8152670de0b6b3a764000060048201526001600160a01b038381166024830152919091169063f9a6503090604401602060405180830381865afa925050508015612a56575060408051601f3d908101601f19168201909252612a53918101906130b5565b60015b612a73576040516367a7cd4360e01b815260040160405180910390fd5b5060025460405163d48bfca760e01b81526001600160a01b0383811660048301529091169063d48bfca790602401600060405180830381600087803b158015612abb57600080fd5b505af1158015612acf573d6000803e3d6000fd5b50506040516001600160a01b03841692507fbeceb48aeaa805aeae57be163cca6249077a18734e408a85aa74e875c43738099150600090a250565b6000826000018281548110612b2157612b2161318c565b9060005260206000200154905092915050565b60008181526001830160205260408120548015612c1d576000612b58600183613120565b8554909150600090612b6c90600190613120565b9050818114612bd1576000866000018281548110612b8c57612b8c61318c565b9060005260206000200154905080876000018481548110612baf57612baf61318c565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612be257612be26131a2565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610785565b6000915050610785565b600254600354604051630e30428d60e01b81526001600160a01b03918216600482015260248101849052911690630e30428d90604401600060405180830381600087803b158015612c7757600080fd5b505af1158015612c8b573d6000803e3d6000fd5b505050506000600260009054906101000a90046001600160a01b03166001600160a01b03166320a05ff76040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ce4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d0891906130b5565b905060015b818110156106a557600254604051632f2f971360e11b8152600481018390526000916001600160a01b031690635e5f2e2690602401602060405180830381865afa158015612d5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d8391906130ce565b600254604051630f064e8760e31b81526001600160a01b038084166004830152929350869290911690637832743890602401602060405180830381865afa158015612dd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612df691906130b5565b1115612e6357600254604051630e30428d60e01b81526001600160a01b0383811660048301526024820187905290911690630e30428d90604401600060405180830381600087803b158015612e4a57600080fd5b505af1158015612e5e573d6000803e3d6000fd5b505050505b50600101612d0d565b6000612e78848461111b565b612e8490612710613120565b905081811115612ea757604051631e62754760e21b815260040160405180910390fd5b50505050565b6000611195836001600160a01b0384166000612edc838360009081526001919091016020526040902054151590565b612f1257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610785565b506000610785565b6001600160a01b0381168114611c9357600080fd5b60008060408385031215612f4257600080fd5b8235612f4d81612f1a565b946020939093013593505050565b600060208284031215612f6d57600080fd5b813561119581612f1a565b600060208284031215612f8a57600080fd5b5035919050565b60008060408385031215612fa457600080fd5b50508035926020909101359150565b60008060408385031215612fc657600080fd5b8235612fd181612f1a565b91506020830135612fe181612f1a565b809150509250929050565b60008060006060848603121561300157600080fd5b505081359360208301359350604090920135919050565b8015158114611c9357600080fd5b60006020828403121561303857600080fd5b813561119581613018565b60006020828403121561305557600080fd5b815161119581613018565b600060208083528351808285015260005b8181101561308d57858101830151858201604001528201613071565b8181111561309f576000604083870101525b50601f01601f1916929092016040019392505050565b6000602082840312156130c757600080fd5b5051919050565b6000602082840312156130e057600080fd5b815161119581612f1a565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561311b5761311b6130eb565b500290565b600082821015613132576131326130eb565b500390565b60008261315457634e487b7160e01b600052601260045260246000fd5b500490565b600060001982141561316d5761316d6130eb565b5060010190565b60008219821115613187576131876130eb565b500190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fdfea26469706673582212208dc68a6cee6d75377eb501d54fdba8c7669a723015b58c8fcf73da9be350f45664736f6c634300080a0033" . parse () . expect ("invalid bytecode")
        });
    #[derive(Clone)]
    pub struct CreditConfigurator<M>(ethers::contract::Contract<M>);
    impl<M> std::ops::Deref for CreditConfigurator<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for CreditConfigurator<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(CreditConfigurator))
                .field(&self.address())
                .finish()
        }
    }
    impl<'a, M: ethers::providers::Middleware> CreditConfigurator<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), CREDITCONFIGURATOR_ABI.clone(), client)
                .into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                CREDITCONFIGURATOR_ABI.clone(),
                CREDITCONFIGURATOR_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `addTokenToAllowedList` (0xdadfb98b) function"]
        pub fn add_token_to_allowed_list(
            &self,
            token: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([218, 223, 185, 139], token)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `addressProvider` (0x2954018c) function"]
        pub fn address_provider(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([41, 84, 1, 140], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `allowContract` (0x7bccacee) function"]
        pub fn allow_contract(
            &self,
            target_contract: ethers::core::types::Address,
            adapter: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([123, 204, 172, 238], (target_contract, adapter))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `allowToken` (0xb53472ef) function"]
        pub fn allow_token(
            &self,
            token: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([181, 52, 114, 239], token)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `allowedContracts` (0x5094cb4f) function"]
        pub fn allowed_contracts(
            &self,
            i: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([80, 148, 203, 79], i)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `allowedContractsCount` (0x50e036ff) function"]
        pub fn allowed_contracts_count(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([80, 224, 54, 255], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `calcMaxPossibleDrop` (0xb3c61943) function"]
        pub fn calc_max_possible_drop(
            &self,
            percentage: ethers::core::types::U256,
            times: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([179, 198, 25, 67], (percentage, times))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `creditFacade` (0x2f7a1881) function"]
        pub fn credit_facade(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([47, 122, 24, 129], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `creditManager` (0xc12c21c0) function"]
        pub fn credit_manager(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([193, 44, 33, 192], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `forbidContract` (0x52438e54) function"]
        pub fn forbid_contract(
            &self,
            target_contract: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([82, 67, 142, 84], target_contract)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `forbidToken` (0x24147708) function"]
        pub fn forbid_token(
            &self,
            token: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([36, 20, 119, 8], token)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `pause` (0x8456cb59) function"]
        pub fn pause(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([132, 86, 203, 89], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `paused` (0x5c975abb) function"]
        pub fn paused(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([92, 151, 90, 187], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setDegenMode` (0xcf64ffdf) function"]
        pub fn set_degen_mode(
            &self,
            mode: bool,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([207, 100, 255, 223], mode)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setFastCheckParameters` (0x62061c6d) function"]
        pub fn set_fast_check_parameters(
            &self,
            chi_threshold: ethers::core::types::U256,
            hf_check_interval: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([98, 6, 28, 109], (chi_threshold, hf_check_interval))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setFees` (0xcec10c11) function"]
        pub fn set_fees(
            &self,
            fee_interest: ethers::core::types::U256,
            fee_liquidation: ethers::core::types::U256,
            liquidation_premium: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [206, 193, 12, 17],
                    (fee_interest, fee_liquidation, liquidation_premium),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setIncreaseDebtForbidden` (0xffd9b907) function"]
        pub fn set_increase_debt_forbidden(
            &self,
            mode: bool,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([255, 217, 185, 7], mode)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setLimits` (0xc4590d3f) function"]
        pub fn set_limits(
            &self,
            min_borrowed_amount: ethers::core::types::U256,
            max_borrowed_amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [196, 89, 13, 63],
                    (min_borrowed_amount, max_borrowed_amount),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setLiquidationThreshold` (0x0e30428d) function"]
        pub fn set_liquidation_threshold(
            &self,
            token: ethers::core::types::Address,
            liquidation_threshold: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([14, 48, 66, 141], (token, liquidation_threshold))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `underlying` (0x6f307dc3) function"]
        pub fn underlying(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([111, 48, 125, 195], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `unpause` (0x3f4ba83a) function"]
        pub fn unpause(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([63, 75, 168, 58], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `upgradeConfigurator` (0xbbbae6ab) function"]
        pub fn upgrade_configurator(
            &self,
            credit_configurator: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([187, 186, 230, 171], credit_configurator)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `upgradeCreditFacade` (0x693ce7f5) function"]
        pub fn upgrade_credit_facade(
            &self,
            credit_facade: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([105, 60, 231, 245], credit_facade)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `upgradePriceOracle` (0xf0527ac6) function"]
        pub fn upgrade_price_oracle(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([240, 82, 122, 198], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `version` (0x54fd4d50) function"]
        pub fn version(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([84, 253, 77, 80], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `ContractAllowed` event"]
        pub fn contract_allowed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, ContractAllowedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `ContractForbidden` event"]
        pub fn contract_forbidden_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, ContractForbiddenFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `CreditConfiguratorUpgraded` event"]
        pub fn credit_configurator_upgraded_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, CreditConfiguratorUpgradedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `CreditFacadeUpgraded` event"]
        pub fn credit_facade_upgraded_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, CreditFacadeUpgradedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `FastCheckParametersUpdated` event"]
        pub fn fast_check_parameters_updated_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, FastCheckParametersUpdatedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `FeesUpdated` event"]
        pub fn fees_updated_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, FeesUpdatedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `LimitsUpdated` event"]
        pub fn limits_updated_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LimitsUpdatedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `Paused` event"]
        pub fn paused_filter(&self) -> ethers::contract::builders::Event<M, PausedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `PriceOracleUpgraded` event"]
        pub fn price_oracle_upgraded_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, PriceOracleUpgradedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TokenAllowed` event"]
        pub fn token_allowed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TokenAllowedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TokenForbidden` event"]
        pub fn token_forbidden_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TokenForbiddenFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TokenLiquidationThresholdUpdated` event"]
        pub fn token_liquidation_threshold_updated_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TokenLiquidationThresholdUpdatedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `Unpaused` event"]
        pub fn unpaused_filter(&self) -> ethers::contract::builders::Event<M, UnpausedFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, CreditConfiguratorEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>>
        for CreditConfigurator<M>
    {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "ContractAllowed", abi = "ContractAllowed(address,address)")]
    pub struct ContractAllowedFilter {
        #[ethevent(indexed)]
        pub protocol: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub adapter: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "ContractForbidden", abi = "ContractForbidden(address)")]
    pub struct ContractForbiddenFilter {
        #[ethevent(indexed)]
        pub protocol: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "CreditConfiguratorUpgraded",
        abi = "CreditConfiguratorUpgraded(address)"
    )]
    pub struct CreditConfiguratorUpgradedFilter {
        #[ethevent(indexed)]
        pub new_credit_configurator: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "CreditFacadeUpgraded", abi = "CreditFacadeUpgraded(address)")]
    pub struct CreditFacadeUpgradedFilter {
        #[ethevent(indexed)]
        pub new_credit_facade: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "FastCheckParametersUpdated",
        abi = "FastCheckParametersUpdated(uint256,uint256)"
    )]
    pub struct FastCheckParametersUpdatedFilter {
        pub chi_threshold: ethers::core::types::U256,
        pub fast_check_delay: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "FeesUpdated", abi = "FeesUpdated(uint256,uint256,uint256)")]
    pub struct FeesUpdatedFilter {
        pub fee_interest: ethers::core::types::U256,
        pub fee_liquidation: ethers::core::types::U256,
        pub liquidation_premium: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "LimitsUpdated", abi = "LimitsUpdated(uint256,uint256)")]
    pub struct LimitsUpdatedFilter {
        pub min_borrowed_amount: ethers::core::types::U256,
        pub max_borrowed_amount: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "Paused", abi = "Paused(address)")]
    pub struct PausedFilter {
        pub account: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "PriceOracleUpgraded", abi = "PriceOracleUpgraded(address)")]
    pub struct PriceOracleUpgradedFilter {
        #[ethevent(indexed)]
        pub new_price_oracle: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "TokenAllowed", abi = "TokenAllowed(address)")]
    pub struct TokenAllowedFilter {
        #[ethevent(indexed)]
        pub token: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "TokenForbidden", abi = "TokenForbidden(address)")]
    pub struct TokenForbiddenFilter {
        #[ethevent(indexed)]
        pub token: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "TokenLiquidationThresholdUpdated",
        abi = "TokenLiquidationThresholdUpdated(address,uint256)"
    )]
    pub struct TokenLiquidationThresholdUpdatedFilter {
        #[ethevent(indexed)]
        pub token: ethers::core::types::Address,
        pub liquidity_threshold: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "Unpaused", abi = "Unpaused(address)")]
    pub struct UnpausedFilter {
        pub account: ethers::core::types::Address,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum CreditConfiguratorEvents {
        ContractAllowedFilter(ContractAllowedFilter),
        ContractForbiddenFilter(ContractForbiddenFilter),
        CreditConfiguratorUpgradedFilter(CreditConfiguratorUpgradedFilter),
        CreditFacadeUpgradedFilter(CreditFacadeUpgradedFilter),
        FastCheckParametersUpdatedFilter(FastCheckParametersUpdatedFilter),
        FeesUpdatedFilter(FeesUpdatedFilter),
        LimitsUpdatedFilter(LimitsUpdatedFilter),
        PausedFilter(PausedFilter),
        PriceOracleUpgradedFilter(PriceOracleUpgradedFilter),
        TokenAllowedFilter(TokenAllowedFilter),
        TokenForbiddenFilter(TokenForbiddenFilter),
        TokenLiquidationThresholdUpdatedFilter(TokenLiquidationThresholdUpdatedFilter),
        UnpausedFilter(UnpausedFilter),
    }
    impl ethers::contract::EthLogDecode for CreditConfiguratorEvents {
        fn decode_log(log: &ethers::core::abi::RawLog) -> Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = ContractAllowedFilter::decode_log(log) {
                return Ok(CreditConfiguratorEvents::ContractAllowedFilter(decoded));
            }
            if let Ok(decoded) = ContractForbiddenFilter::decode_log(log) {
                return Ok(CreditConfiguratorEvents::ContractForbiddenFilter(decoded));
            }
            if let Ok(decoded) = CreditConfiguratorUpgradedFilter::decode_log(log) {
                return Ok(CreditConfiguratorEvents::CreditConfiguratorUpgradedFilter(
                    decoded,
                ));
            }
            if let Ok(decoded) = CreditFacadeUpgradedFilter::decode_log(log) {
                return Ok(CreditConfiguratorEvents::CreditFacadeUpgradedFilter(
                    decoded,
                ));
            }
            if let Ok(decoded) = FastCheckParametersUpdatedFilter::decode_log(log) {
                return Ok(CreditConfiguratorEvents::FastCheckParametersUpdatedFilter(
                    decoded,
                ));
            }
            if let Ok(decoded) = FeesUpdatedFilter::decode_log(log) {
                return Ok(CreditConfiguratorEvents::FeesUpdatedFilter(decoded));
            }
            if let Ok(decoded) = LimitsUpdatedFilter::decode_log(log) {
                return Ok(CreditConfiguratorEvents::LimitsUpdatedFilter(decoded));
            }
            if let Ok(decoded) = PausedFilter::decode_log(log) {
                return Ok(CreditConfiguratorEvents::PausedFilter(decoded));
            }
            if let Ok(decoded) = PriceOracleUpgradedFilter::decode_log(log) {
                return Ok(CreditConfiguratorEvents::PriceOracleUpgradedFilter(decoded));
            }
            if let Ok(decoded) = TokenAllowedFilter::decode_log(log) {
                return Ok(CreditConfiguratorEvents::TokenAllowedFilter(decoded));
            }
            if let Ok(decoded) = TokenForbiddenFilter::decode_log(log) {
                return Ok(CreditConfiguratorEvents::TokenForbiddenFilter(decoded));
            }
            if let Ok(decoded) = TokenLiquidationThresholdUpdatedFilter::decode_log(log) {
                return Ok(
                    CreditConfiguratorEvents::TokenLiquidationThresholdUpdatedFilter(decoded),
                );
            }
            if let Ok(decoded) = UnpausedFilter::decode_log(log) {
                return Ok(CreditConfiguratorEvents::UnpausedFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for CreditConfiguratorEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                CreditConfiguratorEvents::ContractAllowedFilter(element) => element.fmt(f),
                CreditConfiguratorEvents::ContractForbiddenFilter(element) => element.fmt(f),
                CreditConfiguratorEvents::CreditConfiguratorUpgradedFilter(element) => {
                    element.fmt(f)
                }
                CreditConfiguratorEvents::CreditFacadeUpgradedFilter(element) => element.fmt(f),
                CreditConfiguratorEvents::FastCheckParametersUpdatedFilter(element) => {
                    element.fmt(f)
                }
                CreditConfiguratorEvents::FeesUpdatedFilter(element) => element.fmt(f),
                CreditConfiguratorEvents::LimitsUpdatedFilter(element) => element.fmt(f),
                CreditConfiguratorEvents::PausedFilter(element) => element.fmt(f),
                CreditConfiguratorEvents::PriceOracleUpgradedFilter(element) => element.fmt(f),
                CreditConfiguratorEvents::TokenAllowedFilter(element) => element.fmt(f),
                CreditConfiguratorEvents::TokenForbiddenFilter(element) => element.fmt(f),
                CreditConfiguratorEvents::TokenLiquidationThresholdUpdatedFilter(element) => {
                    element.fmt(f)
                }
                CreditConfiguratorEvents::UnpausedFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `addTokenToAllowedList`function with signature `addTokenToAllowedList(address)` and selector `[218, 223, 185, 139]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "addTokenToAllowedList", abi = "addTokenToAllowedList(address)")]
    pub struct AddTokenToAllowedListCall {
        pub token: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `addressProvider`function with signature `addressProvider()` and selector `[41, 84, 1, 140]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "addressProvider", abi = "addressProvider()")]
    pub struct AddressProviderCall;
    #[doc = "Container type for all input parameters for the `allowContract`function with signature `allowContract(address,address)` and selector `[123, 204, 172, 238]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "allowContract", abi = "allowContract(address,address)")]
    pub struct AllowContractCall {
        pub target_contract: ethers::core::types::Address,
        pub adapter: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `allowToken`function with signature `allowToken(address)` and selector `[181, 52, 114, 239]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "allowToken", abi = "allowToken(address)")]
    pub struct AllowTokenCall {
        pub token: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `allowedContracts`function with signature `allowedContracts(uint256)` and selector `[80, 148, 203, 79]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "allowedContracts", abi = "allowedContracts(uint256)")]
    pub struct AllowedContractsCall {
        pub i: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `allowedContractsCount`function with signature `allowedContractsCount()` and selector `[80, 224, 54, 255]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "allowedContractsCount", abi = "allowedContractsCount()")]
    pub struct AllowedContractsCountCall;
    #[doc = "Container type for all input parameters for the `calcMaxPossibleDrop`function with signature `calcMaxPossibleDrop(uint256,uint256)` and selector `[179, 198, 25, 67]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "calcMaxPossibleDrop",
        abi = "calcMaxPossibleDrop(uint256,uint256)"
    )]
    pub struct CalcMaxPossibleDropCall {
        pub percentage: ethers::core::types::U256,
        pub times: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `creditFacade`function with signature `creditFacade()` and selector `[47, 122, 24, 129]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "creditFacade", abi = "creditFacade()")]
    pub struct CreditFacadeCall;
    #[doc = "Container type for all input parameters for the `creditManager`function with signature `creditManager()` and selector `[193, 44, 33, 192]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "creditManager", abi = "creditManager()")]
    pub struct CreditManagerCall;
    #[doc = "Container type for all input parameters for the `forbidContract`function with signature `forbidContract(address)` and selector `[82, 67, 142, 84]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "forbidContract", abi = "forbidContract(address)")]
    pub struct ForbidContractCall {
        pub target_contract: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `forbidToken`function with signature `forbidToken(address)` and selector `[36, 20, 119, 8]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "forbidToken", abi = "forbidToken(address)")]
    pub struct ForbidTokenCall {
        pub token: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `pause`function with signature `pause()` and selector `[132, 86, 203, 89]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "pause", abi = "pause()")]
    pub struct PauseCall;
    #[doc = "Container type for all input parameters for the `paused`function with signature `paused()` and selector `[92, 151, 90, 187]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "paused", abi = "paused()")]
    pub struct PausedCall;
    #[doc = "Container type for all input parameters for the `setDegenMode`function with signature `setDegenMode(bool)` and selector `[207, 100, 255, 223]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "setDegenMode", abi = "setDegenMode(bool)")]
    pub struct SetDegenModeCall {
        pub mode: bool,
    }
    #[doc = "Container type for all input parameters for the `setFastCheckParameters`function with signature `setFastCheckParameters(uint256,uint256)` and selector `[98, 6, 28, 109]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "setFastCheckParameters",
        abi = "setFastCheckParameters(uint256,uint256)"
    )]
    pub struct SetFastCheckParametersCall {
        pub chi_threshold: ethers::core::types::U256,
        pub hf_check_interval: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `setFees`function with signature `setFees(uint256,uint256,uint256)` and selector `[206, 193, 12, 17]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "setFees", abi = "setFees(uint256,uint256,uint256)")]
    pub struct SetFeesCall {
        pub fee_interest: ethers::core::types::U256,
        pub fee_liquidation: ethers::core::types::U256,
        pub liquidation_premium: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `setIncreaseDebtForbidden`function with signature `setIncreaseDebtForbidden(bool)` and selector `[255, 217, 185, 7]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "setIncreaseDebtForbidden",
        abi = "setIncreaseDebtForbidden(bool)"
    )]
    pub struct SetIncreaseDebtForbiddenCall {
        pub mode: bool,
    }
    #[doc = "Container type for all input parameters for the `setLimits`function with signature `setLimits(uint256,uint256)` and selector `[196, 89, 13, 63]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "setLimits", abi = "setLimits(uint256,uint256)")]
    pub struct SetLimitsCall {
        pub min_borrowed_amount: ethers::core::types::U256,
        pub max_borrowed_amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `setLiquidationThreshold`function with signature `setLiquidationThreshold(address,uint256)` and selector `[14, 48, 66, 141]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "setLiquidationThreshold",
        abi = "setLiquidationThreshold(address,uint256)"
    )]
    pub struct SetLiquidationThresholdCall {
        pub token: ethers::core::types::Address,
        pub liquidation_threshold: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `underlying`function with signature `underlying()` and selector `[111, 48, 125, 195]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "underlying", abi = "underlying()")]
    pub struct UnderlyingCall;
    #[doc = "Container type for all input parameters for the `unpause`function with signature `unpause()` and selector `[63, 75, 168, 58]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "unpause", abi = "unpause()")]
    pub struct UnpauseCall;
    #[doc = "Container type for all input parameters for the `upgradeConfigurator`function with signature `upgradeConfigurator(address)` and selector `[187, 186, 230, 171]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "upgradeConfigurator", abi = "upgradeConfigurator(address)")]
    pub struct UpgradeConfiguratorCall {
        pub credit_configurator: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `upgradeCreditFacade`function with signature `upgradeCreditFacade(address)` and selector `[105, 60, 231, 245]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "upgradeCreditFacade", abi = "upgradeCreditFacade(address)")]
    pub struct UpgradeCreditFacadeCall {
        pub credit_facade: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `upgradePriceOracle`function with signature `upgradePriceOracle()` and selector `[240, 82, 122, 198]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "upgradePriceOracle", abi = "upgradePriceOracle()")]
    pub struct UpgradePriceOracleCall;
    #[doc = "Container type for all input parameters for the `version`function with signature `version()` and selector `[84, 253, 77, 80]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "version", abi = "version()")]
    pub struct VersionCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum CreditConfiguratorCalls {
        AddTokenToAllowedList(AddTokenToAllowedListCall),
        AddressProvider(AddressProviderCall),
        AllowContract(AllowContractCall),
        AllowToken(AllowTokenCall),
        AllowedContracts(AllowedContractsCall),
        AllowedContractsCount(AllowedContractsCountCall),
        CalcMaxPossibleDrop(CalcMaxPossibleDropCall),
        CreditFacade(CreditFacadeCall),
        CreditManager(CreditManagerCall),
        ForbidContract(ForbidContractCall),
        ForbidToken(ForbidTokenCall),
        Pause(PauseCall),
        Paused(PausedCall),
        SetDegenMode(SetDegenModeCall),
        SetFastCheckParameters(SetFastCheckParametersCall),
        SetFees(SetFeesCall),
        SetIncreaseDebtForbidden(SetIncreaseDebtForbiddenCall),
        SetLimits(SetLimitsCall),
        SetLiquidationThreshold(SetLiquidationThresholdCall),
        Underlying(UnderlyingCall),
        Unpause(UnpauseCall),
        UpgradeConfigurator(UpgradeConfiguratorCall),
        UpgradeCreditFacade(UpgradeCreditFacadeCall),
        UpgradePriceOracle(UpgradePriceOracleCall),
        Version(VersionCall),
    }
    impl ethers::core::abi::AbiDecode for CreditConfiguratorCalls {
        fn decode(data: impl AsRef<[u8]>) -> Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <AddTokenToAllowedListCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditConfiguratorCalls::AddTokenToAllowedList(decoded));
            }
            if let Ok(decoded) =
                <AddressProviderCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditConfiguratorCalls::AddressProvider(decoded));
            }
            if let Ok(decoded) =
                <AllowContractCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditConfiguratorCalls::AllowContract(decoded));
            }
            if let Ok(decoded) =
                <AllowTokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditConfiguratorCalls::AllowToken(decoded));
            }
            if let Ok(decoded) =
                <AllowedContractsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditConfiguratorCalls::AllowedContracts(decoded));
            }
            if let Ok(decoded) =
                <AllowedContractsCountCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditConfiguratorCalls::AllowedContractsCount(decoded));
            }
            if let Ok(decoded) =
                <CalcMaxPossibleDropCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditConfiguratorCalls::CalcMaxPossibleDrop(decoded));
            }
            if let Ok(decoded) =
                <CreditFacadeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditConfiguratorCalls::CreditFacade(decoded));
            }
            if let Ok(decoded) =
                <CreditManagerCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditConfiguratorCalls::CreditManager(decoded));
            }
            if let Ok(decoded) =
                <ForbidContractCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditConfiguratorCalls::ForbidContract(decoded));
            }
            if let Ok(decoded) =
                <ForbidTokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditConfiguratorCalls::ForbidToken(decoded));
            }
            if let Ok(decoded) = <PauseCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditConfiguratorCalls::Pause(decoded));
            }
            if let Ok(decoded) = <PausedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditConfiguratorCalls::Paused(decoded));
            }
            if let Ok(decoded) =
                <SetDegenModeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditConfiguratorCalls::SetDegenMode(decoded));
            }
            if let Ok(decoded) =
                <SetFastCheckParametersCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditConfiguratorCalls::SetFastCheckParameters(decoded));
            }
            if let Ok(decoded) =
                <SetFeesCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditConfiguratorCalls::SetFees(decoded));
            }
            if let Ok(decoded) =
                <SetIncreaseDebtForbiddenCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CreditConfiguratorCalls::SetIncreaseDebtForbidden(decoded));
            }
            if let Ok(decoded) =
                <SetLimitsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditConfiguratorCalls::SetLimits(decoded));
            }
            if let Ok(decoded) =
                <SetLiquidationThresholdCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditConfiguratorCalls::SetLiquidationThreshold(decoded));
            }
            if let Ok(decoded) =
                <UnderlyingCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditConfiguratorCalls::Underlying(decoded));
            }
            if let Ok(decoded) =
                <UnpauseCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditConfiguratorCalls::Unpause(decoded));
            }
            if let Ok(decoded) =
                <UpgradeConfiguratorCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditConfiguratorCalls::UpgradeConfigurator(decoded));
            }
            if let Ok(decoded) =
                <UpgradeCreditFacadeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditConfiguratorCalls::UpgradeCreditFacade(decoded));
            }
            if let Ok(decoded) =
                <UpgradePriceOracleCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditConfiguratorCalls::UpgradePriceOracle(decoded));
            }
            if let Ok(decoded) =
                <VersionCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditConfiguratorCalls::Version(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for CreditConfiguratorCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                CreditConfiguratorCalls::AddTokenToAllowedList(element) => element.encode(),
                CreditConfiguratorCalls::AddressProvider(element) => element.encode(),
                CreditConfiguratorCalls::AllowContract(element) => element.encode(),
                CreditConfiguratorCalls::AllowToken(element) => element.encode(),
                CreditConfiguratorCalls::AllowedContracts(element) => element.encode(),
                CreditConfiguratorCalls::AllowedContractsCount(element) => element.encode(),
                CreditConfiguratorCalls::CalcMaxPossibleDrop(element) => element.encode(),
                CreditConfiguratorCalls::CreditFacade(element) => element.encode(),
                CreditConfiguratorCalls::CreditManager(element) => element.encode(),
                CreditConfiguratorCalls::ForbidContract(element) => element.encode(),
                CreditConfiguratorCalls::ForbidToken(element) => element.encode(),
                CreditConfiguratorCalls::Pause(element) => element.encode(),
                CreditConfiguratorCalls::Paused(element) => element.encode(),
                CreditConfiguratorCalls::SetDegenMode(element) => element.encode(),
                CreditConfiguratorCalls::SetFastCheckParameters(element) => element.encode(),
                CreditConfiguratorCalls::SetFees(element) => element.encode(),
                CreditConfiguratorCalls::SetIncreaseDebtForbidden(element) => element.encode(),
                CreditConfiguratorCalls::SetLimits(element) => element.encode(),
                CreditConfiguratorCalls::SetLiquidationThreshold(element) => element.encode(),
                CreditConfiguratorCalls::Underlying(element) => element.encode(),
                CreditConfiguratorCalls::Unpause(element) => element.encode(),
                CreditConfiguratorCalls::UpgradeConfigurator(element) => element.encode(),
                CreditConfiguratorCalls::UpgradeCreditFacade(element) => element.encode(),
                CreditConfiguratorCalls::UpgradePriceOracle(element) => element.encode(),
                CreditConfiguratorCalls::Version(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for CreditConfiguratorCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                CreditConfiguratorCalls::AddTokenToAllowedList(element) => element.fmt(f),
                CreditConfiguratorCalls::AddressProvider(element) => element.fmt(f),
                CreditConfiguratorCalls::AllowContract(element) => element.fmt(f),
                CreditConfiguratorCalls::AllowToken(element) => element.fmt(f),
                CreditConfiguratorCalls::AllowedContracts(element) => element.fmt(f),
                CreditConfiguratorCalls::AllowedContractsCount(element) => element.fmt(f),
                CreditConfiguratorCalls::CalcMaxPossibleDrop(element) => element.fmt(f),
                CreditConfiguratorCalls::CreditFacade(element) => element.fmt(f),
                CreditConfiguratorCalls::CreditManager(element) => element.fmt(f),
                CreditConfiguratorCalls::ForbidContract(element) => element.fmt(f),
                CreditConfiguratorCalls::ForbidToken(element) => element.fmt(f),
                CreditConfiguratorCalls::Pause(element) => element.fmt(f),
                CreditConfiguratorCalls::Paused(element) => element.fmt(f),
                CreditConfiguratorCalls::SetDegenMode(element) => element.fmt(f),
                CreditConfiguratorCalls::SetFastCheckParameters(element) => element.fmt(f),
                CreditConfiguratorCalls::SetFees(element) => element.fmt(f),
                CreditConfiguratorCalls::SetIncreaseDebtForbidden(element) => element.fmt(f),
                CreditConfiguratorCalls::SetLimits(element) => element.fmt(f),
                CreditConfiguratorCalls::SetLiquidationThreshold(element) => element.fmt(f),
                CreditConfiguratorCalls::Underlying(element) => element.fmt(f),
                CreditConfiguratorCalls::Unpause(element) => element.fmt(f),
                CreditConfiguratorCalls::UpgradeConfigurator(element) => element.fmt(f),
                CreditConfiguratorCalls::UpgradeCreditFacade(element) => element.fmt(f),
                CreditConfiguratorCalls::UpgradePriceOracle(element) => element.fmt(f),
                CreditConfiguratorCalls::Version(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<AddTokenToAllowedListCall> for CreditConfiguratorCalls {
        fn from(var: AddTokenToAllowedListCall) -> Self {
            CreditConfiguratorCalls::AddTokenToAllowedList(var)
        }
    }
    impl ::std::convert::From<AddressProviderCall> for CreditConfiguratorCalls {
        fn from(var: AddressProviderCall) -> Self {
            CreditConfiguratorCalls::AddressProvider(var)
        }
    }
    impl ::std::convert::From<AllowContractCall> for CreditConfiguratorCalls {
        fn from(var: AllowContractCall) -> Self {
            CreditConfiguratorCalls::AllowContract(var)
        }
    }
    impl ::std::convert::From<AllowTokenCall> for CreditConfiguratorCalls {
        fn from(var: AllowTokenCall) -> Self {
            CreditConfiguratorCalls::AllowToken(var)
        }
    }
    impl ::std::convert::From<AllowedContractsCall> for CreditConfiguratorCalls {
        fn from(var: AllowedContractsCall) -> Self {
            CreditConfiguratorCalls::AllowedContracts(var)
        }
    }
    impl ::std::convert::From<AllowedContractsCountCall> for CreditConfiguratorCalls {
        fn from(var: AllowedContractsCountCall) -> Self {
            CreditConfiguratorCalls::AllowedContractsCount(var)
        }
    }
    impl ::std::convert::From<CalcMaxPossibleDropCall> for CreditConfiguratorCalls {
        fn from(var: CalcMaxPossibleDropCall) -> Self {
            CreditConfiguratorCalls::CalcMaxPossibleDrop(var)
        }
    }
    impl ::std::convert::From<CreditFacadeCall> for CreditConfiguratorCalls {
        fn from(var: CreditFacadeCall) -> Self {
            CreditConfiguratorCalls::CreditFacade(var)
        }
    }
    impl ::std::convert::From<CreditManagerCall> for CreditConfiguratorCalls {
        fn from(var: CreditManagerCall) -> Self {
            CreditConfiguratorCalls::CreditManager(var)
        }
    }
    impl ::std::convert::From<ForbidContractCall> for CreditConfiguratorCalls {
        fn from(var: ForbidContractCall) -> Self {
            CreditConfiguratorCalls::ForbidContract(var)
        }
    }
    impl ::std::convert::From<ForbidTokenCall> for CreditConfiguratorCalls {
        fn from(var: ForbidTokenCall) -> Self {
            CreditConfiguratorCalls::ForbidToken(var)
        }
    }
    impl ::std::convert::From<PauseCall> for CreditConfiguratorCalls {
        fn from(var: PauseCall) -> Self {
            CreditConfiguratorCalls::Pause(var)
        }
    }
    impl ::std::convert::From<PausedCall> for CreditConfiguratorCalls {
        fn from(var: PausedCall) -> Self {
            CreditConfiguratorCalls::Paused(var)
        }
    }
    impl ::std::convert::From<SetDegenModeCall> for CreditConfiguratorCalls {
        fn from(var: SetDegenModeCall) -> Self {
            CreditConfiguratorCalls::SetDegenMode(var)
        }
    }
    impl ::std::convert::From<SetFastCheckParametersCall> for CreditConfiguratorCalls {
        fn from(var: SetFastCheckParametersCall) -> Self {
            CreditConfiguratorCalls::SetFastCheckParameters(var)
        }
    }
    impl ::std::convert::From<SetFeesCall> for CreditConfiguratorCalls {
        fn from(var: SetFeesCall) -> Self {
            CreditConfiguratorCalls::SetFees(var)
        }
    }
    impl ::std::convert::From<SetIncreaseDebtForbiddenCall> for CreditConfiguratorCalls {
        fn from(var: SetIncreaseDebtForbiddenCall) -> Self {
            CreditConfiguratorCalls::SetIncreaseDebtForbidden(var)
        }
    }
    impl ::std::convert::From<SetLimitsCall> for CreditConfiguratorCalls {
        fn from(var: SetLimitsCall) -> Self {
            CreditConfiguratorCalls::SetLimits(var)
        }
    }
    impl ::std::convert::From<SetLiquidationThresholdCall> for CreditConfiguratorCalls {
        fn from(var: SetLiquidationThresholdCall) -> Self {
            CreditConfiguratorCalls::SetLiquidationThreshold(var)
        }
    }
    impl ::std::convert::From<UnderlyingCall> for CreditConfiguratorCalls {
        fn from(var: UnderlyingCall) -> Self {
            CreditConfiguratorCalls::Underlying(var)
        }
    }
    impl ::std::convert::From<UnpauseCall> for CreditConfiguratorCalls {
        fn from(var: UnpauseCall) -> Self {
            CreditConfiguratorCalls::Unpause(var)
        }
    }
    impl ::std::convert::From<UpgradeConfiguratorCall> for CreditConfiguratorCalls {
        fn from(var: UpgradeConfiguratorCall) -> Self {
            CreditConfiguratorCalls::UpgradeConfigurator(var)
        }
    }
    impl ::std::convert::From<UpgradeCreditFacadeCall> for CreditConfiguratorCalls {
        fn from(var: UpgradeCreditFacadeCall) -> Self {
            CreditConfiguratorCalls::UpgradeCreditFacade(var)
        }
    }
    impl ::std::convert::From<UpgradePriceOracleCall> for CreditConfiguratorCalls {
        fn from(var: UpgradePriceOracleCall) -> Self {
            CreditConfiguratorCalls::UpgradePriceOracle(var)
        }
    }
    impl ::std::convert::From<VersionCall> for CreditConfiguratorCalls {
        fn from(var: VersionCall) -> Self {
            CreditConfiguratorCalls::Version(var)
        }
    }
}
