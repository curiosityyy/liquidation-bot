pub use curvev1adapter2assets_mod::*;
#[allow(clippy::too_many_arguments)]
mod curvev1adapter2assets_mod {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "CurveV1Adapter2Assets was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static CURVEV1ADAPTER2ASSETS_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creditManager\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_curvePool\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"NotImplementedException\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"ZeroAddressException\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"_gearboxAdapterType\",\"outputs\":[{\"internalType\":\"enum AdapterType\",\"name\":\"\",\"type\":\"uint8\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"_gearboxAdapterVersion\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"i\",\"type\":\"int128\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"rateMinRAY\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"add_all_liquidity_one_coin\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"amounts\",\"type\":\"uint256[2]\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"add_liquidity\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"coins\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"creditFacade\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"creditManager\",\"outputs\":[{\"internalType\":\"contract ICreditManager\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"i\",\"type\":\"int128\",\"components\":[]},{\"internalType\":\"int128\",\"name\":\"j\",\"type\":\"int128\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"min_dy\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"exchange\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"i\",\"type\":\"int128\",\"components\":[]},{\"internalType\":\"int128\",\"name\":\"j\",\"type\":\"int128\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"rateMinRAY\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"exchange_all\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\",\"components\":[]},{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"exchange_underlying\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"i\",\"type\":\"int128\",\"components\":[]},{\"internalType\":\"int128\",\"name\":\"j\",\"type\":\"int128\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"get_dy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"i\",\"type\":\"int128\",\"components\":[]},{\"internalType\":\"int128\",\"name\":\"j\",\"type\":\"int128\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"get_dy_underlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"get_virtual_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lp_token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"i\",\"type\":\"int128\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"minRateRAY\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_all_liquidity_one_coin\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256[2]\",\"name\":\"min_amounts\",\"type\":\"uint256[2]\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_liquidity\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"amounts\",\"type\":\"uint256[2]\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_liquidity_imbalance\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"int128\",\"name\":\"i\",\"type\":\"int128\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_liquidity_one_coin\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"targetContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static CURVEV1ADAPTER2ASSETS_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x6101406040523480156200001257600080fd5b506040516200263038038062002630833981016040819052620000359162000380565b818181816001600160a01b03821615806200005757506001600160a01b038116155b156200007657604051635919af9760e11b815260040160405180910390fd5b6001600160a01b038216608081905260408051632f7a188160e01b81529051632f7a1881916004808201926020929091908290030181865afa158015620000c1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000e79190620003b8565b6001600160a01b0390811660a052600080546001600160a01b03191692821692909217909155600180558216151590506200013557604051635919af9760e11b815260040160405180910390fd5b6000816001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801562000194575060408051601f3d908101601f191682019092526200019191810190620003b8565b60015b6200022057604051633795104960e01b81526001600160a01b03831660048201527390e00ace148ca3b23ac1bc8c240c2a7dd9c2d7f590633795104990602401602060405180830381865afa158015620001f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002189190620003b8565b905062000223565b90505b6001600160a01b0390811660c081905260e05260405163c661065760e01b815260006004820152908416925063c66106579150602401602060405180830381865afa15801562000277573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200029d9190620003b8565b6001600160a01b039081166101005260405163c661065760e01b8152600160048201529082169063c661065790602401602060405180830381865afa158015620002eb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003119190620003b8565b6001600160a01b0390811661012052610100511615806200033c5750610120516001600160a01b0316155b156200035b57604051635919af9760e11b815260040160405180910390fd5b5050620003dd565b80516001600160a01b03811681146200037b57600080fd5b919050565b600080604083850312156200039457600080fd5b6200039f8362000363565b9150620003af6020840162000363565b90509250929050565b600060208284031215620003cb57600080fd5b620003d68262000363565b9392505050565b60805160a05160c05160e05161010051610120516121156200051b6000396000818161031e015281816105dd015281816112cf015261178601526000818161018701528181610528015281816112f501526116d501526000818161027a0152818161065b01528181611094015281816113ac01528181611510015261158f0152600061036b0152600081816101d9015281816111d3015281816119340152611adc0152600081816102cf0152818161045f015281816104f6015281816105ab015281816106830152818161099601528181610ada01528181610ea401528181610f79015281816111440152818161121701528181611332015281816113fc0152818161147501528181611628015281816116fd015281816117ae015281816118b501528181611a4e01528181611b3e0152611bc601526121156000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c806382c63066116100b8578063c66106571161007c578063c6610657146102f1578063ce30bbdb14610304578063d21220a714610319578063e310327314610340578063ec026ca714610353578063fc0c546a1461036657600080fd5b806382c6306614610275578063a6417ed61461029c578063bb7b8b80146102af578063bd90df70146102b7578063c12c21c0146102ca57600080fd5b806333d2ebf21161010a57806333d2ebf2146101fb5780633df021241461020e5780635b36389c146102215780635e0d443f1461023457806378aa73a41461024757806379bea6641461026257600080fd5b806307211ef7146101475780630b4c7e4d1461016d5780630dfe1681146101825780631a4d01d2146101c15780632f7a1881146101d4575b600080fd5b61015a610155366004611c63565b61038d565b6040519081526020015b60405180910390f35b61018061017b366004611d25565b610416565b005b6101a97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610164565b6101806101cf366004611d50565b61072a565b6101a97f000000000000000000000000000000000000000000000000000000000000000081565b610180610209366004611d75565b6107a0565b61018061021c366004611d9f565b6107e9565b61018061022f366004611de1565b610956565b61015a610242366004611c63565b610a56565b61024f600281565b60405161ffff9091168152602001610164565b610180610270366004611c63565b610a9a565b6101a97f000000000000000000000000000000000000000000000000000000000000000081565b6101806102aa366004611d9f565b610d5a565b61015a610d73565b6000546101a9906001600160a01b031681565b6101a97f000000000000000000000000000000000000000000000000000000000000000081565b6101a96102ff366004611e0e565b610df0565b61030c600381565b6040516101649190611e27565b6101a97f000000000000000000000000000000000000000000000000000000000000000081565b61018061034e366004611d25565b610e64565b610180610361366004611d75565b610f23565b6101a97f000000000000000000000000000000000000000000000000000000000000000081565b600080546040516307211ef760e01b8152600f86810b600483015285900b6024820152604481018490526001600160a01b03909116906307211ef7906064015b602060405180830381865afa1580156103ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040e9190611e4f565b949350505050565b600260015414156104425760405162461bcd60e51b815260040161043990611e68565b60405180910390fd5b6002600155604051633a562dc160e21b81523360048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e958b70490602401602060405180830381865afa1580156104ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d29190611e9f565b835190915015610587576000546040516346fb371d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116926346fb371d9261055492339216907f00000000000000000000000000000000000000000000000000000000000000009060001990600401611ee5565b600060405180830381600087803b15801561056e57600080fd5b505af1158015610582573d6000803e3d6000fd5b505050505b60208301511561063c576000546040516346fb371d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116926346fb371d9261060992339216907f00000000000000000000000000000000000000000000000000000000000000009060001990600401611ee5565b600060405180830381600087803b15801561062357600080fd5b505af1158015610637573d6000803e3d6000fd5b505050505b60405163028f1f8b60e51b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000811660248301527f000000000000000000000000000000000000000000000000000000000000000016906351e3f16090604401600060405180830381600087803b1580156106c757600080fd5b505af11580156106db573d6000803e3d6000fd5b50505050610720816000368080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061112792505050565b5050600180555050565b6002600154141561074d5760405162461bcd60e51b815260040161043990611e68565b6002600155600061075d83611279565b9050610720816000368080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061131a92505050565b600260015414156107c35760405162461bcd60e51b815260040161043990611e68565b600260015560006107d383611279565b90506107e083828461145d565b50506001805550565b6002600154141561080c5760405162461bcd60e51b815260040161043990611e68565b60026001556000805460405163c661065760e01b81526001600160801b03871660048201526001600160a01b039091169063c661065790602401602060405180830381865afa158015610863573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108879190611e9f565b6000805460405163c661065760e01b81526001600160801b038816600482015292935090916001600160a01b039091169063c661065790602401602060405180830381865afa1580156108de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109029190611e9f565b905061094982826000368080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525060019250611605915050565b5050600180555050505050565b600260015414156109795760405162461bcd60e51b815260040161043990611e68565b6002600155604051633a562dc160e21b81523360048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e958b70490602401602060405180830381865afa1580156109e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a099190611e9f565b9050610a1581836116ac565b610720816000368080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061112792505050565b60008054604051635e0d443f60e01b8152600f86810b600483015285900b6024820152604481018490526001600160a01b0390911690635e0d443f906064016103cd565b60026001541415610abd5760405162461bcd60e51b815260040161043990611e68565b6002600155604051633a562dc160e21b81523360048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e958b70490602401602060405180830381865afa158015610b29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4d9190611e9f565b6000805460405163c661065760e01b81526001600160801b038816600482015292935090916001600160a01b039091169063c661065790602401602060405180830381865afa158015610ba4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc89190611e9f565b6000805460405163c661065760e01b81526001600160801b038816600482015292935090916001600160a01b039091169063c661065790602401602060405180830381865afa158015610c1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c439190611e9f565b6040516370a0823160e01b81526001600160a01b038581166004830152919250600091600191908516906370a0823190602401602060405180830381865afa158015610c93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb79190611e4f565b610cc19190611f25565b905060006b033b2e3c9fd0803ce8000000610cdc8784611f3c565b610ce69190611f5b565b60408051600f8b810b60248301528a900b60448201526064810185905260848082018490528251808303909101815260a49091019091526020810180516001600160e01b0316630f7c084960e21b179052909150610d4b90869086908690600161180a565b50506001805550505050505050565b60405163024e46f760e41b815260040160405180910390fd5b60008060009054906101000a90046001600160a01b03166001600160a01b031663bb7b8b806040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610deb9190611e4f565b905090565b6000805460405163c661065760e01b8152600481018490526001600160a01b039091169063c661065790602401602060405180830381865afa158015610e3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5e9190611e9f565b92915050565b60026001541415610e875760405162461bcd60e51b815260040161043990611e68565b6002600155604051633a562dc160e21b81523360048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e958b70490602401602060405180830381865afa158015610ef3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f179190611e9f565b9050610a1581846116ac565b60026001541415610f465760405162461bcd60e51b815260040161043990611e68565b60026001556000610f5683611279565b604051633a562dc160e21b81523360048201529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e958b70490602401602060405180830381865afa158015610fc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe49190611e9f565b6040516370a0823160e01b81526001600160a01b038083166004830152919250600091600191908516906370a0823190602401602060405180830381865afa158015611034573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110589190611e4f565b6110629190611f25565b905061106c611c2e565b8181876001600160801b03166002811061108857611088611ecf565b602002015261094983857f0000000000000000000000000000000000000000000000000000000000000000630b4c7e4d60e01b856b033b2e3c9fd0803ce80000006110d38c8a611f3c565b6110dd9190611f5b565b6040516024016110ee929190611f7d565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152600061180a565b60005460405163367203a560e11b81526060916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811692636ce4074a9261117f9233929116908790600401611fe5565b6000604051808303816000875af115801561119e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111c69190810190612032565b9050336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610e5e576040516312a6e60360e31b81526001600160a01b0384811660048301527f00000000000000000000000000000000000000000000000000000000000000001690639537301890602401600060405180830381600087803b15801561125b57600080fd5b505af115801561126f573d6000803e3d6000fd5b5050505092915050565b60006002600f83900b13156112c25760405162461bcd60e51b815260206004820152600f60248201526e092dcc6dee4e4cac6e840d2dcc8caf608b1b6044820152606401610439565b81600f0b6000146112f3577f0000000000000000000000000000000000000000000000000000000000000000610e5e565b7f000000000000000000000000000000000000000000000000000000000000000092915050565b604051633a562dc160e21b81523360048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e958b70490602401602060405180830381865afa158015611381573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a59190611e9f565b90506113d47f000000000000000000000000000000000000000000000000000000000000000084846000611605565b5060405163028f1f8b60e51b81526001600160a01b03828116600483015284811660248301527f000000000000000000000000000000000000000000000000000000000000000016906351e3f16090604401600060405180830381600087803b15801561144057600080fd5b505af1158015611454573d6000803e3d6000fd5b50505050505050565b604051633a562dc160e21b81523360048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e958b70490602401602060405180830381865afa1580156114c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e89190611e9f565b6040516370a0823160e01b81526001600160a01b0382811660048301529192506000916001917f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401602060405180830381865afa158015611559573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157d9190611e4f565b6115879190611f25565b90506115fd827f000000000000000000000000000000000000000000000000000000000000000086630d2680e960e11b858a6b033b2e3c9fd0803ce80000006115d08b84611f3c565b6115da9190611f5b565b6040516024810193909352600f9190910b604483015260648201526084016110ee565b505050505050565b604051633a562dc160e21b81523360048201526060906000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e958b70490602401602060405180830381865afa15801561166f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116939190611e9f565b90506116a2818787878761180a565b9695505050505050565b80516001101561175a5760405163028f1f8b60e51b81526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000811660248301527f000000000000000000000000000000000000000000000000000000000000000016906351e3f16090604401600060405180830381600087803b15801561174157600080fd5b505af1158015611755573d6000803e3d6000fd5b505050505b6020810151600110156118065760405163028f1f8b60e51b81526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000811660248301527f000000000000000000000000000000000000000000000000000000000000000016906351e3f16090604401600060405180830381600087803b1580156117f257600080fd5b505af11580156115fd573d6000803e3d6000fd5b5050565b6060811561192657600054604051636eb1769f60e11b81526001600160a01b03888116600483015291821660248201526b1fffffffffffffffffffffff9187169063dd62ed3e90604401602060405180830381865afa158015611871573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118959190611e4f565b1015611926576000546040516346fb371d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116926346fb371d926118f392339216908a9060001990600401611ee5565b600060405180830381600087803b15801561190d57600080fd5b505af1158015611921573d6000803e3d6000fd5b505050505b600080336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611a34576040516370a0823160e01b81526001600160a01b0389811660048301528816906370a0823190602401602060405180830381865afa15801561199f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c39190611e4f565b6040516370a0823160e01b81526001600160a01b038a81166004830152919350908716906370a0823190602401602060405180830381865afa158015611a0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a319190611e4f565b90505b60005460405163367203a560e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811692636ce4074a92611a8892339216908a90600401611fe5565b6000604051808303816000875af1158015611aa7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611acf9190810190612032565b9250336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611b9f576040516332a54f6d60e11b81526001600160a01b0389811660048301528881166024830152878116604483015260648201849052608482018390527f0000000000000000000000000000000000000000000000000000000000000000169063654a9eda9060a401600060405180830381600087803b158015611b8257600080fd5b505af1158015611b96573d6000803e3d6000fd5b50505050611c23565b60405163028f1f8b60e51b81526001600160a01b03898116600483015287811660248301527f000000000000000000000000000000000000000000000000000000000000000016906351e3f16090604401600060405180830381600087803b158015611c0a57600080fd5b505af1158015611c1e573d6000803e3d6000fd5b505050505b505095945050505050565b60405180604001604052806002906020820280368337509192915050565b8035600f81900b8114611c5e57600080fd5b919050565b600080600060608486031215611c7857600080fd5b611c8184611c4c565b9250611c8f60208501611c4c565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b600082601f830112611cc657600080fd5b6040516040810181811067ffffffffffffffff82111715611ce957611ce9611c9f565b8060405250806040840185811115611d0057600080fd5b845b81811015611d1a578035835260209283019201611d02565b509195945050505050565b60008060608385031215611d3857600080fd5b611d428484611cb5565b946040939093013593505050565b600080600060608486031215611d6557600080fd5b83359250611c8f60208501611c4c565b60008060408385031215611d8857600080fd5b611d9183611c4c565b946020939093013593505050565b60008060008060808587031215611db557600080fd5b611dbe85611c4c565b9350611dcc60208601611c4c565b93969395505050506040820135916060013590565b60008060608385031215611df457600080fd5b82359150611e058460208501611cb5565b90509250929050565b600060208284031215611e2057600080fd5b5035919050565b60208101600e8310611e4957634e487b7160e01b600052602160045260246000fd5b91905290565b600060208284031215611e6157600080fd5b5051919050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600060208284031215611eb157600080fd5b81516001600160a01b0381168114611ec857600080fd5b9392505050565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b634e487b7160e01b600052601160045260246000fd5b600082821015611f3757611f37611f0f565b500390565b6000816000190483118215151615611f5657611f56611f0f565b500290565b600082611f7857634e487b7160e01b600052601260045260246000fd5b500490565b60608101818460005b6002811015611fa5578151835260209283019290910190600101611f86565b5050508260408301529392505050565b60005b83811015611fd0578181015183820152602001611fb8565b83811115611fdf576000848401525b50505050565b600060018060a01b03808616835280851660208401525060606040830152825180606084015261201c816080850160208701611fb5565b601f01601f191691909101608001949350505050565b60006020828403121561204457600080fd5b815167ffffffffffffffff8082111561205c57600080fd5b818401915084601f83011261207057600080fd5b81518181111561208257612082611c9f565b604051601f8201601f19908116603f011681019083821181831017156120aa576120aa611c9f565b816040528281528760208487010111156120c357600080fd5b6120d4836020830160208801611fb5565b97965050505050505056fea2646970667358221220b2f25b691417316ea7f3c5e9857c0db0995bb9a519536043eeeb1e8da1355c1e64736f6c634300080a0033" . parse () . expect ("invalid bytecode")
        });
    #[derive(Clone)]
    pub struct CurveV1Adapter2Assets<M>(ethers::contract::Contract<M>);
    impl<M> std::ops::Deref for CurveV1Adapter2Assets<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for CurveV1Adapter2Assets<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(CurveV1Adapter2Assets))
                .field(&self.address())
                .finish()
        }
    }
    impl<'a, M: ethers::providers::Middleware> CurveV1Adapter2Assets<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(
                address.into(),
                CURVEV1ADAPTER2ASSETS_ABI.clone(),
                client,
            )
            .into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                CURVEV1ADAPTER2ASSETS_ABI.clone(),
                CURVEV1ADAPTER2ASSETS_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `_gearboxAdapterType` (0xce30bbdb) function"]
        pub fn gearbox_adapter_type(&self) -> ethers::contract::builders::ContractCall<M, u8> {
            self.0
                .method_hash([206, 48, 187, 219], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `_gearboxAdapterVersion` (0x78aa73a4) function"]
        pub fn gearbox_adapter_version(&self) -> ethers::contract::builders::ContractCall<M, u16> {
            self.0
                .method_hash([120, 170, 115, 164], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `add_all_liquidity_one_coin` (0xec026ca7) function"]
        pub fn add_all_liquidity_one_coin(
            &self,
            i: i128,
            rate_min_ray: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([236, 2, 108, 167], (i, rate_min_ray))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `add_liquidity` (0x0b4c7e4d) function"]
        pub fn add_liquidity(
            &self,
            amounts: [ethers::core::types::U256; 2usize],
            p1: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([11, 76, 126, 77], (amounts, p1))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `coins` (0xc6610657) function"]
        pub fn coins(
            &self,
            i: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([198, 97, 6, 87], i)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `creditFacade` (0x2f7a1881) function"]
        pub fn credit_facade(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([47, 122, 24, 129], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `creditManager` (0xc12c21c0) function"]
        pub fn credit_manager(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([193, 44, 33, 192], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `exchange` (0x3df02124) function"]
        pub fn exchange(
            &self,
            i: i128,
            j: i128,
            dx: ethers::core::types::U256,
            min_dy: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([61, 240, 33, 36], (i, j, dx, min_dy))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `exchange_all` (0x79bea664) function"]
        pub fn exchange_all(
            &self,
            i: i128,
            j: i128,
            rate_min_ray: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([121, 190, 166, 100], (i, j, rate_min_ray))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `exchange_underlying` (0xa6417ed6) function"]
        pub fn exchange_underlying(
            &self,
            p0: i128,
            p1: i128,
            p2: ethers::core::types::U256,
            p3: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([166, 65, 126, 214], (p0, p1, p2, p3))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `get_dy` (0x5e0d443f) function"]
        pub fn get_dy(
            &self,
            i: i128,
            j: i128,
            dx: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([94, 13, 68, 63], (i, j, dx))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `get_dy_underlying` (0x07211ef7) function"]
        pub fn get_dy_underlying(
            &self,
            i: i128,
            j: i128,
            dx: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([7, 33, 30, 247], (i, j, dx))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `get_virtual_price` (0xbb7b8b80) function"]
        pub fn get_virtual_price(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([187, 123, 139, 128], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `lp_token` (0x82c63066) function"]
        pub fn lp_token(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([130, 198, 48, 102], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `remove_all_liquidity_one_coin` (0x33d2ebf2) function"]
        pub fn remove_all_liquidity_one_coin(
            &self,
            i: i128,
            min_rate_ray: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([51, 210, 235, 242], (i, min_rate_ray))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `remove_liquidity` (0x5b36389c) function"]
        pub fn remove_liquidity(
            &self,
            p0: ethers::core::types::U256,
            min_amounts: [ethers::core::types::U256; 2usize],
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([91, 54, 56, 156], (p0, min_amounts))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `remove_liquidity_imbalance` (0xe3103273) function"]
        pub fn remove_liquidity_imbalance(
            &self,
            amounts: [ethers::core::types::U256; 2usize],
            p1: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([227, 16, 50, 115], (amounts, p1))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `remove_liquidity_one_coin` (0x1a4d01d2) function"]
        pub fn remove_liquidity_one_coin(
            &self,
            p0: ethers::core::types::U256,
            i: i128,
            p2: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([26, 77, 1, 210], (p0, i, p2))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `targetContract` (0xbd90df70) function"]
        pub fn target_contract(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([189, 144, 223, 112], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `token` (0xfc0c546a) function"]
        pub fn token(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([252, 12, 84, 106], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `token0` (0x0dfe1681) function"]
        pub fn token_0(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([13, 254, 22, 129], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `token1` (0xd21220a7) function"]
        pub fn token_1(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([210, 18, 32, 167], ())
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>>
        for CurveV1Adapter2Assets<M>
    {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[doc = "Container type for all input parameters for the `_gearboxAdapterType`function with signature `_gearboxAdapterType()` and selector `[206, 48, 187, 219]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "_gearboxAdapterType", abi = "_gearboxAdapterType()")]
    pub struct GearboxAdapterTypeCall;
    #[doc = "Container type for all input parameters for the `_gearboxAdapterVersion`function with signature `_gearboxAdapterVersion()` and selector `[120, 170, 115, 164]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "_gearboxAdapterVersion", abi = "_gearboxAdapterVersion()")]
    pub struct GearboxAdapterVersionCall;
    #[doc = "Container type for all input parameters for the `add_all_liquidity_one_coin`function with signature `add_all_liquidity_one_coin(int128,uint256)` and selector `[236, 2, 108, 167]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "add_all_liquidity_one_coin",
        abi = "add_all_liquidity_one_coin(int128,uint256)"
    )]
    pub struct AddAllLiquidityOneCoinCall {
        pub i: i128,
        pub rate_min_ray: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `add_liquidity`function with signature `add_liquidity(uint256[2],uint256)` and selector `[11, 76, 126, 77]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "add_liquidity", abi = "add_liquidity(uint256[2],uint256)")]
    pub struct AddLiquidityCall {
        pub amounts: [ethers::core::types::U256; 2usize],
        pub p1: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `coins`function with signature `coins(uint256)` and selector `[198, 97, 6, 87]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "coins", abi = "coins(uint256)")]
    pub struct CoinsCall {
        pub i: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `creditFacade`function with signature `creditFacade()` and selector `[47, 122, 24, 129]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "creditFacade", abi = "creditFacade()")]
    pub struct CreditFacadeCall;
    #[doc = "Container type for all input parameters for the `creditManager`function with signature `creditManager()` and selector `[193, 44, 33, 192]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "creditManager", abi = "creditManager()")]
    pub struct CreditManagerCall;
    #[doc = "Container type for all input parameters for the `exchange`function with signature `exchange(int128,int128,uint256,uint256)` and selector `[61, 240, 33, 36]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "exchange", abi = "exchange(int128,int128,uint256,uint256)")]
    pub struct ExchangeCall {
        pub i: i128,
        pub j: i128,
        pub dx: ethers::core::types::U256,
        pub min_dy: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `exchange_all`function with signature `exchange_all(int128,int128,uint256)` and selector `[121, 190, 166, 100]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "exchange_all", abi = "exchange_all(int128,int128,uint256)")]
    pub struct ExchangeAllCall {
        pub i: i128,
        pub j: i128,
        pub rate_min_ray: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `exchange_underlying`function with signature `exchange_underlying(int128,int128,uint256,uint256)` and selector `[166, 65, 126, 214]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "exchange_underlying",
        abi = "exchange_underlying(int128,int128,uint256,uint256)"
    )]
    pub struct ExchangeUnderlyingCall(
        pub i128,
        pub i128,
        pub ethers::core::types::U256,
        pub ethers::core::types::U256,
    );
    #[doc = "Container type for all input parameters for the `get_dy`function with signature `get_dy(int128,int128,uint256)` and selector `[94, 13, 68, 63]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "get_dy", abi = "get_dy(int128,int128,uint256)")]
    pub struct GetDyCall {
        pub i: i128,
        pub j: i128,
        pub dx: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `get_dy_underlying`function with signature `get_dy_underlying(int128,int128,uint256)` and selector `[7, 33, 30, 247]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "get_dy_underlying",
        abi = "get_dy_underlying(int128,int128,uint256)"
    )]
    pub struct GetDyUnderlyingCall {
        pub i: i128,
        pub j: i128,
        pub dx: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `get_virtual_price`function with signature `get_virtual_price()` and selector `[187, 123, 139, 128]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "get_virtual_price", abi = "get_virtual_price()")]
    pub struct GetVirtualPriceCall;
    #[doc = "Container type for all input parameters for the `lp_token`function with signature `lp_token()` and selector `[130, 198, 48, 102]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "lp_token", abi = "lp_token()")]
    pub struct LpTokenCall;
    #[doc = "Container type for all input parameters for the `remove_all_liquidity_one_coin`function with signature `remove_all_liquidity_one_coin(int128,uint256)` and selector `[51, 210, 235, 242]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "remove_all_liquidity_one_coin",
        abi = "remove_all_liquidity_one_coin(int128,uint256)"
    )]
    pub struct RemoveAllLiquidityOneCoinCall {
        pub i: i128,
        pub min_rate_ray: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `remove_liquidity`function with signature `remove_liquidity(uint256,uint256[2])` and selector `[91, 54, 56, 156]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "remove_liquidity",
        abi = "remove_liquidity(uint256,uint256[2])"
    )]
    pub struct RemoveLiquidityCall {
        pub p0: ethers::core::types::U256,
        pub min_amounts: [ethers::core::types::U256; 2usize],
    }
    #[doc = "Container type for all input parameters for the `remove_liquidity_imbalance`function with signature `remove_liquidity_imbalance(uint256[2],uint256)` and selector `[227, 16, 50, 115]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "remove_liquidity_imbalance",
        abi = "remove_liquidity_imbalance(uint256[2],uint256)"
    )]
    pub struct RemoveLiquidityImbalanceCall {
        pub amounts: [ethers::core::types::U256; 2usize],
        pub p1: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `remove_liquidity_one_coin`function with signature `remove_liquidity_one_coin(uint256,int128,uint256)` and selector `[26, 77, 1, 210]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "remove_liquidity_one_coin",
        abi = "remove_liquidity_one_coin(uint256,int128,uint256)"
    )]
    pub struct RemoveLiquidityOneCoinCall {
        pub p0: ethers::core::types::U256,
        pub i: i128,
        pub p2: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `targetContract`function with signature `targetContract()` and selector `[189, 144, 223, 112]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "targetContract", abi = "targetContract()")]
    pub struct TargetContractCall;
    #[doc = "Container type for all input parameters for the `token`function with signature `token()` and selector `[252, 12, 84, 106]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "token", abi = "token()")]
    pub struct TokenCall;
    #[doc = "Container type for all input parameters for the `token0`function with signature `token0()` and selector `[13, 254, 22, 129]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "token0", abi = "token0()")]
    pub struct Token0Call;
    #[doc = "Container type for all input parameters for the `token1`function with signature `token1()` and selector `[210, 18, 32, 167]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "token1", abi = "token1()")]
    pub struct Token1Call;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum CurveV1Adapter2AssetsCalls {
        GearboxAdapterType(GearboxAdapterTypeCall),
        GearboxAdapterVersion(GearboxAdapterVersionCall),
        AddAllLiquidityOneCoin(AddAllLiquidityOneCoinCall),
        AddLiquidity(AddLiquidityCall),
        Coins(CoinsCall),
        CreditFacade(CreditFacadeCall),
        CreditManager(CreditManagerCall),
        Exchange(ExchangeCall),
        ExchangeAll(ExchangeAllCall),
        ExchangeUnderlying(ExchangeUnderlyingCall),
        GetDy(GetDyCall),
        GetDyUnderlying(GetDyUnderlyingCall),
        GetVirtualPrice(GetVirtualPriceCall),
        LpToken(LpTokenCall),
        RemoveAllLiquidityOneCoin(RemoveAllLiquidityOneCoinCall),
        RemoveLiquidity(RemoveLiquidityCall),
        RemoveLiquidityImbalance(RemoveLiquidityImbalanceCall),
        RemoveLiquidityOneCoin(RemoveLiquidityOneCoinCall),
        TargetContract(TargetContractCall),
        Token(TokenCall),
        Token0(Token0Call),
        Token1(Token1Call),
    }
    impl ethers::core::abi::AbiDecode for CurveV1Adapter2AssetsCalls {
        fn decode(data: impl AsRef<[u8]>) -> Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <GearboxAdapterTypeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CurveV1Adapter2AssetsCalls::GearboxAdapterType(decoded));
            }
            if let Ok(decoded) =
                <GearboxAdapterVersionCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CurveV1Adapter2AssetsCalls::GearboxAdapterVersion(decoded));
            }
            if let Ok(decoded) =
                <AddAllLiquidityOneCoinCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CurveV1Adapter2AssetsCalls::AddAllLiquidityOneCoin(decoded));
            }
            if let Ok(decoded) =
                <AddLiquidityCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CurveV1Adapter2AssetsCalls::AddLiquidity(decoded));
            }
            if let Ok(decoded) = <CoinsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CurveV1Adapter2AssetsCalls::Coins(decoded));
            }
            if let Ok(decoded) =
                <CreditFacadeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CurveV1Adapter2AssetsCalls::CreditFacade(decoded));
            }
            if let Ok(decoded) =
                <CreditManagerCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CurveV1Adapter2AssetsCalls::CreditManager(decoded));
            }
            if let Ok(decoded) =
                <ExchangeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CurveV1Adapter2AssetsCalls::Exchange(decoded));
            }
            if let Ok(decoded) =
                <ExchangeAllCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CurveV1Adapter2AssetsCalls::ExchangeAll(decoded));
            }
            if let Ok(decoded) =
                <ExchangeUnderlyingCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CurveV1Adapter2AssetsCalls::ExchangeUnderlying(decoded));
            }
            if let Ok(decoded) = <GetDyCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CurveV1Adapter2AssetsCalls::GetDy(decoded));
            }
            if let Ok(decoded) =
                <GetDyUnderlyingCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CurveV1Adapter2AssetsCalls::GetDyUnderlying(decoded));
            }
            if let Ok(decoded) =
                <GetVirtualPriceCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CurveV1Adapter2AssetsCalls::GetVirtualPrice(decoded));
            }
            if let Ok(decoded) =
                <LpTokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CurveV1Adapter2AssetsCalls::LpToken(decoded));
            }
            if let Ok(decoded) =
                <RemoveAllLiquidityOneCoinCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CurveV1Adapter2AssetsCalls::RemoveAllLiquidityOneCoin(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <RemoveLiquidityCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CurveV1Adapter2AssetsCalls::RemoveLiquidity(decoded));
            }
            if let Ok(decoded) =
                <RemoveLiquidityImbalanceCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CurveV1Adapter2AssetsCalls::RemoveLiquidityImbalance(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <RemoveLiquidityOneCoinCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CurveV1Adapter2AssetsCalls::RemoveLiquidityOneCoin(decoded));
            }
            if let Ok(decoded) =
                <TargetContractCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CurveV1Adapter2AssetsCalls::TargetContract(decoded));
            }
            if let Ok(decoded) = <TokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CurveV1Adapter2AssetsCalls::Token(decoded));
            }
            if let Ok(decoded) = <Token0Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CurveV1Adapter2AssetsCalls::Token0(decoded));
            }
            if let Ok(decoded) = <Token1Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CurveV1Adapter2AssetsCalls::Token1(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for CurveV1Adapter2AssetsCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                CurveV1Adapter2AssetsCalls::GearboxAdapterType(element) => element.encode(),
                CurveV1Adapter2AssetsCalls::GearboxAdapterVersion(element) => element.encode(),
                CurveV1Adapter2AssetsCalls::AddAllLiquidityOneCoin(element) => element.encode(),
                CurveV1Adapter2AssetsCalls::AddLiquidity(element) => element.encode(),
                CurveV1Adapter2AssetsCalls::Coins(element) => element.encode(),
                CurveV1Adapter2AssetsCalls::CreditFacade(element) => element.encode(),
                CurveV1Adapter2AssetsCalls::CreditManager(element) => element.encode(),
                CurveV1Adapter2AssetsCalls::Exchange(element) => element.encode(),
                CurveV1Adapter2AssetsCalls::ExchangeAll(element) => element.encode(),
                CurveV1Adapter2AssetsCalls::ExchangeUnderlying(element) => element.encode(),
                CurveV1Adapter2AssetsCalls::GetDy(element) => element.encode(),
                CurveV1Adapter2AssetsCalls::GetDyUnderlying(element) => element.encode(),
                CurveV1Adapter2AssetsCalls::GetVirtualPrice(element) => element.encode(),
                CurveV1Adapter2AssetsCalls::LpToken(element) => element.encode(),
                CurveV1Adapter2AssetsCalls::RemoveAllLiquidityOneCoin(element) => element.encode(),
                CurveV1Adapter2AssetsCalls::RemoveLiquidity(element) => element.encode(),
                CurveV1Adapter2AssetsCalls::RemoveLiquidityImbalance(element) => element.encode(),
                CurveV1Adapter2AssetsCalls::RemoveLiquidityOneCoin(element) => element.encode(),
                CurveV1Adapter2AssetsCalls::TargetContract(element) => element.encode(),
                CurveV1Adapter2AssetsCalls::Token(element) => element.encode(),
                CurveV1Adapter2AssetsCalls::Token0(element) => element.encode(),
                CurveV1Adapter2AssetsCalls::Token1(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for CurveV1Adapter2AssetsCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                CurveV1Adapter2AssetsCalls::GearboxAdapterType(element) => element.fmt(f),
                CurveV1Adapter2AssetsCalls::GearboxAdapterVersion(element) => element.fmt(f),
                CurveV1Adapter2AssetsCalls::AddAllLiquidityOneCoin(element) => element.fmt(f),
                CurveV1Adapter2AssetsCalls::AddLiquidity(element) => element.fmt(f),
                CurveV1Adapter2AssetsCalls::Coins(element) => element.fmt(f),
                CurveV1Adapter2AssetsCalls::CreditFacade(element) => element.fmt(f),
                CurveV1Adapter2AssetsCalls::CreditManager(element) => element.fmt(f),
                CurveV1Adapter2AssetsCalls::Exchange(element) => element.fmt(f),
                CurveV1Adapter2AssetsCalls::ExchangeAll(element) => element.fmt(f),
                CurveV1Adapter2AssetsCalls::ExchangeUnderlying(element) => element.fmt(f),
                CurveV1Adapter2AssetsCalls::GetDy(element) => element.fmt(f),
                CurveV1Adapter2AssetsCalls::GetDyUnderlying(element) => element.fmt(f),
                CurveV1Adapter2AssetsCalls::GetVirtualPrice(element) => element.fmt(f),
                CurveV1Adapter2AssetsCalls::LpToken(element) => element.fmt(f),
                CurveV1Adapter2AssetsCalls::RemoveAllLiquidityOneCoin(element) => element.fmt(f),
                CurveV1Adapter2AssetsCalls::RemoveLiquidity(element) => element.fmt(f),
                CurveV1Adapter2AssetsCalls::RemoveLiquidityImbalance(element) => element.fmt(f),
                CurveV1Adapter2AssetsCalls::RemoveLiquidityOneCoin(element) => element.fmt(f),
                CurveV1Adapter2AssetsCalls::TargetContract(element) => element.fmt(f),
                CurveV1Adapter2AssetsCalls::Token(element) => element.fmt(f),
                CurveV1Adapter2AssetsCalls::Token0(element) => element.fmt(f),
                CurveV1Adapter2AssetsCalls::Token1(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<GearboxAdapterTypeCall> for CurveV1Adapter2AssetsCalls {
        fn from(var: GearboxAdapterTypeCall) -> Self {
            CurveV1Adapter2AssetsCalls::GearboxAdapterType(var)
        }
    }
    impl ::std::convert::From<GearboxAdapterVersionCall> for CurveV1Adapter2AssetsCalls {
        fn from(var: GearboxAdapterVersionCall) -> Self {
            CurveV1Adapter2AssetsCalls::GearboxAdapterVersion(var)
        }
    }
    impl ::std::convert::From<AddAllLiquidityOneCoinCall> for CurveV1Adapter2AssetsCalls {
        fn from(var: AddAllLiquidityOneCoinCall) -> Self {
            CurveV1Adapter2AssetsCalls::AddAllLiquidityOneCoin(var)
        }
    }
    impl ::std::convert::From<AddLiquidityCall> for CurveV1Adapter2AssetsCalls {
        fn from(var: AddLiquidityCall) -> Self {
            CurveV1Adapter2AssetsCalls::AddLiquidity(var)
        }
    }
    impl ::std::convert::From<CoinsCall> for CurveV1Adapter2AssetsCalls {
        fn from(var: CoinsCall) -> Self {
            CurveV1Adapter2AssetsCalls::Coins(var)
        }
    }
    impl ::std::convert::From<CreditFacadeCall> for CurveV1Adapter2AssetsCalls {
        fn from(var: CreditFacadeCall) -> Self {
            CurveV1Adapter2AssetsCalls::CreditFacade(var)
        }
    }
    impl ::std::convert::From<CreditManagerCall> for CurveV1Adapter2AssetsCalls {
        fn from(var: CreditManagerCall) -> Self {
            CurveV1Adapter2AssetsCalls::CreditManager(var)
        }
    }
    impl ::std::convert::From<ExchangeCall> for CurveV1Adapter2AssetsCalls {
        fn from(var: ExchangeCall) -> Self {
            CurveV1Adapter2AssetsCalls::Exchange(var)
        }
    }
    impl ::std::convert::From<ExchangeAllCall> for CurveV1Adapter2AssetsCalls {
        fn from(var: ExchangeAllCall) -> Self {
            CurveV1Adapter2AssetsCalls::ExchangeAll(var)
        }
    }
    impl ::std::convert::From<ExchangeUnderlyingCall> for CurveV1Adapter2AssetsCalls {
        fn from(var: ExchangeUnderlyingCall) -> Self {
            CurveV1Adapter2AssetsCalls::ExchangeUnderlying(var)
        }
    }
    impl ::std::convert::From<GetDyCall> for CurveV1Adapter2AssetsCalls {
        fn from(var: GetDyCall) -> Self {
            CurveV1Adapter2AssetsCalls::GetDy(var)
        }
    }
    impl ::std::convert::From<GetDyUnderlyingCall> for CurveV1Adapter2AssetsCalls {
        fn from(var: GetDyUnderlyingCall) -> Self {
            CurveV1Adapter2AssetsCalls::GetDyUnderlying(var)
        }
    }
    impl ::std::convert::From<GetVirtualPriceCall> for CurveV1Adapter2AssetsCalls {
        fn from(var: GetVirtualPriceCall) -> Self {
            CurveV1Adapter2AssetsCalls::GetVirtualPrice(var)
        }
    }
    impl ::std::convert::From<LpTokenCall> for CurveV1Adapter2AssetsCalls {
        fn from(var: LpTokenCall) -> Self {
            CurveV1Adapter2AssetsCalls::LpToken(var)
        }
    }
    impl ::std::convert::From<RemoveAllLiquidityOneCoinCall> for CurveV1Adapter2AssetsCalls {
        fn from(var: RemoveAllLiquidityOneCoinCall) -> Self {
            CurveV1Adapter2AssetsCalls::RemoveAllLiquidityOneCoin(var)
        }
    }
    impl ::std::convert::From<RemoveLiquidityCall> for CurveV1Adapter2AssetsCalls {
        fn from(var: RemoveLiquidityCall) -> Self {
            CurveV1Adapter2AssetsCalls::RemoveLiquidity(var)
        }
    }
    impl ::std::convert::From<RemoveLiquidityImbalanceCall> for CurveV1Adapter2AssetsCalls {
        fn from(var: RemoveLiquidityImbalanceCall) -> Self {
            CurveV1Adapter2AssetsCalls::RemoveLiquidityImbalance(var)
        }
    }
    impl ::std::convert::From<RemoveLiquidityOneCoinCall> for CurveV1Adapter2AssetsCalls {
        fn from(var: RemoveLiquidityOneCoinCall) -> Self {
            CurveV1Adapter2AssetsCalls::RemoveLiquidityOneCoin(var)
        }
    }
    impl ::std::convert::From<TargetContractCall> for CurveV1Adapter2AssetsCalls {
        fn from(var: TargetContractCall) -> Self {
            CurveV1Adapter2AssetsCalls::TargetContract(var)
        }
    }
    impl ::std::convert::From<TokenCall> for CurveV1Adapter2AssetsCalls {
        fn from(var: TokenCall) -> Self {
            CurveV1Adapter2AssetsCalls::Token(var)
        }
    }
    impl ::std::convert::From<Token0Call> for CurveV1Adapter2AssetsCalls {
        fn from(var: Token0Call) -> Self {
            CurveV1Adapter2AssetsCalls::Token0(var)
        }
    }
    impl ::std::convert::From<Token1Call> for CurveV1Adapter2AssetsCalls {
        fn from(var: Token1Call) -> Self {
            CurveV1Adapter2AssetsCalls::Token1(var)
        }
    }
}
