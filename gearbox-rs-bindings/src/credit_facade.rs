pub use creditfacade_mod::*;
#[allow(clippy::too_many_arguments)]
mod creditfacade_mod {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    pub use super::super::shared_types::*;
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "CreditFacade was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static CREDITFACADE_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creditManager\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_degenNFT\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"AccountTransferNotAllowedException\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"CantLiquidateWithSuchHealthFactorException\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"CantTransferLiquidatableAccountException\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"ContractNotAllowedException\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"CreditConfiguratorOnlyException\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"CreditManagerCallsForbiddenException\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"HasAlreadyOpenedCreditAccountInDegenMode\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"IncorrectCallDataLengthException\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"IncorrectOpenCreditAccountAmountException\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"IncreaseAndDecreaseForbiddenInOneCallException\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"IncreaseDebtForbiddenException\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"IntlCallsDuringClosureForbiddenException\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"NoDegenNFTInDegenModeException\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"TargetIsNotAdapterException\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"TokenNotAllowedException\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"UnknownMethodException\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"ZeroAddressException\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"AddCollateral\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"CloseCreditAccount\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"DecreaseBorrowedAmount\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"IncreaseBorrowedAmount\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"remainingFunds\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"LiquidateCreditAccount\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"type\":\"event\",\"name\":\"MultiCallFinished\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"MultiCallStarted\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"creditAccount\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"referralCode\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"OpenCreditAccount\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"TransferAccount\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TransferAccountAllowed\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"addCollateral\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"approve\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"approveAccountTransfers\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creditAccount\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"calcCreditAccountHealthFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"hf\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creditAccount\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"calcTotalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"twv\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"skipTokenMask\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"convertWETH\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"struct MultiCall[]\",\"name\":\"calls\",\"type\":\"tuple[]\",\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\",\"components\":[]}]}],\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"closeCreditAccount\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"contractToAdapter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"creditManager\",\"outputs\":[{\"internalType\":\"contract ICreditManager\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"decreaseDebt\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"degenMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"degenNFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"hasOpenedCreditAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"increaseDebt\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isIncreaseDebtForbidden\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isTokenAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"skipTokenMask\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"convertWETH\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"struct MultiCall[]\",\"name\":\"calls\",\"type\":\"tuple[]\",\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\",\"components\":[]}]}],\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"liquidateCreditAccount\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"struct MultiCall[]\",\"name\":\"calls\",\"type\":\"tuple[]\",\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\",\"components\":[]}]}],\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"multicall\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"leverageFactor\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"referralCode\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"openCreditAccount\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"struct MultiCall[]\",\"name\":\"calls\",\"type\":\"tuple[]\",\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\",\"components\":[]}]},{\"internalType\":\"uint256\",\"name\":\"referralCode\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"openCreditAccountMulticall\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setContractToAdapter\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_mode\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setDegenMode\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_mode\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setIncreaseDebtForbidden\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalOpenedAccountsDegenMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferAccountOwnership\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"transfersAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"wethAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static CREDITFACADE_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x6101006040523480156200001257600080fd5b50604051620038ca380380620038ca83398101604081905262000035916200019f565b60016000556001600160a01b0382166200006257604051635919af9760e11b815260040160405180910390fd5b6001600160a01b038216608081905260408051636f307dc360e01b81529051636f307dc3916004808201926020929091908290030181865afa158015620000ad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000d39190620001d7565b6001600160a01b031660a0816001600160a01b031681525050816001600160a01b0316634f0e0ef36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200012b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001519190620001d7565b6001600160a01b0390811660c0521660e08190526005805461ff0019169115156101000291909117905550620001fc565b80516001600160a01b03811681146200019a57600080fd5b919050565b60008060408385031215620001b357600080fd5b620001be8362000182565b9150620001ce6020840162000182565b90509250929050565b600060208284031215620001ea57600080fd5b620001f58262000182565b9392505050565b60805160a05160c05160e05161354462000386600039600081816103c101526122530152600081816102920152818161238c015261241601526000818161038d01528181610f740152818161118e015281816111ec01528181611b190152611baa0152600081816103f5015281816105e00152818161065e0152818161078701528181610814015281816108b1015281816109b001528181610a3d01528181610ada01528181610bee01528181610ce901528181610dae01528181610e7501528181610fa20152818161107f0152818161115d015281816112ac015281816113c2015281816114780152818161164401528181611713015281816117ba0152818161182d015281816118e101528181611a6a01528181611c8701528181611d2901528181611d9201528181611e8f01528181611fbb01528181612056015281816120d10152818161215d015281816124b60152818161264c015281816127c40152818161290b015281816129fb01528181612a5401528181612bd90152612c7301526135446000f3fe6080604052600436106101b75760003560e01c80636f307dc3116100ec578063d9ccbec11161008a578063e1f21c6711610064578063e1f21c6714610526578063f9eaee0d14610546578063fdd5764514610566578063ffd9b9071461059c57600080fd5b8063d9ccbec1146104ac578063df1a701c146104e7578063dfd594651461050657600080fd5b8063c7de38a6116100c6578063c7de38a614610417578063caa5c23f1461044c578063ce03841e1461045f578063cf64ffdf1461048c57600080fd5b80636f307dc31461037b5780639408b63f146103af578063c12c21c0146103e357600080fd5b80635019e20a11610159578063597810341161013357806359781034146103225780635d91a0e0146103355780635f27212a146103485780635f73fbec1461036857600080fd5b80635019e20a146102cc5780635288ba4b146102ec57806354fd4d50146102ff57600080fd5b80632b7c7b11116101955780632b7c7b111461023357806343ac18191461025357806347639fa81461026d5780634f0e0ef31461028057600080fd5b8063256ac915146101bc57806328a144f2146101f15780632a7ba1f714610213575b600080fd5b3480156101c857600080fd5b506101dc6101d7366004612eb3565b6105bc565b60405190151581526020015b60405180910390f35b3480156101fd57600080fd5b5061021161020c366004612ed0565b61065c565b005b34801561021f57600080fd5b5061021161022e366004612f09565b61073f565b34801561023f57600080fd5b5061021161024e366004612f09565b61094c565b34801561025f57600080fd5b506005546101dc9060ff1681565b61021161027b366004612f6e565b610b68565b34801561028c57600080fd5b506102b47f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101e8565b3480156102d857600080fd5b506102116102e7366004612eb3565b610d52565b6102116102fa366004612fd2565b610f0c565b34801561030b57600080fd5b50610314600281565b6040519081526020016101e8565b61021161033036600461300f565b611265565b61021161034336600461305e565b611370565b34801561035457600080fd5b506102116103633660046130e3565b61157c565b610211610376366004613111565b6115e8565b34801561038757600080fd5b506102b47f000000000000000000000000000000000000000000000000000000000000000081565b3480156103bb57600080fd5b506102b47f000000000000000000000000000000000000000000000000000000000000000081565b3480156103ef57600080fd5b506102b47f000000000000000000000000000000000000000000000000000000000000000081565b34801561042357600080fd5b50610437610432366004612eb3565b61170c565b604080519283526020830191909152016101e8565b61021161045a366004613184565b611c39565b34801561046b57600080fd5b5061031461047a366004612eb3565b60066020526000908152604090205481565b34801561049857600080fd5b506102116104a73660046131c6565b611d90565b3480156104b857600080fd5b506101dc6104c7366004612ed0565b600360209081526000928352604080842090915290825290205460ff1681565b3480156104f357600080fd5b506005546101dc90610100900460ff1681565b34801561051257600080fd5b50610314610521366004612eb3565b611e5d565b34801561053257600080fd5b5061021161054136600461300f565b611f1e565b34801561055257600080fd5b506101dc610561366004612eb3565b612032565b34801561057257600080fd5b506102b4610581366004612eb3565b6004602052600090815260409020546001600160a01b031681565b3480156105a857600080fd5b506102116105b73660046131c6565b61215b565b60405163055ee9b560e01b81526001600160a01b03828116600483015260009182917f0000000000000000000000000000000000000000000000000000000000000000169063055ee9b590602401602060405180830381865afa158015610627573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064b91906131e3565b6001600160a01b0316141592915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f9aa028a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106de91906131e3565b6001600160a01b0316336001600160a01b03161461070f5760405163eee4716960e01b815260040160405180910390fd5b6001600160a01b0390811660009081526004602052604090208054919092166001600160a01b0319909116179055565b6002600054141561076b5760405162461bcd60e51b815260040161076290613200565b60405180910390fd5b60026000908155604051633a562dc160e21b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e958b70490602401602060405180830381865afa1580156107d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fa91906131e3565b604051634a67839d60e11b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906394cf073a9061084e9033908690600090600401613237565b6020604051808303816000875af115801561086d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610891919061325a565b506040516312a6e60360e31b81526001600160a01b0382811660048301527f00000000000000000000000000000000000000000000000000000000000000001690639537301890602401600060405180830381600087803b1580156108f557600080fd5b505af1158015610909573d6000803e3d6000fd5b50506040518481523392507f98274bf834d179ee08dc0604071b0dc90b54731bd5f725a5a96a39a86bce025a91506020015b60405180910390a250506001600055565b6002600054141561096f5760405162461bcd60e51b815260040161076290613200565b600260005560055460ff161561099857604051637615238d60e01b815260040160405180910390fd5b604051633a562dc160e21b81523360048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e958b70490602401602060405180830381865afa1580156109ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2391906131e3565b604051634a67839d60e11b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906394cf073a90610a779033908690600190600401613237565b6020604051808303816000875af1158015610a96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aba919061325a565b506040516312a6e60360e31b81526001600160a01b0382811660048301527f00000000000000000000000000000000000000000000000000000000000000001690639537301890602401600060405180830381600087803b158015610b1e57600080fd5b505af1158015610b32573d6000803e3d6000fd5b50506040518481523392507f9cac51154cc0d835e2f9c9d1f59a9344588cee107f4203bf58a8c797e3a58c45915060200161093b565b60026000541415610b8b5760405162461bcd60e51b815260040161076290613200565b6002600055610b9984612221565b60055460ff1615610bbd57604051637615238d60e01b815260040160405180910390fd5b610bc5612384565b604051638fe3f93f60e01b8152600481018690526001600160a01b0385811660248301526000917f000000000000000000000000000000000000000000000000000000000000000090911690638fe3f93f906044016020604051808303816000875af1158015610c39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5d91906131e3565b9050806001600160a01b0316856001600160a01b03167fb74d1a34ced5680126a90a8c87ca8dfb02bf84b1921cc56349df6501fad303268885604051610cad929190918252602082015260400190565b60405180910390a38215610cca57610cca84848760006001612491565b6040516312a6e60360e31b81526001600160a01b0382811660048301527f00000000000000000000000000000000000000000000000000000000000000001690639537301890602401600060405180830381600087803b158015610d2d57600080fd5b505af1158015610d41573d6000803e3d6000fd5b505060016000555050505050505050565b3360009081526003602090815260408083206001600160a01b038516845290915290205460ff16610d96576040516342d83b9360e11b815260040160405180910390fd5b604051633a562dc160e21b81523360048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e958b70490602401602060405180830381865afa158015610dfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2191906131e3565b90506000610e2e82612c3d565b5090508015610e5057604051637b89c20f60e11b815260040160405180910390fd5b60405163e1998cf960e01b81523360048201526001600160a01b0384811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063e1998cf990604401600060405180830381600087803b158015610eb957600080fd5b505af1158015610ecd573d6000803e3d6000fd5b50506040516001600160a01b03861692503391507f93c70cc9715bef0d83edf2095f3595402279d274f402a73ffc17f1bcb19d863d90600090a3505050565b60026000541415610f2f5760405162461bcd60e51b815260040161076290613200565b6002600055610f3d83612221565b610f45612384565b60006064610f538487613289565b610f5d91906132a8565b604051630f064e8760e31b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301529192506000917f00000000000000000000000000000000000000000000000000000000000000001690637832743890602401602060405180830381865afa158015610fe9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100d919061325a565b905061101881612ceb565b611024816127106132ca565b61102e9083613289565b6110388288613289565b11611056576040516310c5a01360e11b815260040160405180910390fd5b604051638fe3f93f60e01b8152600481018390526001600160a01b0386811660248301526000917f000000000000000000000000000000000000000000000000000000000000000090911690638fe3f93f906044016020604051808303816000875af11580156110ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ee91906131e3565b9050806001600160a01b0316866001600160a01b03167fb74d1a34ced5680126a90a8c87ca8dfb02bf84b1921cc56349df6501fad30326858760405161113e929190918252602082015260400190565b60405180910390a360405163830aa74560e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063830aa745906111b89033908a907f0000000000000000000000000000000000000000000000000000000000000000908d906004016132e1565b600060405180830381600087803b1580156111d257600080fd5b505af11580156111e6573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316866001600160a01b03167fa32435755c235de2976ed44a75a2f85cb01faf0c894f639fe0c32bb9455fea8f8960405161124f91815260200190565b60405180910390a3505060016000555050505050565b600260005414156112885760405162461bcd60e51b815260040161076290613200565b6002600055611295612384565b60405163830aa74560e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063830aa745906112e79033908790879087906004016132e1565b600060405180830381600087803b15801561130157600080fd5b505af1158015611315573d6000803e3d6000fd5b50505050816001600160a01b0316836001600160a01b03167fa32435755c235de2976ed44a75a2f85cb01faf0c894f639fe0c32bb9455fea8f8360405161135e91815260200190565b60405180910390a35050600160005550565b600260005414156113935760405162461bcd60e51b815260040161076290613200565b60026000556113a0612384565b604051633a562dc160e21b81526001600160a01b0387811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e958b70490602401602060405180830381865afa15801561140b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142f91906131e3565b905060008061143d83612c3d565b915091508161145f57604051631fdd676f60e01b815260040160405180910390fd5b83156114745761147485858b60016000612491565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c5c9fe18b600185338e8e8e6040518863ffffffff1660e01b81526004016114cf979695949392919061330b565b6020604051808303816000875af11580156114ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611512919061325a565b9050886001600160a01b0316336001600160a01b03168b6001600160a01b03167f7dfecd8419723a9d3954585a30c2a270165d70aafa146c11c1e1b88ae14390648460405161156391815260200190565b60405180910390a4505060016000555050505050505050565b6001600160a01b03821660008181526003602090815260408083203380855290835292819020805460ff191686151590811790915590519081529192917f9b3258bc4904fd6426b99843e206c6c7cdb1fd0f040121c25b71dafbb3851ee0910160405180910390a35050565b6002600054141561160b5760405162461bcd60e51b815260040161076290613200565b6002600055611618612384565b801561162d5761162d82823360016000612491565b604051638c5c9fe160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638c5c9fe190611686903390600090819083908c908c908c9060040161330b565b6020604051808303816000875af11580156116a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c9919061325a565b506040516001600160a01b0386169033907f460ad03b1cf79b1d64d3aefa28475f110ab66e84649c52bb41ed796b9b39198190600090a350506001600055505050565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632630c12f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561176f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179391906131e3565b604051638991b2f160e01b81526001600160a01b03868116600483015291925060009182917f000000000000000000000000000000000000000000000000000000000000000090911690638991b2f190602401602060405180830381865afa158015611803573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611827919061325a565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166320a05ff76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611889573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ad919061325a565b905060005b81811015611afa576001811b935082841615611af257604051632f2f971360e11b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635e5f2e2690602401602060405180830381865afa158015611930573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195491906131e3565b6040516370a0823160e01b81526001600160a01b038b811660048301529192506000918316906370a0823190602401602060405180830381865afa1580156119a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c4919061325a565b90506001811115611aef57604051630f9a650360e41b8152600481018290526001600160a01b0383811660248301526000919089169063f9a6503090604401602060405180830381865afa158015611a20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a44919061325a565b604051630f064e8760e31b81526001600160a01b0385811660048301529b82019b9192507f000000000000000000000000000000000000000000000000000000000000000090911690637832743890602401602060405180830381865afa158015611ab3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad7919061325a565b611ae19082613289565b611aeb908a61334e565b9850505b50505b6001016118b2565b50604051631ebec04160e21b8152600481018790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166024830152851690637afb010490604401602060405180830381865afa158015611b68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8c919061325a565b604051631ebec04160e21b8152600481018790526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116602483015291975061271091861690637afb010490604401602060405180830381865afa158015611c00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c24919061325a565b611c2e91906132a8565b945050505050915091565b60026000541415611c5c5760405162461bcd60e51b815260040161076290613200565b6002600055611c69612384565b8015611d8757604051633a562dc160e21b81523360048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e958b70490602401602060405180830381865afa158015611cd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cfa91906131e3565b9050611d0a838333600080612491565b6040516312a6e60360e31b81526001600160a01b0382811660048301527f00000000000000000000000000000000000000000000000000000000000000001690639537301890602401600060405180830381600087803b158015611d6d57600080fd5b505af1158015611d81573d6000803e3d6000fd5b50505050505b50506001600055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f9aa028a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611dee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1291906131e3565b6001600160a01b0316336001600160a01b031614611e435760405163eee4716960e01b815260040160405180910390fd5b600580549115156101000261ff0019909216919091179055565b600080611e698361170c565b604051630c64865760e21b81526001600160a01b038681166004830152919350600092507f000000000000000000000000000000000000000000000000000000000000000090911690633192195c906024016040805180830381865afa158015611ed7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611efb9190613366565b9150819050611f0c61271084613289565b611f1691906132a8565b949350505050565b60026000541415611f415760405162461bcd60e51b815260040161076290613200565b600260009081556001600160a01b038481168252600460205260409091205416611f7e57604051630fa7ee7760e11b815260040160405180910390fd5b611f8782612032565b611fa45760405163700ca0af60e01b815260040160405180910390fd5b6040516346fb371d60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906346fb371d90611ff69033908790879087906004016132e1565b600060405180830381600087803b15801561201057600080fd5b505af1158015612024573d6000803e3d6000fd5b505060016000555050505050565b604051630f67c5bd60e41b81526001600160a01b03828116600483015260009182917f0000000000000000000000000000000000000000000000000000000000000000169063f67c5bd090602401602060405180830381865afa15801561209d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c1919061325a565b90506000811180156121545750807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e46c95bc6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561212d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612151919061325a565b16155b9392505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f9aa028a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156121b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121dd91906131e3565b6001600160a01b0316336001600160a01b03161461220e5760405163eee4716960e01b815260040160405180910390fd5b6005805460ff1916911515919091179055565b600554610100900460ff1615612326576040516370a0823160e01b81526001600160a01b0382811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401602060405180830381865afa15801561229c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c0919061325a565b6001600160a01b03831660009081526006602052604090205490915081116122fb5760405163081547bd60e11b815260040160405180910390fd5b6001600160a01b038216600090815260066020526040812080549161231f8361338a565b9190505550505b336001600160a01b0382161480159061236357503360009081526003602090815260408083206001600160a01b038516845290915290205460ff16155b15612381576040516342d83b9360e11b815260040160405180910390fd5b50565b341561248f577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156123e557600080fd5b505af11580156123f9573d6000803e3d6000fd5b505060405163a9059cbb60e01b81523360048201523460248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316935063a9059cbb925060440190506020604051808303816000875af115801561246b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061238191906133a5565b565b60405163e1998cf960e01b81526001600160a01b0384811660048301523060248301527f0000000000000000000000000000000000000000000000000000000000000000169063e1998cf990604401600060405180830381600087803b1580156124fa57600080fd5b505af115801561250e573d6000803e3d6000fd5b50506040516001600160a01b03861692507f4ad424605b950d17d87835716d98c0cac1f6ff9c38114e63304902188a6908119150600090a28360005b81811015612b8a5736878783818110612565576125656133c2565b905060200281019061257791906133d8565b9050600461258860208301836133f8565b905010156125a957604051632177dead60e21b815260040160405180910390fd5b306125b76020830183612eb3565b6001600160a01b031614156129f15784156125e5576040516335e8039560e01b815260040160405180910390fd5b60006125f460208301836133f8565b6125fd9161343f565b90506001600160e01b0319811663165e040d60e21b1415612743576000808061262960208601866133f8565b61263791600490829061346f565b810190612644919061300f565b9250925092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663830aa745338c6001600160a01b0316866001600160a01b031614612699578561269b565b305b85856040518563ffffffff1660e01b81526004016126bc94939291906132e1565b600060405180830381600087803b1580156126d657600080fd5b505af11580156126ea573d6000803e3d6000fd5b50505050816001600160a01b0316836001600160a01b03167fa32435755c235de2976ed44a75a2f85cb01faf0c894f639fe0c32bb9455fea8f8360405161273391815260200190565b60405180910390a35050506129eb565b6001600160e01b03198116632b7c7b1160e01b141561288f5760055460ff161561278057604051637615238d60e01b815260040160405180910390fd5b600061278f60208401846133f8565b61279d91600490829061346f565b8101906127aa9190612f09565b604051634a67839d60e11b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906394cf073a906127fe9030908590600190600401613237565b6020604051808303816000875af115801561281d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612841919061325a565b50876001600160a01b03167f9cac51154cc0d835e2f9c9d1f59a9344588cee107f4203bf58a8c797e3a58c458260405161287d91815260200190565b60405180910390a260019550506129eb565b6001600160e01b03198116632a7ba1f760e01b14156129d25784156128c757604051631816195560e31b815260040160405180910390fd5b60006128d660208401846133f8565b6128e491600490829061346f565b8101906128f19190612f09565b604051634a67839d60e11b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906394cf073a906129459030908590600090600401613237565b6020604051808303816000875af1158015612964573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612988919061325a565b50876001600160a01b03167f98274bf834d179ee08dc0604071b0dc90b54731bd5f725a5a96a39a86bce025a826040516129c491815260200190565b60405180910390a2506129eb565b604051630f4f3f3d60e11b815260040160405180910390fd5b50612b81565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016612a286020830183612eb3565b6001600160a01b03161415612a50576040516307eafaf160e21b815260040160405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ff687543612a8e6020850185612eb3565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015612ad2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612af691906131e3565b6001600160a01b03161415612b1e576040516374b3bbf160e01b815260040160405180910390fd5b612b7f612b2e60208301836133f8565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612b70925050506020840184612eb3565b6001600160a01b031690612d30565b505b5060010161254a565b506040517f60c8e8938c9a0c0d88a98d6f1c562ce68077e12bf3edb8047378f2f736cb45b490600090a160405163e1998cf960e01b81523060048201526001600160a01b0385811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063e1998cf990604401600060405180830381600087803b158015612c1d57600080fd5b505af1158015612c31573d6000803e3d6000fd5b50505050505050505050565b6000806000612c4b8461170c565b604051630c64865760e21b81526001600160a01b0387811660048301529294509092506000917f00000000000000000000000000000000000000000000000000000000000000001690633192195c906024016040805180830381865afa158015612cb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cdd9190613366565b909210959294509192505050565b61238181604051602401612d0191815260200190565b60408051601f198184030181529190526020810180516001600160e01b031663f5b1bba960e01b179052612d72565b606061215483836040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c65640000815250612d93565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6060611f16848460008585843b612dec5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610762565b600080866001600160a01b03168587604051612e0891906134c9565b60006040518083038185875af1925050503d8060008114612e45576040519150601f19603f3d011682016040523d82523d6000602084013e612e4a565b606091505b5091509150612e5a828286612e65565b979650505050505050565b60608315612e74575081612154565b825115612e845782518084602001fd5b8160405162461bcd60e51b815260040161076291906134db565b6001600160a01b038116811461238157600080fd5b600060208284031215612ec557600080fd5b813561215481612e9e565b60008060408385031215612ee357600080fd5b8235612eee81612e9e565b91506020830135612efe81612e9e565b809150509250929050565b600060208284031215612f1b57600080fd5b5035919050565b60008083601f840112612f3457600080fd5b50813567ffffffffffffffff811115612f4c57600080fd5b6020830191508360208260051b8501011115612f6757600080fd5b9250929050565b600080600080600060808688031215612f8657600080fd5b853594506020860135612f9881612e9e565b9350604086013567ffffffffffffffff811115612fb457600080fd5b612fc088828901612f22565b96999598509660600135949350505050565b60008060008060808587031215612fe857600080fd5b843593506020850135612ffa81612e9e565b93969395505050506040820135916060013590565b60008060006060848603121561302457600080fd5b833561302f81612e9e565b9250602084013561303f81612e9e565b929592945050506040919091013590565b801515811461238157600080fd5b60008060008060008060a0878903121561307757600080fd5b863561308281612e9e565b9550602087013561309281612e9e565b94506040870135935060608701356130a981613050565b9250608087013567ffffffffffffffff8111156130c557600080fd5b6130d189828a01612f22565b979a9699509497509295939492505050565b600080604083850312156130f657600080fd5b823561310181612e9e565b91506020830135612efe81613050565b60008060008060006080868803121561312957600080fd5b853561313481612e9e565b945060208601359350604086013561314b81613050565b9250606086013567ffffffffffffffff81111561316757600080fd5b61317388828901612f22565b969995985093965092949392505050565b6000806020838503121561319757600080fd5b823567ffffffffffffffff8111156131ae57600080fd5b6131ba85828601612f22565b90969095509350505050565b6000602082840312156131d857600080fd5b813561215481613050565b6000602082840312156131f557600080fd5b815161215481612e9e565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6001600160a01b0393909316835260208301919091521515604082015260600190565b60006020828403121561326c57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156132a3576132a3613273565b500290565b6000826132c557634e487b7160e01b600052601260045260246000fd5b500490565b6000828210156132dc576132dc613273565b500390565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b039788168152951515602087015260408601949094529185166060850152909316608083015260a082019290925290151560c082015260e00190565b6000821982111561336157613361613273565b500190565b6000806040838503121561337957600080fd5b505080516020909101519092909150565b600060001982141561339e5761339e613273565b5060010190565b6000602082840312156133b757600080fd5b815161215481613050565b634e487b7160e01b600052603260045260246000fd5b60008235603e198336030181126133ee57600080fd5b9190910192915050565b6000808335601e1984360301811261340f57600080fd5b83018035915067ffffffffffffffff82111561342a57600080fd5b602001915036819003821315612f6757600080fd5b6001600160e01b031981358181169160048510156134675780818660040360031b1b83161692505b505092915050565b6000808585111561347f57600080fd5b8386111561348c57600080fd5b5050820193919092039150565b60005b838110156134b457818101518382015260200161349c565b838111156134c3576000848401525b50505050565b600082516133ee818460208701613499565b60208152600082518060208401526134fa816040850160208701613499565b601f01601f1916919091016040019291505056fea264697066735822122000edcbd2d87ca91249327a7fb1caebf22b5c878757e06ad2a4913fca15e8f97564736f6c634300080a0033" . parse () . expect ("invalid bytecode")
        });
    #[derive(Clone)]
    pub struct CreditFacade<M>(ethers::contract::Contract<M>);
    impl<M> std::ops::Deref for CreditFacade<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for CreditFacade<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(CreditFacade))
                .field(&self.address())
                .finish()
        }
    }
    impl<'a, M: ethers::providers::Middleware> CreditFacade<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), CREDITFACADE_ABI.clone(), client).into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                CREDITFACADE_ABI.clone(),
                CREDITFACADE_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `addCollateral` (0x59781034) function"]
        pub fn add_collateral(
            &self,
            on_behalf_of: ethers::core::types::Address,
            token: ethers::core::types::Address,
            amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([89, 120, 16, 52], (on_behalf_of, token, amount))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `approve` (0xe1f21c67) function"]
        pub fn approve(
            &self,
            target_contract: ethers::core::types::Address,
            token: ethers::core::types::Address,
            amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([225, 242, 28, 103], (target_contract, token, amount))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `approveAccountTransfers` (0x5f27212a) function"]
        pub fn approve_account_transfers(
            &self,
            from: ethers::core::types::Address,
            state: bool,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([95, 39, 33, 42], (from, state))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `calcCreditAccountHealthFactor` (0xdfd59465) function"]
        pub fn calc_credit_account_health_factor(
            &self,
            credit_account: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([223, 213, 148, 101], credit_account)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `calcTotalValue` (0xc7de38a6) function"]
        pub fn calc_total_value(
            &self,
            credit_account: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<
            M,
            (ethers::core::types::U256, ethers::core::types::U256),
        > {
            self.0
                .method_hash([199, 222, 56, 166], credit_account)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `closeCreditAccount` (0x5f73fbec) function"]
        pub fn close_credit_account(
            &self,
            to: ethers::core::types::Address,
            skip_token_mask: ethers::core::types::U256,
            convert_weth: bool,
            calls: ::std::vec::Vec<MultiCall>,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [95, 115, 251, 236],
                    (to, skip_token_mask, convert_weth, calls),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `contractToAdapter` (0xfdd57645) function"]
        pub fn contract_to_adapter(
            &self,
            p0: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([253, 213, 118, 69], p0)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `creditManager` (0xc12c21c0) function"]
        pub fn credit_manager(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([193, 44, 33, 192], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `decreaseDebt` (0x2a7ba1f7) function"]
        pub fn decrease_debt(
            &self,
            amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([42, 123, 161, 247], amount)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `degenMode` (0xdf1a701c) function"]
        pub fn degen_mode(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([223, 26, 112, 28], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `degenNFT` (0x9408b63f) function"]
        pub fn degen_nft(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([148, 8, 182, 63], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hasOpenedCreditAccount` (0x256ac915) function"]
        pub fn has_opened_credit_account(
            &self,
            borrower: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([37, 106, 201, 21], borrower)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `increaseDebt` (0x2b7c7b11) function"]
        pub fn increase_debt(
            &self,
            amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([43, 124, 123, 17], amount)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `isIncreaseDebtForbidden` (0x43ac1819) function"]
        pub fn is_increase_debt_forbidden(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([67, 172, 24, 25], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `isTokenAllowed` (0xf9eaee0d) function"]
        pub fn is_token_allowed(
            &self,
            token: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([249, 234, 238, 13], token)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `liquidateCreditAccount` (0x5d91a0e0) function"]
        pub fn liquidate_credit_account(
            &self,
            borrower: ethers::core::types::Address,
            to: ethers::core::types::Address,
            skip_token_mask: ethers::core::types::U256,
            convert_weth: bool,
            calls: ::std::vec::Vec<MultiCall>,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [93, 145, 160, 224],
                    (borrower, to, skip_token_mask, convert_weth, calls),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `multicall` (0xcaa5c23f) function"]
        pub fn multicall(
            &self,
            calls: ::std::vec::Vec<MultiCall>,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([202, 165, 194, 63], calls)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `openCreditAccount` (0x5288ba4b) function"]
        pub fn open_credit_account(
            &self,
            amount: ethers::core::types::U256,
            on_behalf_of: ethers::core::types::Address,
            leverage_factor: ethers::core::types::U256,
            referral_code: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [82, 136, 186, 75],
                    (amount, on_behalf_of, leverage_factor, referral_code),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `openCreditAccountMulticall` (0x47639fa8) function"]
        pub fn open_credit_account_multicall(
            &self,
            borrowed_amount: ethers::core::types::U256,
            on_behalf_of: ethers::core::types::Address,
            calls: ::std::vec::Vec<MultiCall>,
            referral_code: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [71, 99, 159, 168],
                    (borrowed_amount, on_behalf_of, calls, referral_code),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setContractToAdapter` (0x28a144f2) function"]
        pub fn set_contract_to_adapter(
            &self,
            adapter: ethers::core::types::Address,
            contract: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([40, 161, 68, 242], (adapter, contract))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setDegenMode` (0xcf64ffdf) function"]
        pub fn set_degen_mode(
            &self,
            mode: bool,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([207, 100, 255, 223], mode)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setIncreaseDebtForbidden` (0xffd9b907) function"]
        pub fn set_increase_debt_forbidden(
            &self,
            mode: bool,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([255, 217, 185, 7], mode)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `totalOpenedAccountsDegenMode` (0xce03841e) function"]
        pub fn total_opened_accounts_degen_mode(
            &self,
            p0: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([206, 3, 132, 30], p0)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `transferAccountOwnership` (0x5019e20a) function"]
        pub fn transfer_account_ownership(
            &self,
            to: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([80, 25, 226, 10], to)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `transfersAllowed` (0xd9ccbec1) function"]
        pub fn transfers_allowed(
            &self,
            p0: ethers::core::types::Address,
            p1: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([217, 204, 190, 193], (p0, p1))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `underlying` (0x6f307dc3) function"]
        pub fn underlying(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([111, 48, 125, 195], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `version` (0x54fd4d50) function"]
        pub fn version(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([84, 253, 77, 80], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `wethAddress` (0x4f0e0ef3) function"]
        pub fn weth_address(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([79, 14, 14, 243], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `AddCollateral` event"]
        pub fn add_collateral_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, AddCollateralFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `CloseCreditAccount` event"]
        pub fn close_credit_account_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, CloseCreditAccountFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `DecreaseBorrowedAmount` event"]
        pub fn decrease_borrowed_amount_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, DecreaseBorrowedAmountFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `IncreaseBorrowedAmount` event"]
        pub fn increase_borrowed_amount_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, IncreaseBorrowedAmountFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `LiquidateCreditAccount` event"]
        pub fn liquidate_credit_account_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LiquidateCreditAccountFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `MultiCallFinished` event"]
        pub fn multi_call_finished_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, MultiCallFinishedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `MultiCallStarted` event"]
        pub fn multi_call_started_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, MultiCallStartedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `OpenCreditAccount` event"]
        pub fn open_credit_account_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, OpenCreditAccountFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TransferAccount` event"]
        pub fn transfer_account_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TransferAccountFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TransferAccountAllowed` event"]
        pub fn transfer_account_allowed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TransferAccountAllowedFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, CreditFacadeEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for CreditFacade<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "AddCollateral", abi = "AddCollateral(address,address,uint256)")]
    pub struct AddCollateralFilter {
        #[ethevent(indexed)]
        pub on_behalf_of: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub token: ethers::core::types::Address,
        pub value: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "CloseCreditAccount",
        abi = "CloseCreditAccount(address,address)"
    )]
    pub struct CloseCreditAccountFilter {
        #[ethevent(indexed)]
        pub owner: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub to: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "DecreaseBorrowedAmount",
        abi = "DecreaseBorrowedAmount(address,uint256)"
    )]
    pub struct DecreaseBorrowedAmountFilter {
        #[ethevent(indexed)]
        pub borrower: ethers::core::types::Address,
        pub amount: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "IncreaseBorrowedAmount",
        abi = "IncreaseBorrowedAmount(address,uint256)"
    )]
    pub struct IncreaseBorrowedAmountFilter {
        #[ethevent(indexed)]
        pub borrower: ethers::core::types::Address,
        pub amount: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "LiquidateCreditAccount",
        abi = "LiquidateCreditAccount(address,address,address,uint256)"
    )]
    pub struct LiquidateCreditAccountFilter {
        #[ethevent(indexed)]
        pub owner: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub liquidator: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub to: ethers::core::types::Address,
        pub remaining_funds: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "MultiCallFinished", abi = "MultiCallFinished()")]
    pub struct MultiCallFinishedFilter();
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "MultiCallStarted", abi = "MultiCallStarted(address)")]
    pub struct MultiCallStartedFilter {
        #[ethevent(indexed)]
        pub borrower: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "OpenCreditAccount",
        abi = "OpenCreditAccount(address,address,uint256,uint256)"
    )]
    pub struct OpenCreditAccountFilter {
        #[ethevent(indexed)]
        pub on_behalf_of: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub credit_account: ethers::core::types::Address,
        pub borrow_amount: ethers::core::types::U256,
        pub referral_code: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "TransferAccount", abi = "TransferAccount(address,address)")]
    pub struct TransferAccountFilter {
        #[ethevent(indexed)]
        pub old_owner: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub new_owner: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "TransferAccountAllowed",
        abi = "TransferAccountAllowed(address,address,bool)"
    )]
    pub struct TransferAccountAllowedFilter {
        #[ethevent(indexed)]
        pub from: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub to: ethers::core::types::Address,
        pub state: bool,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum CreditFacadeEvents {
        AddCollateralFilter(AddCollateralFilter),
        CloseCreditAccountFilter(CloseCreditAccountFilter),
        DecreaseBorrowedAmountFilter(DecreaseBorrowedAmountFilter),
        IncreaseBorrowedAmountFilter(IncreaseBorrowedAmountFilter),
        LiquidateCreditAccountFilter(LiquidateCreditAccountFilter),
        MultiCallFinishedFilter(MultiCallFinishedFilter),
        MultiCallStartedFilter(MultiCallStartedFilter),
        OpenCreditAccountFilter(OpenCreditAccountFilter),
        TransferAccountFilter(TransferAccountFilter),
        TransferAccountAllowedFilter(TransferAccountAllowedFilter),
    }
    impl ethers::contract::EthLogDecode for CreditFacadeEvents {
        fn decode_log(log: &ethers::core::abi::RawLog) -> Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = AddCollateralFilter::decode_log(log) {
                return Ok(CreditFacadeEvents::AddCollateralFilter(decoded));
            }
            if let Ok(decoded) = CloseCreditAccountFilter::decode_log(log) {
                return Ok(CreditFacadeEvents::CloseCreditAccountFilter(decoded));
            }
            if let Ok(decoded) = DecreaseBorrowedAmountFilter::decode_log(log) {
                return Ok(CreditFacadeEvents::DecreaseBorrowedAmountFilter(decoded));
            }
            if let Ok(decoded) = IncreaseBorrowedAmountFilter::decode_log(log) {
                return Ok(CreditFacadeEvents::IncreaseBorrowedAmountFilter(decoded));
            }
            if let Ok(decoded) = LiquidateCreditAccountFilter::decode_log(log) {
                return Ok(CreditFacadeEvents::LiquidateCreditAccountFilter(decoded));
            }
            if let Ok(decoded) = MultiCallFinishedFilter::decode_log(log) {
                return Ok(CreditFacadeEvents::MultiCallFinishedFilter(decoded));
            }
            if let Ok(decoded) = MultiCallStartedFilter::decode_log(log) {
                return Ok(CreditFacadeEvents::MultiCallStartedFilter(decoded));
            }
            if let Ok(decoded) = OpenCreditAccountFilter::decode_log(log) {
                return Ok(CreditFacadeEvents::OpenCreditAccountFilter(decoded));
            }
            if let Ok(decoded) = TransferAccountFilter::decode_log(log) {
                return Ok(CreditFacadeEvents::TransferAccountFilter(decoded));
            }
            if let Ok(decoded) = TransferAccountAllowedFilter::decode_log(log) {
                return Ok(CreditFacadeEvents::TransferAccountAllowedFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for CreditFacadeEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                CreditFacadeEvents::AddCollateralFilter(element) => element.fmt(f),
                CreditFacadeEvents::CloseCreditAccountFilter(element) => element.fmt(f),
                CreditFacadeEvents::DecreaseBorrowedAmountFilter(element) => element.fmt(f),
                CreditFacadeEvents::IncreaseBorrowedAmountFilter(element) => element.fmt(f),
                CreditFacadeEvents::LiquidateCreditAccountFilter(element) => element.fmt(f),
                CreditFacadeEvents::MultiCallFinishedFilter(element) => element.fmt(f),
                CreditFacadeEvents::MultiCallStartedFilter(element) => element.fmt(f),
                CreditFacadeEvents::OpenCreditAccountFilter(element) => element.fmt(f),
                CreditFacadeEvents::TransferAccountFilter(element) => element.fmt(f),
                CreditFacadeEvents::TransferAccountAllowedFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `addCollateral`function with signature `addCollateral(address,address,uint256)` and selector `[89, 120, 16, 52]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "addCollateral", abi = "addCollateral(address,address,uint256)")]
    pub struct AddCollateralCall {
        pub on_behalf_of: ethers::core::types::Address,
        pub token: ethers::core::types::Address,
        pub amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `approve`function with signature `approve(address,address,uint256)` and selector `[225, 242, 28, 103]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "approve", abi = "approve(address,address,uint256)")]
    pub struct ApproveCall {
        pub target_contract: ethers::core::types::Address,
        pub token: ethers::core::types::Address,
        pub amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `approveAccountTransfers`function with signature `approveAccountTransfers(address,bool)` and selector `[95, 39, 33, 42]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "approveAccountTransfers",
        abi = "approveAccountTransfers(address,bool)"
    )]
    pub struct ApproveAccountTransfersCall {
        pub from: ethers::core::types::Address,
        pub state: bool,
    }
    #[doc = "Container type for all input parameters for the `calcCreditAccountHealthFactor`function with signature `calcCreditAccountHealthFactor(address)` and selector `[223, 213, 148, 101]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "calcCreditAccountHealthFactor",
        abi = "calcCreditAccountHealthFactor(address)"
    )]
    pub struct CalcCreditAccountHealthFactorCall {
        pub credit_account: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `calcTotalValue`function with signature `calcTotalValue(address)` and selector `[199, 222, 56, 166]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "calcTotalValue", abi = "calcTotalValue(address)")]
    pub struct CalcTotalValueCall {
        pub credit_account: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `closeCreditAccount`function with signature `closeCreditAccount(address,uint256,bool,(address,bytes)[])` and selector `[95, 115, 251, 236]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "closeCreditAccount",
        abi = "closeCreditAccount(address,uint256,bool,(address,bytes)[])"
    )]
    pub struct CloseCreditAccountCall {
        pub to: ethers::core::types::Address,
        pub skip_token_mask: ethers::core::types::U256,
        pub convert_weth: bool,
        pub calls: ::std::vec::Vec<MultiCall>,
    }
    #[doc = "Container type for all input parameters for the `contractToAdapter`function with signature `contractToAdapter(address)` and selector `[253, 213, 118, 69]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "contractToAdapter", abi = "contractToAdapter(address)")]
    pub struct ContractToAdapterCall(pub ethers::core::types::Address);
    #[doc = "Container type for all input parameters for the `creditManager`function with signature `creditManager()` and selector `[193, 44, 33, 192]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "creditManager", abi = "creditManager()")]
    pub struct CreditManagerCall;
    #[doc = "Container type for all input parameters for the `decreaseDebt`function with signature `decreaseDebt(uint256)` and selector `[42, 123, 161, 247]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "decreaseDebt", abi = "decreaseDebt(uint256)")]
    pub struct DecreaseDebtCall {
        pub amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `degenMode`function with signature `degenMode()` and selector `[223, 26, 112, 28]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "degenMode", abi = "degenMode()")]
    pub struct DegenModeCall;
    #[doc = "Container type for all input parameters for the `degenNFT`function with signature `degenNFT()` and selector `[148, 8, 182, 63]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "degenNFT", abi = "degenNFT()")]
    pub struct DegenNFTCall;
    #[doc = "Container type for all input parameters for the `hasOpenedCreditAccount`function with signature `hasOpenedCreditAccount(address)` and selector `[37, 106, 201, 21]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "hasOpenedCreditAccount",
        abi = "hasOpenedCreditAccount(address)"
    )]
    pub struct HasOpenedCreditAccountCall {
        pub borrower: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `increaseDebt`function with signature `increaseDebt(uint256)` and selector `[43, 124, 123, 17]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "increaseDebt", abi = "increaseDebt(uint256)")]
    pub struct IncreaseDebtCall {
        pub amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `isIncreaseDebtForbidden`function with signature `isIncreaseDebtForbidden()` and selector `[67, 172, 24, 25]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "isIncreaseDebtForbidden", abi = "isIncreaseDebtForbidden()")]
    pub struct IsIncreaseDebtForbiddenCall;
    #[doc = "Container type for all input parameters for the `isTokenAllowed`function with signature `isTokenAllowed(address)` and selector `[249, 234, 238, 13]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "isTokenAllowed", abi = "isTokenAllowed(address)")]
    pub struct IsTokenAllowedCall {
        pub token: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `liquidateCreditAccount`function with signature `liquidateCreditAccount(address,address,uint256,bool,(address,bytes)[])` and selector `[93, 145, 160, 224]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "liquidateCreditAccount",
        abi = "liquidateCreditAccount(address,address,uint256,bool,(address,bytes)[])"
    )]
    pub struct LiquidateCreditAccountCall {
        pub borrower: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub skip_token_mask: ethers::core::types::U256,
        pub convert_weth: bool,
        pub calls: ::std::vec::Vec<MultiCall>,
    }
    #[doc = "Container type for all input parameters for the `multicall`function with signature `multicall((address,bytes)[])` and selector `[202, 165, 194, 63]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "multicall", abi = "multicall((address,bytes)[])")]
    pub struct MulticallCall {
        pub calls: ::std::vec::Vec<MultiCall>,
    }
    #[doc = "Container type for all input parameters for the `openCreditAccount`function with signature `openCreditAccount(uint256,address,uint256,uint256)` and selector `[82, 136, 186, 75]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "openCreditAccount",
        abi = "openCreditAccount(uint256,address,uint256,uint256)"
    )]
    pub struct OpenCreditAccountCall {
        pub amount: ethers::core::types::U256,
        pub on_behalf_of: ethers::core::types::Address,
        pub leverage_factor: ethers::core::types::U256,
        pub referral_code: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `openCreditAccountMulticall`function with signature `openCreditAccountMulticall(uint256,address,(address,bytes)[],uint256)` and selector `[71, 99, 159, 168]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "openCreditAccountMulticall",
        abi = "openCreditAccountMulticall(uint256,address,(address,bytes)[],uint256)"
    )]
    pub struct OpenCreditAccountMulticallCall {
        pub borrowed_amount: ethers::core::types::U256,
        pub on_behalf_of: ethers::core::types::Address,
        pub calls: ::std::vec::Vec<MultiCall>,
        pub referral_code: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `setContractToAdapter`function with signature `setContractToAdapter(address,address)` and selector `[40, 161, 68, 242]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "setContractToAdapter",
        abi = "setContractToAdapter(address,address)"
    )]
    pub struct SetContractToAdapterCall {
        pub adapter: ethers::core::types::Address,
        pub contract: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `setDegenMode`function with signature `setDegenMode(bool)` and selector `[207, 100, 255, 223]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "setDegenMode", abi = "setDegenMode(bool)")]
    pub struct SetDegenModeCall {
        pub mode: bool,
    }
    #[doc = "Container type for all input parameters for the `setIncreaseDebtForbidden`function with signature `setIncreaseDebtForbidden(bool)` and selector `[255, 217, 185, 7]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "setIncreaseDebtForbidden",
        abi = "setIncreaseDebtForbidden(bool)"
    )]
    pub struct SetIncreaseDebtForbiddenCall {
        pub mode: bool,
    }
    #[doc = "Container type for all input parameters for the `totalOpenedAccountsDegenMode`function with signature `totalOpenedAccountsDegenMode(address)` and selector `[206, 3, 132, 30]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "totalOpenedAccountsDegenMode",
        abi = "totalOpenedAccountsDegenMode(address)"
    )]
    pub struct TotalOpenedAccountsDegenModeCall(pub ethers::core::types::Address);
    #[doc = "Container type for all input parameters for the `transferAccountOwnership`function with signature `transferAccountOwnership(address)` and selector `[80, 25, 226, 10]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "transferAccountOwnership",
        abi = "transferAccountOwnership(address)"
    )]
    pub struct TransferAccountOwnershipCall {
        pub to: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `transfersAllowed`function with signature `transfersAllowed(address,address)` and selector `[217, 204, 190, 193]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "transfersAllowed", abi = "transfersAllowed(address,address)")]
    pub struct TransfersAllowedCall(
        pub ethers::core::types::Address,
        pub ethers::core::types::Address,
    );
    #[doc = "Container type for all input parameters for the `underlying`function with signature `underlying()` and selector `[111, 48, 125, 195]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "underlying", abi = "underlying()")]
    pub struct UnderlyingCall;
    #[doc = "Container type for all input parameters for the `version`function with signature `version()` and selector `[84, 253, 77, 80]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "version", abi = "version()")]
    pub struct VersionCall;
    #[doc = "Container type for all input parameters for the `wethAddress`function with signature `wethAddress()` and selector `[79, 14, 14, 243]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "wethAddress", abi = "wethAddress()")]
    pub struct WethAddressCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum CreditFacadeCalls {
        AddCollateral(AddCollateralCall),
        Approve(ApproveCall),
        ApproveAccountTransfers(ApproveAccountTransfersCall),
        CalcCreditAccountHealthFactor(CalcCreditAccountHealthFactorCall),
        CalcTotalValue(CalcTotalValueCall),
        CloseCreditAccount(CloseCreditAccountCall),
        ContractToAdapter(ContractToAdapterCall),
        CreditManager(CreditManagerCall),
        DecreaseDebt(DecreaseDebtCall),
        DegenMode(DegenModeCall),
        DegenNFT(DegenNFTCall),
        HasOpenedCreditAccount(HasOpenedCreditAccountCall),
        IncreaseDebt(IncreaseDebtCall),
        IsIncreaseDebtForbidden(IsIncreaseDebtForbiddenCall),
        IsTokenAllowed(IsTokenAllowedCall),
        LiquidateCreditAccount(LiquidateCreditAccountCall),
        Multicall(MulticallCall),
        OpenCreditAccount(OpenCreditAccountCall),
        OpenCreditAccountMulticall(OpenCreditAccountMulticallCall),
        SetContractToAdapter(SetContractToAdapterCall),
        SetDegenMode(SetDegenModeCall),
        SetIncreaseDebtForbidden(SetIncreaseDebtForbiddenCall),
        TotalOpenedAccountsDegenMode(TotalOpenedAccountsDegenModeCall),
        TransferAccountOwnership(TransferAccountOwnershipCall),
        TransfersAllowed(TransfersAllowedCall),
        Underlying(UnderlyingCall),
        Version(VersionCall),
        WethAddress(WethAddressCall),
    }
    impl ethers::core::abi::AbiDecode for CreditFacadeCalls {
        fn decode(data: impl AsRef<[u8]>) -> Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <AddCollateralCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditFacadeCalls::AddCollateral(decoded));
            }
            if let Ok(decoded) =
                <ApproveCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditFacadeCalls::Approve(decoded));
            }
            if let Ok(decoded) =
                <ApproveAccountTransfersCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditFacadeCalls::ApproveAccountTransfers(decoded));
            }
            if let Ok(decoded) =
                <CalcCreditAccountHealthFactorCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CreditFacadeCalls::CalcCreditAccountHealthFactor(decoded));
            }
            if let Ok(decoded) =
                <CalcTotalValueCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditFacadeCalls::CalcTotalValue(decoded));
            }
            if let Ok(decoded) =
                <CloseCreditAccountCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditFacadeCalls::CloseCreditAccount(decoded));
            }
            if let Ok(decoded) =
                <ContractToAdapterCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditFacadeCalls::ContractToAdapter(decoded));
            }
            if let Ok(decoded) =
                <CreditManagerCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditFacadeCalls::CreditManager(decoded));
            }
            if let Ok(decoded) =
                <DecreaseDebtCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditFacadeCalls::DecreaseDebt(decoded));
            }
            if let Ok(decoded) =
                <DegenModeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditFacadeCalls::DegenMode(decoded));
            }
            if let Ok(decoded) =
                <DegenNFTCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditFacadeCalls::DegenNFT(decoded));
            }
            if let Ok(decoded) =
                <HasOpenedCreditAccountCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditFacadeCalls::HasOpenedCreditAccount(decoded));
            }
            if let Ok(decoded) =
                <IncreaseDebtCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditFacadeCalls::IncreaseDebt(decoded));
            }
            if let Ok(decoded) =
                <IsIncreaseDebtForbiddenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditFacadeCalls::IsIncreaseDebtForbidden(decoded));
            }
            if let Ok(decoded) =
                <IsTokenAllowedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditFacadeCalls::IsTokenAllowed(decoded));
            }
            if let Ok(decoded) =
                <LiquidateCreditAccountCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditFacadeCalls::LiquidateCreditAccount(decoded));
            }
            if let Ok(decoded) =
                <MulticallCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditFacadeCalls::Multicall(decoded));
            }
            if let Ok(decoded) =
                <OpenCreditAccountCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditFacadeCalls::OpenCreditAccount(decoded));
            }
            if let Ok(decoded) =
                <OpenCreditAccountMulticallCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CreditFacadeCalls::OpenCreditAccountMulticall(decoded));
            }
            if let Ok(decoded) =
                <SetContractToAdapterCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditFacadeCalls::SetContractToAdapter(decoded));
            }
            if let Ok(decoded) =
                <SetDegenModeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditFacadeCalls::SetDegenMode(decoded));
            }
            if let Ok(decoded) =
                <SetIncreaseDebtForbiddenCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CreditFacadeCalls::SetIncreaseDebtForbidden(decoded));
            }
            if let Ok(decoded) =
                <TotalOpenedAccountsDegenModeCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CreditFacadeCalls::TotalOpenedAccountsDegenMode(decoded));
            }
            if let Ok(decoded) =
                <TransferAccountOwnershipCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CreditFacadeCalls::TransferAccountOwnership(decoded));
            }
            if let Ok(decoded) =
                <TransfersAllowedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditFacadeCalls::TransfersAllowed(decoded));
            }
            if let Ok(decoded) =
                <UnderlyingCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditFacadeCalls::Underlying(decoded));
            }
            if let Ok(decoded) =
                <VersionCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditFacadeCalls::Version(decoded));
            }
            if let Ok(decoded) =
                <WethAddressCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditFacadeCalls::WethAddress(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for CreditFacadeCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                CreditFacadeCalls::AddCollateral(element) => element.encode(),
                CreditFacadeCalls::Approve(element) => element.encode(),
                CreditFacadeCalls::ApproveAccountTransfers(element) => element.encode(),
                CreditFacadeCalls::CalcCreditAccountHealthFactor(element) => element.encode(),
                CreditFacadeCalls::CalcTotalValue(element) => element.encode(),
                CreditFacadeCalls::CloseCreditAccount(element) => element.encode(),
                CreditFacadeCalls::ContractToAdapter(element) => element.encode(),
                CreditFacadeCalls::CreditManager(element) => element.encode(),
                CreditFacadeCalls::DecreaseDebt(element) => element.encode(),
                CreditFacadeCalls::DegenMode(element) => element.encode(),
                CreditFacadeCalls::DegenNFT(element) => element.encode(),
                CreditFacadeCalls::HasOpenedCreditAccount(element) => element.encode(),
                CreditFacadeCalls::IncreaseDebt(element) => element.encode(),
                CreditFacadeCalls::IsIncreaseDebtForbidden(element) => element.encode(),
                CreditFacadeCalls::IsTokenAllowed(element) => element.encode(),
                CreditFacadeCalls::LiquidateCreditAccount(element) => element.encode(),
                CreditFacadeCalls::Multicall(element) => element.encode(),
                CreditFacadeCalls::OpenCreditAccount(element) => element.encode(),
                CreditFacadeCalls::OpenCreditAccountMulticall(element) => element.encode(),
                CreditFacadeCalls::SetContractToAdapter(element) => element.encode(),
                CreditFacadeCalls::SetDegenMode(element) => element.encode(),
                CreditFacadeCalls::SetIncreaseDebtForbidden(element) => element.encode(),
                CreditFacadeCalls::TotalOpenedAccountsDegenMode(element) => element.encode(),
                CreditFacadeCalls::TransferAccountOwnership(element) => element.encode(),
                CreditFacadeCalls::TransfersAllowed(element) => element.encode(),
                CreditFacadeCalls::Underlying(element) => element.encode(),
                CreditFacadeCalls::Version(element) => element.encode(),
                CreditFacadeCalls::WethAddress(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for CreditFacadeCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                CreditFacadeCalls::AddCollateral(element) => element.fmt(f),
                CreditFacadeCalls::Approve(element) => element.fmt(f),
                CreditFacadeCalls::ApproveAccountTransfers(element) => element.fmt(f),
                CreditFacadeCalls::CalcCreditAccountHealthFactor(element) => element.fmt(f),
                CreditFacadeCalls::CalcTotalValue(element) => element.fmt(f),
                CreditFacadeCalls::CloseCreditAccount(element) => element.fmt(f),
                CreditFacadeCalls::ContractToAdapter(element) => element.fmt(f),
                CreditFacadeCalls::CreditManager(element) => element.fmt(f),
                CreditFacadeCalls::DecreaseDebt(element) => element.fmt(f),
                CreditFacadeCalls::DegenMode(element) => element.fmt(f),
                CreditFacadeCalls::DegenNFT(element) => element.fmt(f),
                CreditFacadeCalls::HasOpenedCreditAccount(element) => element.fmt(f),
                CreditFacadeCalls::IncreaseDebt(element) => element.fmt(f),
                CreditFacadeCalls::IsIncreaseDebtForbidden(element) => element.fmt(f),
                CreditFacadeCalls::IsTokenAllowed(element) => element.fmt(f),
                CreditFacadeCalls::LiquidateCreditAccount(element) => element.fmt(f),
                CreditFacadeCalls::Multicall(element) => element.fmt(f),
                CreditFacadeCalls::OpenCreditAccount(element) => element.fmt(f),
                CreditFacadeCalls::OpenCreditAccountMulticall(element) => element.fmt(f),
                CreditFacadeCalls::SetContractToAdapter(element) => element.fmt(f),
                CreditFacadeCalls::SetDegenMode(element) => element.fmt(f),
                CreditFacadeCalls::SetIncreaseDebtForbidden(element) => element.fmt(f),
                CreditFacadeCalls::TotalOpenedAccountsDegenMode(element) => element.fmt(f),
                CreditFacadeCalls::TransferAccountOwnership(element) => element.fmt(f),
                CreditFacadeCalls::TransfersAllowed(element) => element.fmt(f),
                CreditFacadeCalls::Underlying(element) => element.fmt(f),
                CreditFacadeCalls::Version(element) => element.fmt(f),
                CreditFacadeCalls::WethAddress(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<AddCollateralCall> for CreditFacadeCalls {
        fn from(var: AddCollateralCall) -> Self {
            CreditFacadeCalls::AddCollateral(var)
        }
    }
    impl ::std::convert::From<ApproveCall> for CreditFacadeCalls {
        fn from(var: ApproveCall) -> Self {
            CreditFacadeCalls::Approve(var)
        }
    }
    impl ::std::convert::From<ApproveAccountTransfersCall> for CreditFacadeCalls {
        fn from(var: ApproveAccountTransfersCall) -> Self {
            CreditFacadeCalls::ApproveAccountTransfers(var)
        }
    }
    impl ::std::convert::From<CalcCreditAccountHealthFactorCall> for CreditFacadeCalls {
        fn from(var: CalcCreditAccountHealthFactorCall) -> Self {
            CreditFacadeCalls::CalcCreditAccountHealthFactor(var)
        }
    }
    impl ::std::convert::From<CalcTotalValueCall> for CreditFacadeCalls {
        fn from(var: CalcTotalValueCall) -> Self {
            CreditFacadeCalls::CalcTotalValue(var)
        }
    }
    impl ::std::convert::From<CloseCreditAccountCall> for CreditFacadeCalls {
        fn from(var: CloseCreditAccountCall) -> Self {
            CreditFacadeCalls::CloseCreditAccount(var)
        }
    }
    impl ::std::convert::From<ContractToAdapterCall> for CreditFacadeCalls {
        fn from(var: ContractToAdapterCall) -> Self {
            CreditFacadeCalls::ContractToAdapter(var)
        }
    }
    impl ::std::convert::From<CreditManagerCall> for CreditFacadeCalls {
        fn from(var: CreditManagerCall) -> Self {
            CreditFacadeCalls::CreditManager(var)
        }
    }
    impl ::std::convert::From<DecreaseDebtCall> for CreditFacadeCalls {
        fn from(var: DecreaseDebtCall) -> Self {
            CreditFacadeCalls::DecreaseDebt(var)
        }
    }
    impl ::std::convert::From<DegenModeCall> for CreditFacadeCalls {
        fn from(var: DegenModeCall) -> Self {
            CreditFacadeCalls::DegenMode(var)
        }
    }
    impl ::std::convert::From<DegenNFTCall> for CreditFacadeCalls {
        fn from(var: DegenNFTCall) -> Self {
            CreditFacadeCalls::DegenNFT(var)
        }
    }
    impl ::std::convert::From<HasOpenedCreditAccountCall> for CreditFacadeCalls {
        fn from(var: HasOpenedCreditAccountCall) -> Self {
            CreditFacadeCalls::HasOpenedCreditAccount(var)
        }
    }
    impl ::std::convert::From<IncreaseDebtCall> for CreditFacadeCalls {
        fn from(var: IncreaseDebtCall) -> Self {
            CreditFacadeCalls::IncreaseDebt(var)
        }
    }
    impl ::std::convert::From<IsIncreaseDebtForbiddenCall> for CreditFacadeCalls {
        fn from(var: IsIncreaseDebtForbiddenCall) -> Self {
            CreditFacadeCalls::IsIncreaseDebtForbidden(var)
        }
    }
    impl ::std::convert::From<IsTokenAllowedCall> for CreditFacadeCalls {
        fn from(var: IsTokenAllowedCall) -> Self {
            CreditFacadeCalls::IsTokenAllowed(var)
        }
    }
    impl ::std::convert::From<LiquidateCreditAccountCall> for CreditFacadeCalls {
        fn from(var: LiquidateCreditAccountCall) -> Self {
            CreditFacadeCalls::LiquidateCreditAccount(var)
        }
    }
    impl ::std::convert::From<MulticallCall> for CreditFacadeCalls {
        fn from(var: MulticallCall) -> Self {
            CreditFacadeCalls::Multicall(var)
        }
    }
    impl ::std::convert::From<OpenCreditAccountCall> for CreditFacadeCalls {
        fn from(var: OpenCreditAccountCall) -> Self {
            CreditFacadeCalls::OpenCreditAccount(var)
        }
    }
    impl ::std::convert::From<OpenCreditAccountMulticallCall> for CreditFacadeCalls {
        fn from(var: OpenCreditAccountMulticallCall) -> Self {
            CreditFacadeCalls::OpenCreditAccountMulticall(var)
        }
    }
    impl ::std::convert::From<SetContractToAdapterCall> for CreditFacadeCalls {
        fn from(var: SetContractToAdapterCall) -> Self {
            CreditFacadeCalls::SetContractToAdapter(var)
        }
    }
    impl ::std::convert::From<SetDegenModeCall> for CreditFacadeCalls {
        fn from(var: SetDegenModeCall) -> Self {
            CreditFacadeCalls::SetDegenMode(var)
        }
    }
    impl ::std::convert::From<SetIncreaseDebtForbiddenCall> for CreditFacadeCalls {
        fn from(var: SetIncreaseDebtForbiddenCall) -> Self {
            CreditFacadeCalls::SetIncreaseDebtForbidden(var)
        }
    }
    impl ::std::convert::From<TotalOpenedAccountsDegenModeCall> for CreditFacadeCalls {
        fn from(var: TotalOpenedAccountsDegenModeCall) -> Self {
            CreditFacadeCalls::TotalOpenedAccountsDegenMode(var)
        }
    }
    impl ::std::convert::From<TransferAccountOwnershipCall> for CreditFacadeCalls {
        fn from(var: TransferAccountOwnershipCall) -> Self {
            CreditFacadeCalls::TransferAccountOwnership(var)
        }
    }
    impl ::std::convert::From<TransfersAllowedCall> for CreditFacadeCalls {
        fn from(var: TransfersAllowedCall) -> Self {
            CreditFacadeCalls::TransfersAllowed(var)
        }
    }
    impl ::std::convert::From<UnderlyingCall> for CreditFacadeCalls {
        fn from(var: UnderlyingCall) -> Self {
            CreditFacadeCalls::Underlying(var)
        }
    }
    impl ::std::convert::From<VersionCall> for CreditFacadeCalls {
        fn from(var: VersionCall) -> Self {
            CreditFacadeCalls::Version(var)
        }
    }
    impl ::std::convert::From<WethAddressCall> for CreditFacadeCalls {
        fn from(var: WethAddressCall) -> Self {
            CreditFacadeCalls::WethAddress(var)
        }
    }
}
