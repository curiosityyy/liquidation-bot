pub use convexv1baserewardpooladapter_mod::*;
#[allow(clippy::too_many_arguments)]
mod convexv1baserewardpooladapter_mod {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "ConvexV1BaseRewardPoolAdapter was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static CONVEXV1BASEREWARDPOOLADAPTER_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creditManager\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_baseRewardPool\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"NotImplementedException\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]}],\"type\":\"error\",\"name\":\"TokenIsNotAddedToCreditManagerException\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"ZeroAddressException\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"_gearboxAdapterType\",\"outputs\":[{\"internalType\":\"enum AdapterType\",\"name\":\"\",\"type\":\"uint8\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"_gearboxAdapterVersion\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"creditFacade\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"creditManager\",\"outputs\":[{\"internalType\":\"contract ICreditManager\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"crv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"currentRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"curveLPtoken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"cvx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"cvxLPtoken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"donate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"extraReward1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"extraReward2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"extraRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"extraRewardsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"_claimExtras\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"historicalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"newRewardRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"queuedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"rewardManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"stakeAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"stakeFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"stakedPhantomToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"targetContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"claim\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"claim\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdrawAll\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"claim\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdrawAllAndUnwrap\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"claim\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdrawAndUnwrap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static CONVEXV1BASEREWARDPOOLADAPTER_BYTECODE: ethers::contract::Lazy<
        ethers::core::types::Bytes,
    > = ethers::contract::Lazy::new(|| {
        "0x6101a06040523480156200001257600080fd5b50604051620035eb380380620035eb8339810160408190526200003591620009fb565b81816001600160a01b03821615806200005557506001600160a01b038116155b156200007457604051635919af9760e11b815260040160405180910390fd5b6001600160a01b038216608081905260408051632f7a188160e01b81529051632f7a1881916004808201926020929091908290030181865afa158015620000bf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000e5919062000a3a565b6001600160a01b0390811660a052600080546001600160a01b0319169282169290921790915560018055604080516372f702f360e01b8152905191841692506372f702f39160048083019260209291908290030181865afa1580156200014f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000175919062000a3a565b6001600160a01b031660e08190526040518291906200019490620009c2565b6001600160a01b03928316815291166020820152604001604051809103906000f080158015620001c8573d6000803e3d6000fd5b506001600160a01b0316610100816001600160a01b0316815250506000806000836001600160a01b031663d55a23f46040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000227573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200024d919062000a61565b9050600181106200040657604051632061aa2360e11b8152600060048201526001600160a01b038516906340c3544690602401602060405180830381865afa1580156200029e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002c4919062000a3a565b6001600160a01b031663f7c618c16040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000302573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000328919062000a3a565b9250600281106200040657604051632061aa2360e11b8152600160048201526001600160a01b038516906340c3544690602401602060405180830381865afa15801562000379573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200039f919062000a3a565b6001600160a01b031663f7c618c16040518163ffffffff1660e01b8152600401602060405180830381865afa158015620003dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000403919062000a3a565b91505b6001600160a01b0380841661012052828116610140526040805163570ca73560e01b8152905160009287169163570ca7359160048083019260209291908290030181865afa1580156200045d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000483919062000a3a565b9050806001600160a01b0316636a4874a16040518163ffffffff1660e01b8152600401602060405180830381865afa158015620004c4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004ea919062000a3a565b6001600160a01b0316610160816001600160a01b031681525050806001600160a01b031663075461726040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000543573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000569919062000a3a565b6001600160a01b0316610180816001600160a01b0316815250506000816001600160a01b0316631526fe27876001600160a01b031663f10684546040518163ffffffff1660e01b8152600401602060405180830381865afa158015620005d3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005f9919062000a61565b6040518263ffffffff1660e01b81526004016200061891815260200190565b60c060405180830381865afa15801562000636573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200065c919062000a8c565b80516001600160a01b0390811660c05260805161016051604051630f67c5bd60e41b81529083166004820152929350169063f67c5bd090602401602060405180830381865afa158015620006b4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006da919062000a61565b6200070d5761016051604051632262b1b560e21b81526001600160a01b0390911660048201526024015b60405180910390fd5b60805161018051604051630f67c5bd60e41b81526001600160a01b03918216600482015291169063f67c5bd090602401602060405180830381865afa1580156200075b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000781919062000a61565b620007b05761018051604051632262b1b560e21b81526001600160a01b03909116600482015260240162000704565b60805160c051604051630f67c5bd60e41b81526001600160a01b03918216600482015291169063f67c5bd090602401602060405180830381865afa158015620007fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000823919062000a61565b620008515760c051604051632262b1b560e21b81526001600160a01b03909116600482015260240162000704565b6001600160a01b03851615801590620008d85750608051604051630f67c5bd60e41b81526001600160a01b0387811660048301529091169063f67c5bd090602401602060405180830381865afa158015620008b0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008d6919062000a61565b155b156200090357604051632262b1b560e21b81526001600160a01b038616600482015260240162000704565b6001600160a01b038416158015906200098a5750608051604051630f67c5bd60e41b81526001600160a01b0386811660048301529091169063f67c5bd090602401602060405180830381865afa15801562000962573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000988919062000a61565b155b15620009b557604051632262b1b560e21b81526001600160a01b038516600482015260240162000704565b5050505050505062000b46565b610aae8062002b3d83390190565b6001600160a01b0381168114620009e657600080fd5b50565b8051620009f681620009d0565b919050565b6000806040838503121562000a0f57600080fd5b825162000a1c81620009d0565b602084015190925062000a2f81620009d0565b809150509250929050565b60006020828403121562000a4d57600080fd5b815162000a5a81620009d0565b9392505050565b60006020828403121562000a7457600080fd5b5051919050565b80518015158114620009f657600080fd5b600060c0828403121562000a9f57600080fd5b60405160c081016001600160401b038111828210171562000ad057634e487b7160e01b600052604160045260246000fd5b60405262000ade83620009e9565b815262000aee60208401620009e9565b602082015262000b0160408401620009e9565b604082015262000b1460608401620009e9565b606082015262000b2760808401620009e9565b608082015262000b3a60a0840162000a7b565b60a08201529392505050565b60805160a05160c05160e0516101005161012051610140516101605161018051611ebb62000c826000396000818161047b015261137b0152600081816103d001526112da0152600081816104c9015281816114df015261152d0152600081816105a401528181611403015261145a01526000818161030601528181610df001528181610ed30152818161125701526116480152600081816104f001528181610dcf01528181610eb201526112780152600081816104a20152611669015260008181610358015281816118840152611a2c01526000818161053d0152818161090c01528181610995015281816111e401528181611302015281816113a30152818161148201528181611555015281816115cd015281816116ca015281816118170152818161199e01528181611a8e0152611b160152611ebb6000f3fe608060405234801561001057600080fd5b506004361061027e5760003560e01c80637b0a47ee1161015c578063c12c21c0116100ce578063da5b383f11610087578063da5b383f1461059f578063df136d65146105c6578063ebe2b12b146105ce578063f1068454146105d6578063f14faf6f146105de578063f7c618c1146105f257600080fd5b8063c12c21c014610538578063c32e72021461055f578063c8f33c9114610572578063cd3daf9d1461057a578063ce30bbdb14610582578063d55a23f41461059757600080fd5b8063923c1d6111610120578063923c1d6114610476578063927188d91461049d57806397c3413b146104c457806399253ac0146104eb578063a694fc3a14610512578063bd90df701461052557600080fd5b80637b0a47ee1461044357806380faa57d1461044b5780638b876347146104535780638dcb406114610466578063901a7d531461046e57600080fd5b80633d18b912116101f55780636a4874a1116101b95780636a4874a1146103cb5780636c8bcee8146103f25780637050ccd9146103fa57806370a082311461040d57806372f702f31461042057806378aa73a41461042857600080fd5b80633d18b9121461038d57806340c354461461039557806349f039a2146103a8578063570ca735146103bb57806363d38c3b146103c357600080fd5b80631c1c6fe5116102475780631c1c6fe5146102ec57806320b2c15114610301578063262d3d6d146103285780632ee40908146103305780632f7a18811461035357806338d074361461037a57600080fd5b80628cc262146102835780630700037d146102a95780630f4ef8a6146102bc5780630fb5a6b4146102dc57806318160ddd146102e4575b600080fd5b610296610291366004611b93565b6105fa565b6040519081526020015b60405180910390f35b6102966102b7366004611b93565b61066e565b6102c46106a1565b6040516001600160a01b0390911681526020016102a0565b61029661071e565b610296610796565b6102ff6102fa366004611bbe565b6107ea565b005b6102c47f000000000000000000000000000000000000000000000000000000000000000081565b610296610830565b61034361033e366004611bdb565b610884565b60405190151581526020016102a0565b6102c47f000000000000000000000000000000000000000000000000000000000000000081565b610343610388366004611c07565b61089f565b6103436108ea565b6102c46103a3366004611c37565b610a2a565b6102ff6103b6366004611bbe565b610a98565b6102c4610add565b610296610b31565b6102c47f000000000000000000000000000000000000000000000000000000000000000081565b610296610b85565b610343610408366004611c50565b610bd9565b61029661041b366004611b93565b610c66565b6102c4610c99565b610430600181565b60405161ffff90911681526020016102a0565b610296610ced565b610296610d41565b610296610461366004611b93565b610d95565b610343610dc8565b610296610e57565b6102c47f000000000000000000000000000000000000000000000000000000000000000081565b6102c47f000000000000000000000000000000000000000000000000000000000000000081565b6102c47f000000000000000000000000000000000000000000000000000000000000000081565b6102c47f000000000000000000000000000000000000000000000000000000000000000081565b610343610520366004611c37565b610eab565b6000546102c4906001600160a01b031681565b6102c47f000000000000000000000000000000000000000000000000000000000000000081565b61034361056d366004611c07565b610f32565b610296610f76565b610296610fca565b61058a600a81565b6040516102a09190611c7e565b61029661101e565b6102c47f000000000000000000000000000000000000000000000000000000000000000081565b610296611072565b6102966110c6565b61029661111a565b6103436105ec366004611c37565b50600090565b6102c461116e565b600080546040516246613160e11b81526001600160a01b03848116600483015290911690628cc262906024015b602060405180830381865afa158015610644573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106689190611ca6565b92915050565b60008054604051630700037d60e01b81526001600160a01b03848116600483015290911690630700037d90602401610627565b60008060009054906101000a90046001600160a01b03166001600160a01b0316630f4ef8a66040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107199190611cbf565b905090565b60008060009054906101000a90046001600160a01b03166001600160a01b0316630fb5a6b46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610772573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107199190611ca6565b60008060009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610772573d6000803e3d6000fd5b61082c6000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508592506111c2915050565b5050565b60008060009054906101000a90046001600160a01b03166001600160a01b031663262d3d6d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610772573d6000803e3d6000fd5b600060405163024e46f760e41b815260040160405180910390fd5b60006108e36000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508692506111c2915050565b9392505050565b604051633a562dc160e21b815233600482015260009081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e958b70490602401602060405180830381865afa158015610953573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109779190611cbf565b6000805460405163367203a560e11b81529293506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811693636ce4074a936109cf93339316913690600401611cdc565b6000604051808303816000875af11580156109ee573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a169190810190611d6e565b50610a228160016112bb565b600191505090565b60008054604051632061aa2360e11b8152600481018490526001600160a01b03909116906340c3544690602401602060405180830381865afa158015610a74573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106689190611cbf565b610ada6000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508592506115b5915050565b50565b60008060009054906101000a90046001600160a01b03166001600160a01b031663570ca7356040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106f5573d6000803e3d6000fd5b60008060009054906101000a90046001600160a01b03166001600160a01b03166363d38c3b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610772573d6000803e3d6000fd5b60008060009054906101000a90046001600160a01b03166001600160a01b0316636c8bcee86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610772573d6000803e3d6000fd5b60008054604051637050ccd960e01b81526001600160a01b038581166004830152841515602483015290911690637050ccd9906044016020604051808303816000875af1158015610c2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c529190611e1b565b50610c5d83836112bb565b50600192915050565b600080546040516370a0823160e01b81526001600160a01b038481166004830152909116906370a0823190602401610627565b60008060009054906101000a90046001600160a01b03166001600160a01b03166372f702f36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106f5573d6000803e3d6000fd5b60008060009054906101000a90046001600160a01b03166001600160a01b0316637b0a47ee6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610772573d6000803e3d6000fd5b60008060009054906101000a90046001600160a01b03166001600160a01b03166380faa57d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610772573d6000803e3d6000fd5b60008054604051638b87634760e01b81526001600160a01b03848116600483015290911690638b87634790602401610627565b6000610e4f7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006000368080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250600192506116a7915050565b506001905090565b60008060009054906101000a90046001600160a01b03166001600160a01b031663901a7d536040518163ffffffff1660e01b8152600401602060405180830381865afa158015610772573d6000803e3d6000fd5b6000610c5d7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006000368080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250600192506116a7915050565b6000610c5d6000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508692506115b5915050565b60008060009054906101000a90046001600160a01b03166001600160a01b031663c8f33c916040518163ffffffff1660e01b8152600401602060405180830381865afa158015610772573d6000803e3d6000fd5b60008060009054906101000a90046001600160a01b03166001600160a01b031663cd3daf9d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610772573d6000803e3d6000fd5b60008060009054906101000a90046001600160a01b03166001600160a01b031663d55a23f46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610772573d6000803e3d6000fd5b60008060009054906101000a90046001600160a01b03166001600160a01b031663df136d656040518163ffffffff1660e01b8152600401602060405180830381865afa158015610772573d6000803e3d6000fd5b60008060009054906101000a90046001600160a01b03166001600160a01b031663ebe2b12b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610772573d6000803e3d6000fd5b60008060009054906101000a90046001600160a01b03166001600160a01b031663f10684546040518163ffffffff1660e01b8152600401602060405180830381865afa158015610772573d6000803e3d6000fd5b60008060009054906101000a90046001600160a01b03166001600160a01b031663f7c618c16040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106f5573d6000803e3d6000fd5b604051633a562dc160e21b815233600482015260009081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e958b70490602401602060405180830381865afa15801561122b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124f9190611cbf565b905061129f817f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000087600061174e565b5082156112b1576112b18160016112bb565b5060019392505050565b60405163028f1f8b60e51b81526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000811660248301527f000000000000000000000000000000000000000000000000000000000000000016906351e3f16090604401600060405180830381600087803b15801561134657600080fd5b505af115801561135a573d6000803e3d6000fd5b505060405163028f1f8b60e51b81526001600160a01b0385811660048301527f0000000000000000000000000000000000000000000000000000000000000000811660248301527f00000000000000000000000000000000000000000000000000000000000000001692506351e3f1609150604401600060405180830381600087803b1580156113e957600080fd5b505af11580156113fd573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316158015906114365750805b1561082c5760405163028f1f8b60e51b81526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000811660248301527f000000000000000000000000000000000000000000000000000000000000000016906351e3f16090604401600060405180830381600087803b1580156114c657600080fd5b505af11580156114da573d6000803e3d6000fd5b5050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031615905061082c5760405163028f1f8b60e51b81526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000811660248301527f000000000000000000000000000000000000000000000000000000000000000016906351e3f16090604401600060405180830381600087803b15801561159957600080fd5b505af11580156115ad573d6000803e3d6000fd5b505050505050565b604051633a562dc160e21b81523360048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e958b70490602401602060405180830381865afa15801561161c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116409190611cbf565b9050611690817f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000086600061174e565b5081156116a2576116a28160016112bb565b505050565b604051633a562dc160e21b81523360048201526060906000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e958b70490602401602060405180830381865afa158015611711573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117359190611cbf565b9050611744818787878761174e565b9695505050505050565b6060811561187657600054604051636eb1769f60e11b81526001600160a01b03888116600483015291821660248201526b1fffffffffffffffffffffff9187169063dd62ed3e90604401602060405180830381865afa1580156117b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d99190611ca6565b1015611876576000546040516346fb371d60e01b81523360048201526001600160a01b039182166024820152868216604482015260001960648201527f0000000000000000000000000000000000000000000000000000000000000000909116906346fb371d90608401600060405180830381600087803b15801561185d57600080fd5b505af1158015611871573d6000803e3d6000fd5b505050505b600080336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611984576040516370a0823160e01b81526001600160a01b0389811660048301528816906370a0823190602401602060405180830381865afa1580156118ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119139190611ca6565b6040516370a0823160e01b81526001600160a01b038a81166004830152919350908716906370a0823190602401602060405180830381865afa15801561195d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119819190611ca6565b90505b60005460405163367203a560e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811692636ce4074a926119d892339216908a90600401611e38565b6000604051808303816000875af11580156119f7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a1f9190810190611d6e565b9250336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611aef576040516332a54f6d60e11b81526001600160a01b0389811660048301528881166024830152878116604483015260648201849052608482018390527f0000000000000000000000000000000000000000000000000000000000000000169063654a9eda9060a401600060405180830381600087803b158015611ad257600080fd5b505af1158015611ae6573d6000803e3d6000fd5b50505050611b73565b60405163028f1f8b60e51b81526001600160a01b03898116600483015287811660248301527f000000000000000000000000000000000000000000000000000000000000000016906351e3f16090604401600060405180830381600087803b158015611b5a57600080fd5b505af1158015611b6e573d6000803e3d6000fd5b505050505b505095945050505050565b6001600160a01b0381168114610ada57600080fd5b600060208284031215611ba557600080fd5b81356108e381611b7e565b8015158114610ada57600080fd5b600060208284031215611bd057600080fd5b81356108e381611bb0565b60008060408385031215611bee57600080fd5b8235611bf981611b7e565b946020939093013593505050565b60008060408385031215611c1a57600080fd5b823591506020830135611c2c81611bb0565b809150509250929050565b600060208284031215611c4957600080fd5b5035919050565b60008060408385031215611c6357600080fd5b8235611c6e81611b7e565b91506020830135611c2c81611bb0565b60208101600e8310611ca057634e487b7160e01b600052602160045260246000fd5b91905290565b600060208284031215611cb857600080fd5b5051919050565b600060208284031215611cd157600080fd5b81516108e381611b7e565b6001600160a01b0385811682528416602082015260606040820181905281018290526000828460808401376000608084840101526080601f19601f850116830101905095945050505050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015611d59578181015183820152602001611d41565b83811115611d68576000848401525b50505050565b600060208284031215611d8057600080fd5b815167ffffffffffffffff80821115611d9857600080fd5b818401915084601f830112611dac57600080fd5b815181811115611dbe57611dbe611d28565b604051601f8201601f19908116603f01168101908382118183101715611de657611de6611d28565b81604052828152876020848701011115611dff57600080fd5b611e10836020830160208801611d3e565b979650505050505050565b600060208284031215611e2d57600080fd5b81516108e381611bb0565b600060018060a01b038086168352808516602084015250606060408301528251806060840152611e6f816080850160208701611d3e565b601f01601f19169190910160800194935050505056fea2646970667358221220377cadf133907a9b85f4ca9bfd692bbea206dbe4dd42a6781bec18ef6b06c7fb64736f6c634300080a003360e06040523480156200001157600080fd5b5060405162000aae38038062000aae8339810160408190526200003491620002c1565b80816001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000074573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200009e919081019062000342565b604051602001620000b09190620003fa565b604051602081830303815290604052826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015620000fe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000128919081019062000342565b6040516020016200013a919062000441565b604051602081830303815290604052836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000188573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001ae91906200046f565b8151620001c3906000906020850190620001fe565b508251620001d9906001906020860190620001fe565b5060ff1660a05250506001600160a01b039081166080529190911660c05250620004d8565b8280546200020c906200049b565b90600052602060002090601f0160209004810192826200023057600085556200027b565b82601f106200024b57805160ff19168380011785556200027b565b828001600101855582156200027b579182015b828111156200027b5782518255916020019190600101906200025e565b50620002899291506200028d565b5090565b5b808211156200028957600081556001016200028e565b80516001600160a01b0381168114620002bc57600080fd5b919050565b60008060408385031215620002d557600080fd5b620002e083620002a4565b9150620002f060208401620002a4565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200032c57818101518382015260200162000312565b838111156200033c576000848401525b50505050565b6000602082840312156200035557600080fd5b81516001600160401b03808211156200036d57600080fd5b818401915084601f8301126200038257600080fd5b815181811115620003975762000397620002f9565b604051601f8201601f19908116603f01168101908382118183101715620003c257620003c2620002f9565b81604052828152876020848701011115620003dc57600080fd5b620003ef8360208301602088016200030f565b979650505050505050565b7f436f6e766578205374616b656420506f736974696f6e20000000000000000000815260008251620004348160178501602087016200030f565b9190910160170192915050565b636376782d60e01b815260008251620004628160048501602087016200030f565b9190910160040192915050565b6000602082840312156200048257600080fd5b815160ff811681146200049457600080fd5b9392505050565b600181811c90821680620004b057607f821691505b60208210811415620004d257634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c051610599620005156000396000818160f401526103630152600061015701526000818161019001526102bc01526105996000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063313ce56711610071578063313ce567146101525780636f307dc31461018b57806370a08231146101b257806395d89b41146101c5578063a9059cbb146100cc578063dd62ed3e146101cd57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806316f0115b146100ef57806318160ddd1461012e57806323b872dd14610144575b600080fd5b6100b66101db565b6040516100c391906103e3565b60405180910390f35b6100df6100da366004610454565b610269565b60405190151581526020016100c3565b6101167f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100c3565b6101366102b8565b6040519081526020016100c3565b6100df6100da36600461047e565b6101797f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff90911681526020016100c3565b6101167f000000000000000000000000000000000000000000000000000000000000000081565b6101366101c03660046104ba565b610341565b6100b66103d6565b6101366100da3660046104dc565b600180546101e89061050f565b80601f01602080910402602001604051908101604052809291908181526020018280546102149061050f565b80156102615780601f1061023657610100808354040283529160200191610261565b820191906000526020600020905b81548152906001019060200180831161024457829003601f168201915b505050505081565b60405162461bcd60e51b815260206004820152601860248201527f5068616e746f6d20746f6b656e3a20666f7262696464656e0000000000000000604482015260009060640160405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610318573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033c919061054a565b905090565b6040516370a0823160e01b81526001600160a01b0382811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401602060405180830381865afa1580156103ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d0919061054a565b92915050565b600080546101e89061050f565b600060208083528351808285015260005b81811015610410578581018301518582016040015282016103f4565b81811115610422576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461044f57600080fd5b919050565b6000806040838503121561046757600080fd5b61047083610438565b946020939093013593505050565b60008060006060848603121561049357600080fd5b61049c84610438565b92506104aa60208501610438565b9150604084013590509250925092565b6000602082840312156104cc57600080fd5b6104d582610438565b9392505050565b600080604083850312156104ef57600080fd5b6104f883610438565b915061050660208401610438565b90509250929050565b600181811c9082168061052357607f821691505b6020821081141561054457634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561055c57600080fd5b505191905056fea2646970667358221220d449b7cde378814d0ed96a6f196435ffa8a500660caf7e7628f22acd511be9cf64736f6c634300080a0033" . parse () . expect ("invalid bytecode")
    });
    #[derive(Clone)]
    pub struct ConvexV1BaseRewardPoolAdapter<M>(ethers::contract::Contract<M>);
    impl<M> std::ops::Deref for ConvexV1BaseRewardPoolAdapter<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for ConvexV1BaseRewardPoolAdapter<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(ConvexV1BaseRewardPoolAdapter))
                .field(&self.address())
                .finish()
        }
    }
    impl<'a, M: ethers::providers::Middleware> ConvexV1BaseRewardPoolAdapter<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(
                address.into(),
                CONVEXV1BASEREWARDPOOLADAPTER_ABI.clone(),
                client,
            )
            .into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                CONVEXV1BASEREWARDPOOLADAPTER_ABI.clone(),
                CONVEXV1BASEREWARDPOOLADAPTER_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `_gearboxAdapterType` (0xce30bbdb) function"]
        pub fn gearbox_adapter_type(&self) -> ethers::contract::builders::ContractCall<M, u8> {
            self.0
                .method_hash([206, 48, 187, 219], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `_gearboxAdapterVersion` (0x78aa73a4) function"]
        pub fn gearbox_adapter_version(&self) -> ethers::contract::builders::ContractCall<M, u16> {
            self.0
                .method_hash([120, 170, 115, 164], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `balanceOf` (0x70a08231) function"]
        pub fn balance_of(
            &self,
            account: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([112, 160, 130, 49], account)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `creditFacade` (0x2f7a1881) function"]
        pub fn credit_facade(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([47, 122, 24, 129], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `creditManager` (0xc12c21c0) function"]
        pub fn credit_manager(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([193, 44, 33, 192], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `crv` (0x6a4874a1) function"]
        pub fn crv(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([106, 72, 116, 161], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `currentRewards` (0x901a7d53) function"]
        pub fn current_rewards(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([144, 26, 125, 83], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `curveLPtoken` (0x927188d9) function"]
        pub fn curve_l_ptoken(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([146, 113, 136, 217], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `cvx` (0x923c1d61) function"]
        pub fn cvx(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([146, 60, 29, 97], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `cvxLPtoken` (0x99253ac0) function"]
        pub fn cvx_l_ptoken(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([153, 37, 58, 192], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `donate` (0xf14faf6f) function"]
        pub fn donate(
            &self,
            amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([241, 79, 175, 111], amount)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `duration` (0x0fb5a6b4) function"]
        pub fn duration(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([15, 181, 166, 180], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `earned` (0x008cc262) function"]
        pub fn earned(
            &self,
            account: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([0, 140, 194, 98], account)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `extraReward1` (0xda5b383f) function"]
        pub fn extra_reward_1(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([218, 91, 56, 63], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `extraReward2` (0x97c3413b) function"]
        pub fn extra_reward_2(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([151, 195, 65, 59], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `extraRewards` (0x40c35446) function"]
        pub fn extra_rewards(
            &self,
            i: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([64, 195, 84, 70], i)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `extraRewardsLength` (0xd55a23f4) function"]
        pub fn extra_rewards_length(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([213, 90, 35, 244], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getReward` (0x3d18b912) function"]
        pub fn get_reward(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([61, 24, 185, 18], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getReward` (0x7050ccd9) function"]
        pub fn get_reward_with_account_and_claim_extras(
            &self,
            account: ethers::core::types::Address,
            claim_extras: bool,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([112, 80, 204, 217], (account, claim_extras))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `historicalRewards` (0x262d3d6d) function"]
        pub fn historical_rewards(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([38, 45, 61, 109], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `lastTimeRewardApplicable` (0x80faa57d) function"]
        pub fn last_time_reward_applicable(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([128, 250, 165, 125], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `lastUpdateTime` (0xc8f33c91) function"]
        pub fn last_update_time(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([200, 243, 60, 145], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `newRewardRatio` (0x6c8bcee8) function"]
        pub fn new_reward_ratio(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([108, 139, 206, 232], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `operator` (0x570ca735) function"]
        pub fn operator(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([87, 12, 167, 53], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `periodFinish` (0xebe2b12b) function"]
        pub fn period_finish(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([235, 226, 177, 43], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `pid` (0xf1068454) function"]
        pub fn pid(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([241, 6, 132, 84], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `queuedRewards` (0x63d38c3b) function"]
        pub fn queued_rewards(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([99, 211, 140, 59], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `rewardManager` (0x0f4ef8a6) function"]
        pub fn reward_manager(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([15, 78, 248, 166], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `rewardPerToken` (0xcd3daf9d) function"]
        pub fn reward_per_token(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([205, 61, 175, 157], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `rewardPerTokenStored` (0xdf136d65) function"]
        pub fn reward_per_token_stored(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([223, 19, 109, 101], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `rewardRate` (0x7b0a47ee) function"]
        pub fn reward_rate(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([123, 10, 71, 238], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `rewardToken` (0xf7c618c1) function"]
        pub fn reward_token(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([247, 198, 24, 193], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `rewards` (0x0700037d) function"]
        pub fn rewards(
            &self,
            account: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([7, 0, 3, 125], account)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `stake` (0xa694fc3a) function"]
        pub fn stake(
            &self,
            p0: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([166, 148, 252, 58], p0)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `stakeAll` (0x8dcb4061) function"]
        pub fn stake_all(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([141, 203, 64, 97], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `stakeFor` (0x2ee40908) function"]
        pub fn stake_for(
            &self,
            p0: ethers::core::types::Address,
            p1: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([46, 228, 9, 8], (p0, p1))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `stakedPhantomToken` (0x20b2c151) function"]
        pub fn staked_phantom_token(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([32, 178, 193, 81], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `stakingToken` (0x72f702f3) function"]
        pub fn staking_token(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([114, 247, 2, 243], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `targetContract` (0xbd90df70) function"]
        pub fn target_contract(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([189, 144, 223, 112], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `totalSupply` (0x18160ddd) function"]
        pub fn total_supply(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([24, 22, 13, 221], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `userRewardPerTokenPaid` (0x8b876347) function"]
        pub fn user_reward_per_token_paid(
            &self,
            account: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([139, 135, 99, 71], account)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `withdraw` (0x38d07436) function"]
        pub fn withdraw(
            &self,
            p0: ethers::core::types::U256,
            claim: bool,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([56, 208, 116, 54], (p0, claim))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `withdrawAll` (0x1c1c6fe5) function"]
        pub fn withdraw_all(&self, claim: bool) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([28, 28, 111, 229], claim)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `withdrawAllAndUnwrap` (0x49f039a2) function"]
        pub fn withdraw_all_and_unwrap(
            &self,
            claim: bool,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([73, 240, 57, 162], claim)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `withdrawAndUnwrap` (0xc32e7202) function"]
        pub fn withdraw_and_unwrap(
            &self,
            p0: ethers::core::types::U256,
            claim: bool,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([195, 46, 114, 2], (p0, claim))
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>>
        for ConvexV1BaseRewardPoolAdapter<M>
    {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[doc = "Container type for all input parameters for the `_gearboxAdapterType`function with signature `_gearboxAdapterType()` and selector `[206, 48, 187, 219]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "_gearboxAdapterType", abi = "_gearboxAdapterType()")]
    pub struct GearboxAdapterTypeCall;
    #[doc = "Container type for all input parameters for the `_gearboxAdapterVersion`function with signature `_gearboxAdapterVersion()` and selector `[120, 170, 115, 164]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "_gearboxAdapterVersion", abi = "_gearboxAdapterVersion()")]
    pub struct GearboxAdapterVersionCall;
    #[doc = "Container type for all input parameters for the `balanceOf`function with signature `balanceOf(address)` and selector `[112, 160, 130, 49]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "balanceOf", abi = "balanceOf(address)")]
    pub struct BalanceOfCall {
        pub account: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `creditFacade`function with signature `creditFacade()` and selector `[47, 122, 24, 129]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "creditFacade", abi = "creditFacade()")]
    pub struct CreditFacadeCall;
    #[doc = "Container type for all input parameters for the `creditManager`function with signature `creditManager()` and selector `[193, 44, 33, 192]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "creditManager", abi = "creditManager()")]
    pub struct CreditManagerCall;
    #[doc = "Container type for all input parameters for the `crv`function with signature `crv()` and selector `[106, 72, 116, 161]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "crv", abi = "crv()")]
    pub struct CrvCall;
    #[doc = "Container type for all input parameters for the `currentRewards`function with signature `currentRewards()` and selector `[144, 26, 125, 83]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "currentRewards", abi = "currentRewards()")]
    pub struct CurrentRewardsCall;
    #[doc = "Container type for all input parameters for the `curveLPtoken`function with signature `curveLPtoken()` and selector `[146, 113, 136, 217]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "curveLPtoken", abi = "curveLPtoken()")]
    pub struct CurveLPtokenCall;
    #[doc = "Container type for all input parameters for the `cvx`function with signature `cvx()` and selector `[146, 60, 29, 97]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "cvx", abi = "cvx()")]
    pub struct CvxCall;
    #[doc = "Container type for all input parameters for the `cvxLPtoken`function with signature `cvxLPtoken()` and selector `[153, 37, 58, 192]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "cvxLPtoken", abi = "cvxLPtoken()")]
    pub struct CvxLPtokenCall;
    #[doc = "Container type for all input parameters for the `donate`function with signature `donate(uint256)` and selector `[241, 79, 175, 111]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "donate", abi = "donate(uint256)")]
    pub struct DonateCall {
        pub amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `duration`function with signature `duration()` and selector `[15, 181, 166, 180]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "duration", abi = "duration()")]
    pub struct DurationCall;
    #[doc = "Container type for all input parameters for the `earned`function with signature `earned(address)` and selector `[0, 140, 194, 98]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "earned", abi = "earned(address)")]
    pub struct EarnedCall {
        pub account: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `extraReward1`function with signature `extraReward1()` and selector `[218, 91, 56, 63]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "extraReward1", abi = "extraReward1()")]
    pub struct ExtraReward1Call;
    #[doc = "Container type for all input parameters for the `extraReward2`function with signature `extraReward2()` and selector `[151, 195, 65, 59]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "extraReward2", abi = "extraReward2()")]
    pub struct ExtraReward2Call;
    #[doc = "Container type for all input parameters for the `extraRewards`function with signature `extraRewards(uint256)` and selector `[64, 195, 84, 70]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "extraRewards", abi = "extraRewards(uint256)")]
    pub struct ExtraRewardsCall {
        pub i: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `extraRewardsLength`function with signature `extraRewardsLength()` and selector `[213, 90, 35, 244]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "extraRewardsLength", abi = "extraRewardsLength()")]
    pub struct ExtraRewardsLengthCall;
    #[doc = "Container type for all input parameters for the `getReward`function with signature `getReward()` and selector `[61, 24, 185, 18]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "getReward", abi = "getReward()")]
    pub struct GetRewardCall;
    #[doc = "Container type for all input parameters for the `getReward`function with signature `getReward(address,bool)` and selector `[112, 80, 204, 217]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "getReward", abi = "getReward(address,bool)")]
    pub struct GetRewardWithAccountAndClaimExtrasCall {
        pub account: ethers::core::types::Address,
        pub claim_extras: bool,
    }
    #[doc = "Container type for all input parameters for the `historicalRewards`function with signature `historicalRewards()` and selector `[38, 45, 61, 109]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "historicalRewards", abi = "historicalRewards()")]
    pub struct HistoricalRewardsCall;
    #[doc = "Container type for all input parameters for the `lastTimeRewardApplicable`function with signature `lastTimeRewardApplicable()` and selector `[128, 250, 165, 125]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "lastTimeRewardApplicable", abi = "lastTimeRewardApplicable()")]
    pub struct LastTimeRewardApplicableCall;
    #[doc = "Container type for all input parameters for the `lastUpdateTime`function with signature `lastUpdateTime()` and selector `[200, 243, 60, 145]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "lastUpdateTime", abi = "lastUpdateTime()")]
    pub struct LastUpdateTimeCall;
    #[doc = "Container type for all input parameters for the `newRewardRatio`function with signature `newRewardRatio()` and selector `[108, 139, 206, 232]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "newRewardRatio", abi = "newRewardRatio()")]
    pub struct NewRewardRatioCall;
    #[doc = "Container type for all input parameters for the `operator`function with signature `operator()` and selector `[87, 12, 167, 53]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "operator", abi = "operator()")]
    pub struct OperatorCall;
    #[doc = "Container type for all input parameters for the `periodFinish`function with signature `periodFinish()` and selector `[235, 226, 177, 43]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "periodFinish", abi = "periodFinish()")]
    pub struct PeriodFinishCall;
    #[doc = "Container type for all input parameters for the `pid`function with signature `pid()` and selector `[241, 6, 132, 84]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "pid", abi = "pid()")]
    pub struct PidCall;
    #[doc = "Container type for all input parameters for the `queuedRewards`function with signature `queuedRewards()` and selector `[99, 211, 140, 59]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "queuedRewards", abi = "queuedRewards()")]
    pub struct QueuedRewardsCall;
    #[doc = "Container type for all input parameters for the `rewardManager`function with signature `rewardManager()` and selector `[15, 78, 248, 166]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "rewardManager", abi = "rewardManager()")]
    pub struct RewardManagerCall;
    #[doc = "Container type for all input parameters for the `rewardPerToken`function with signature `rewardPerToken()` and selector `[205, 61, 175, 157]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "rewardPerToken", abi = "rewardPerToken()")]
    pub struct RewardPerTokenCall;
    #[doc = "Container type for all input parameters for the `rewardPerTokenStored`function with signature `rewardPerTokenStored()` and selector `[223, 19, 109, 101]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "rewardPerTokenStored", abi = "rewardPerTokenStored()")]
    pub struct RewardPerTokenStoredCall;
    #[doc = "Container type for all input parameters for the `rewardRate`function with signature `rewardRate()` and selector `[123, 10, 71, 238]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "rewardRate", abi = "rewardRate()")]
    pub struct RewardRateCall;
    #[doc = "Container type for all input parameters for the `rewardToken`function with signature `rewardToken()` and selector `[247, 198, 24, 193]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "rewardToken", abi = "rewardToken()")]
    pub struct RewardTokenCall;
    #[doc = "Container type for all input parameters for the `rewards`function with signature `rewards(address)` and selector `[7, 0, 3, 125]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "rewards", abi = "rewards(address)")]
    pub struct RewardsCall {
        pub account: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `stake`function with signature `stake(uint256)` and selector `[166, 148, 252, 58]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "stake", abi = "stake(uint256)")]
    pub struct StakeCall(pub ethers::core::types::U256);
    #[doc = "Container type for all input parameters for the `stakeAll`function with signature `stakeAll()` and selector `[141, 203, 64, 97]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "stakeAll", abi = "stakeAll()")]
    pub struct StakeAllCall;
    #[doc = "Container type for all input parameters for the `stakeFor`function with signature `stakeFor(address,uint256)` and selector `[46, 228, 9, 8]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "stakeFor", abi = "stakeFor(address,uint256)")]
    pub struct StakeForCall(
        pub ethers::core::types::Address,
        pub ethers::core::types::U256,
    );
    #[doc = "Container type for all input parameters for the `stakedPhantomToken`function with signature `stakedPhantomToken()` and selector `[32, 178, 193, 81]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "stakedPhantomToken", abi = "stakedPhantomToken()")]
    pub struct StakedPhantomTokenCall;
    #[doc = "Container type for all input parameters for the `stakingToken`function with signature `stakingToken()` and selector `[114, 247, 2, 243]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "stakingToken", abi = "stakingToken()")]
    pub struct StakingTokenCall;
    #[doc = "Container type for all input parameters for the `targetContract`function with signature `targetContract()` and selector `[189, 144, 223, 112]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "targetContract", abi = "targetContract()")]
    pub struct TargetContractCall;
    #[doc = "Container type for all input parameters for the `totalSupply`function with signature `totalSupply()` and selector `[24, 22, 13, 221]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "totalSupply", abi = "totalSupply()")]
    pub struct TotalSupplyCall;
    #[doc = "Container type for all input parameters for the `userRewardPerTokenPaid`function with signature `userRewardPerTokenPaid(address)` and selector `[139, 135, 99, 71]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "userRewardPerTokenPaid",
        abi = "userRewardPerTokenPaid(address)"
    )]
    pub struct UserRewardPerTokenPaidCall {
        pub account: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `withdraw`function with signature `withdraw(uint256,bool)` and selector `[56, 208, 116, 54]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "withdraw", abi = "withdraw(uint256,bool)")]
    pub struct WithdrawCall {
        pub p0: ethers::core::types::U256,
        pub claim: bool,
    }
    #[doc = "Container type for all input parameters for the `withdrawAll`function with signature `withdrawAll(bool)` and selector `[28, 28, 111, 229]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "withdrawAll", abi = "withdrawAll(bool)")]
    pub struct WithdrawAllCall {
        pub claim: bool,
    }
    #[doc = "Container type for all input parameters for the `withdrawAllAndUnwrap`function with signature `withdrawAllAndUnwrap(bool)` and selector `[73, 240, 57, 162]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "withdrawAllAndUnwrap", abi = "withdrawAllAndUnwrap(bool)")]
    pub struct WithdrawAllAndUnwrapCall {
        pub claim: bool,
    }
    #[doc = "Container type for all input parameters for the `withdrawAndUnwrap`function with signature `withdrawAndUnwrap(uint256,bool)` and selector `[195, 46, 114, 2]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "withdrawAndUnwrap", abi = "withdrawAndUnwrap(uint256,bool)")]
    pub struct WithdrawAndUnwrapCall {
        pub p0: ethers::core::types::U256,
        pub claim: bool,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum ConvexV1BaseRewardPoolAdapterCalls {
        GearboxAdapterType(GearboxAdapterTypeCall),
        GearboxAdapterVersion(GearboxAdapterVersionCall),
        BalanceOf(BalanceOfCall),
        CreditFacade(CreditFacadeCall),
        CreditManager(CreditManagerCall),
        Crv(CrvCall),
        CurrentRewards(CurrentRewardsCall),
        CurveLPtoken(CurveLPtokenCall),
        Cvx(CvxCall),
        CvxLPtoken(CvxLPtokenCall),
        Donate(DonateCall),
        Duration(DurationCall),
        Earned(EarnedCall),
        ExtraReward1(ExtraReward1Call),
        ExtraReward2(ExtraReward2Call),
        ExtraRewards(ExtraRewardsCall),
        ExtraRewardsLength(ExtraRewardsLengthCall),
        GetReward(GetRewardCall),
        GetRewardWithAccountAndClaimExtras(GetRewardWithAccountAndClaimExtrasCall),
        HistoricalRewards(HistoricalRewardsCall),
        LastTimeRewardApplicable(LastTimeRewardApplicableCall),
        LastUpdateTime(LastUpdateTimeCall),
        NewRewardRatio(NewRewardRatioCall),
        Operator(OperatorCall),
        PeriodFinish(PeriodFinishCall),
        Pid(PidCall),
        QueuedRewards(QueuedRewardsCall),
        RewardManager(RewardManagerCall),
        RewardPerToken(RewardPerTokenCall),
        RewardPerTokenStored(RewardPerTokenStoredCall),
        RewardRate(RewardRateCall),
        RewardToken(RewardTokenCall),
        Rewards(RewardsCall),
        Stake(StakeCall),
        StakeAll(StakeAllCall),
        StakeFor(StakeForCall),
        StakedPhantomToken(StakedPhantomTokenCall),
        StakingToken(StakingTokenCall),
        TargetContract(TargetContractCall),
        TotalSupply(TotalSupplyCall),
        UserRewardPerTokenPaid(UserRewardPerTokenPaidCall),
        Withdraw(WithdrawCall),
        WithdrawAll(WithdrawAllCall),
        WithdrawAllAndUnwrap(WithdrawAllAndUnwrapCall),
        WithdrawAndUnwrap(WithdrawAndUnwrapCall),
    }
    impl ethers::core::abi::AbiDecode for ConvexV1BaseRewardPoolAdapterCalls {
        fn decode(data: impl AsRef<[u8]>) -> Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <GearboxAdapterTypeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::GearboxAdapterType(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <GearboxAdapterVersionCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::GearboxAdapterVersion(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <BalanceOfCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::BalanceOf(decoded));
            }
            if let Ok(decoded) =
                <CreditFacadeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::CreditFacade(decoded));
            }
            if let Ok(decoded) =
                <CreditManagerCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::CreditManager(decoded));
            }
            if let Ok(decoded) = <CrvCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::Crv(decoded));
            }
            if let Ok(decoded) =
                <CurrentRewardsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::CurrentRewards(decoded));
            }
            if let Ok(decoded) =
                <CurveLPtokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::CurveLPtoken(decoded));
            }
            if let Ok(decoded) = <CvxCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::Cvx(decoded));
            }
            if let Ok(decoded) =
                <CvxLPtokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::CvxLPtoken(decoded));
            }
            if let Ok(decoded) = <DonateCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::Donate(decoded));
            }
            if let Ok(decoded) =
                <DurationCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::Duration(decoded));
            }
            if let Ok(decoded) = <EarnedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::Earned(decoded));
            }
            if let Ok(decoded) =
                <ExtraReward1Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::ExtraReward1(decoded));
            }
            if let Ok(decoded) =
                <ExtraReward2Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::ExtraReward2(decoded));
            }
            if let Ok(decoded) =
                <ExtraRewardsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::ExtraRewards(decoded));
            }
            if let Ok(decoded) =
                <ExtraRewardsLengthCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::ExtraRewardsLength(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <GetRewardCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::GetReward(decoded));
            }
            if let Ok(decoded) =
                <GetRewardWithAccountAndClaimExtrasCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(
                    ConvexV1BaseRewardPoolAdapterCalls::GetRewardWithAccountAndClaimExtras(decoded),
                );
            }
            if let Ok(decoded) =
                <HistoricalRewardsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::HistoricalRewards(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <LastTimeRewardApplicableCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::LastTimeRewardApplicable(decoded));
            }
            if let Ok(decoded) =
                <LastUpdateTimeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::LastUpdateTime(decoded));
            }
            if let Ok(decoded) =
                <NewRewardRatioCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::NewRewardRatio(decoded));
            }
            if let Ok(decoded) =
                <OperatorCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::Operator(decoded));
            }
            if let Ok(decoded) =
                <PeriodFinishCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::PeriodFinish(decoded));
            }
            if let Ok(decoded) = <PidCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::Pid(decoded));
            }
            if let Ok(decoded) =
                <QueuedRewardsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::QueuedRewards(decoded));
            }
            if let Ok(decoded) =
                <RewardManagerCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::RewardManager(decoded));
            }
            if let Ok(decoded) =
                <RewardPerTokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::RewardPerToken(decoded));
            }
            if let Ok(decoded) =
                <RewardPerTokenStoredCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::RewardPerTokenStored(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <RewardRateCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::RewardRate(decoded));
            }
            if let Ok(decoded) =
                <RewardTokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::RewardToken(decoded));
            }
            if let Ok(decoded) =
                <RewardsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::Rewards(decoded));
            }
            if let Ok(decoded) = <StakeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::Stake(decoded));
            }
            if let Ok(decoded) =
                <StakeAllCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::StakeAll(decoded));
            }
            if let Ok(decoded) =
                <StakeForCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::StakeFor(decoded));
            }
            if let Ok(decoded) =
                <StakedPhantomTokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::StakedPhantomToken(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <StakingTokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::StakingToken(decoded));
            }
            if let Ok(decoded) =
                <TargetContractCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::TargetContract(decoded));
            }
            if let Ok(decoded) =
                <TotalSupplyCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::TotalSupply(decoded));
            }
            if let Ok(decoded) =
                <UserRewardPerTokenPaidCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::UserRewardPerTokenPaid(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <WithdrawCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::Withdraw(decoded));
            }
            if let Ok(decoded) =
                <WithdrawAllCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::WithdrawAll(decoded));
            }
            if let Ok(decoded) =
                <WithdrawAllAndUnwrapCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::WithdrawAllAndUnwrap(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <WithdrawAndUnwrapCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(ConvexV1BaseRewardPoolAdapterCalls::WithdrawAndUnwrap(
                    decoded,
                ));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for ConvexV1BaseRewardPoolAdapterCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                ConvexV1BaseRewardPoolAdapterCalls::GearboxAdapterType(element) => element.encode(),
                ConvexV1BaseRewardPoolAdapterCalls::GearboxAdapterVersion(element) => {
                    element.encode()
                }
                ConvexV1BaseRewardPoolAdapterCalls::BalanceOf(element) => element.encode(),
                ConvexV1BaseRewardPoolAdapterCalls::CreditFacade(element) => element.encode(),
                ConvexV1BaseRewardPoolAdapterCalls::CreditManager(element) => element.encode(),
                ConvexV1BaseRewardPoolAdapterCalls::Crv(element) => element.encode(),
                ConvexV1BaseRewardPoolAdapterCalls::CurrentRewards(element) => element.encode(),
                ConvexV1BaseRewardPoolAdapterCalls::CurveLPtoken(element) => element.encode(),
                ConvexV1BaseRewardPoolAdapterCalls::Cvx(element) => element.encode(),
                ConvexV1BaseRewardPoolAdapterCalls::CvxLPtoken(element) => element.encode(),
                ConvexV1BaseRewardPoolAdapterCalls::Donate(element) => element.encode(),
                ConvexV1BaseRewardPoolAdapterCalls::Duration(element) => element.encode(),
                ConvexV1BaseRewardPoolAdapterCalls::Earned(element) => element.encode(),
                ConvexV1BaseRewardPoolAdapterCalls::ExtraReward1(element) => element.encode(),
                ConvexV1BaseRewardPoolAdapterCalls::ExtraReward2(element) => element.encode(),
                ConvexV1BaseRewardPoolAdapterCalls::ExtraRewards(element) => element.encode(),
                ConvexV1BaseRewardPoolAdapterCalls::ExtraRewardsLength(element) => element.encode(),
                ConvexV1BaseRewardPoolAdapterCalls::GetReward(element) => element.encode(),
                ConvexV1BaseRewardPoolAdapterCalls::GetRewardWithAccountAndClaimExtras(element) => {
                    element.encode()
                }
                ConvexV1BaseRewardPoolAdapterCalls::HistoricalRewards(element) => element.encode(),
                ConvexV1BaseRewardPoolAdapterCalls::LastTimeRewardApplicable(element) => {
                    element.encode()
                }
                ConvexV1BaseRewardPoolAdapterCalls::LastUpdateTime(element) => element.encode(),
                ConvexV1BaseRewardPoolAdapterCalls::NewRewardRatio(element) => element.encode(),
                ConvexV1BaseRewardPoolAdapterCalls::Operator(element) => element.encode(),
                ConvexV1BaseRewardPoolAdapterCalls::PeriodFinish(element) => element.encode(),
                ConvexV1BaseRewardPoolAdapterCalls::Pid(element) => element.encode(),
                ConvexV1BaseRewardPoolAdapterCalls::QueuedRewards(element) => element.encode(),
                ConvexV1BaseRewardPoolAdapterCalls::RewardManager(element) => element.encode(),
                ConvexV1BaseRewardPoolAdapterCalls::RewardPerToken(element) => element.encode(),
                ConvexV1BaseRewardPoolAdapterCalls::RewardPerTokenStored(element) => {
                    element.encode()
                }
                ConvexV1BaseRewardPoolAdapterCalls::RewardRate(element) => element.encode(),
                ConvexV1BaseRewardPoolAdapterCalls::RewardToken(element) => element.encode(),
                ConvexV1BaseRewardPoolAdapterCalls::Rewards(element) => element.encode(),
                ConvexV1BaseRewardPoolAdapterCalls::Stake(element) => element.encode(),
                ConvexV1BaseRewardPoolAdapterCalls::StakeAll(element) => element.encode(),
                ConvexV1BaseRewardPoolAdapterCalls::StakeFor(element) => element.encode(),
                ConvexV1BaseRewardPoolAdapterCalls::StakedPhantomToken(element) => element.encode(),
                ConvexV1BaseRewardPoolAdapterCalls::StakingToken(element) => element.encode(),
                ConvexV1BaseRewardPoolAdapterCalls::TargetContract(element) => element.encode(),
                ConvexV1BaseRewardPoolAdapterCalls::TotalSupply(element) => element.encode(),
                ConvexV1BaseRewardPoolAdapterCalls::UserRewardPerTokenPaid(element) => {
                    element.encode()
                }
                ConvexV1BaseRewardPoolAdapterCalls::Withdraw(element) => element.encode(),
                ConvexV1BaseRewardPoolAdapterCalls::WithdrawAll(element) => element.encode(),
                ConvexV1BaseRewardPoolAdapterCalls::WithdrawAllAndUnwrap(element) => {
                    element.encode()
                }
                ConvexV1BaseRewardPoolAdapterCalls::WithdrawAndUnwrap(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for ConvexV1BaseRewardPoolAdapterCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                ConvexV1BaseRewardPoolAdapterCalls::GearboxAdapterType(element) => element.fmt(f),
                ConvexV1BaseRewardPoolAdapterCalls::GearboxAdapterVersion(element) => {
                    element.fmt(f)
                }
                ConvexV1BaseRewardPoolAdapterCalls::BalanceOf(element) => element.fmt(f),
                ConvexV1BaseRewardPoolAdapterCalls::CreditFacade(element) => element.fmt(f),
                ConvexV1BaseRewardPoolAdapterCalls::CreditManager(element) => element.fmt(f),
                ConvexV1BaseRewardPoolAdapterCalls::Crv(element) => element.fmt(f),
                ConvexV1BaseRewardPoolAdapterCalls::CurrentRewards(element) => element.fmt(f),
                ConvexV1BaseRewardPoolAdapterCalls::CurveLPtoken(element) => element.fmt(f),
                ConvexV1BaseRewardPoolAdapterCalls::Cvx(element) => element.fmt(f),
                ConvexV1BaseRewardPoolAdapterCalls::CvxLPtoken(element) => element.fmt(f),
                ConvexV1BaseRewardPoolAdapterCalls::Donate(element) => element.fmt(f),
                ConvexV1BaseRewardPoolAdapterCalls::Duration(element) => element.fmt(f),
                ConvexV1BaseRewardPoolAdapterCalls::Earned(element) => element.fmt(f),
                ConvexV1BaseRewardPoolAdapterCalls::ExtraReward1(element) => element.fmt(f),
                ConvexV1BaseRewardPoolAdapterCalls::ExtraReward2(element) => element.fmt(f),
                ConvexV1BaseRewardPoolAdapterCalls::ExtraRewards(element) => element.fmt(f),
                ConvexV1BaseRewardPoolAdapterCalls::ExtraRewardsLength(element) => element.fmt(f),
                ConvexV1BaseRewardPoolAdapterCalls::GetReward(element) => element.fmt(f),
                ConvexV1BaseRewardPoolAdapterCalls::GetRewardWithAccountAndClaimExtras(element) => {
                    element.fmt(f)
                }
                ConvexV1BaseRewardPoolAdapterCalls::HistoricalRewards(element) => element.fmt(f),
                ConvexV1BaseRewardPoolAdapterCalls::LastTimeRewardApplicable(element) => {
                    element.fmt(f)
                }
                ConvexV1BaseRewardPoolAdapterCalls::LastUpdateTime(element) => element.fmt(f),
                ConvexV1BaseRewardPoolAdapterCalls::NewRewardRatio(element) => element.fmt(f),
                ConvexV1BaseRewardPoolAdapterCalls::Operator(element) => element.fmt(f),
                ConvexV1BaseRewardPoolAdapterCalls::PeriodFinish(element) => element.fmt(f),
                ConvexV1BaseRewardPoolAdapterCalls::Pid(element) => element.fmt(f),
                ConvexV1BaseRewardPoolAdapterCalls::QueuedRewards(element) => element.fmt(f),
                ConvexV1BaseRewardPoolAdapterCalls::RewardManager(element) => element.fmt(f),
                ConvexV1BaseRewardPoolAdapterCalls::RewardPerToken(element) => element.fmt(f),
                ConvexV1BaseRewardPoolAdapterCalls::RewardPerTokenStored(element) => element.fmt(f),
                ConvexV1BaseRewardPoolAdapterCalls::RewardRate(element) => element.fmt(f),
                ConvexV1BaseRewardPoolAdapterCalls::RewardToken(element) => element.fmt(f),
                ConvexV1BaseRewardPoolAdapterCalls::Rewards(element) => element.fmt(f),
                ConvexV1BaseRewardPoolAdapterCalls::Stake(element) => element.fmt(f),
                ConvexV1BaseRewardPoolAdapterCalls::StakeAll(element) => element.fmt(f),
                ConvexV1BaseRewardPoolAdapterCalls::StakeFor(element) => element.fmt(f),
                ConvexV1BaseRewardPoolAdapterCalls::StakedPhantomToken(element) => element.fmt(f),
                ConvexV1BaseRewardPoolAdapterCalls::StakingToken(element) => element.fmt(f),
                ConvexV1BaseRewardPoolAdapterCalls::TargetContract(element) => element.fmt(f),
                ConvexV1BaseRewardPoolAdapterCalls::TotalSupply(element) => element.fmt(f),
                ConvexV1BaseRewardPoolAdapterCalls::UserRewardPerTokenPaid(element) => {
                    element.fmt(f)
                }
                ConvexV1BaseRewardPoolAdapterCalls::Withdraw(element) => element.fmt(f),
                ConvexV1BaseRewardPoolAdapterCalls::WithdrawAll(element) => element.fmt(f),
                ConvexV1BaseRewardPoolAdapterCalls::WithdrawAllAndUnwrap(element) => element.fmt(f),
                ConvexV1BaseRewardPoolAdapterCalls::WithdrawAndUnwrap(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<GearboxAdapterTypeCall> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: GearboxAdapterTypeCall) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::GearboxAdapterType(var)
        }
    }
    impl ::std::convert::From<GearboxAdapterVersionCall> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: GearboxAdapterVersionCall) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::GearboxAdapterVersion(var)
        }
    }
    impl ::std::convert::From<BalanceOfCall> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: BalanceOfCall) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::BalanceOf(var)
        }
    }
    impl ::std::convert::From<CreditFacadeCall> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: CreditFacadeCall) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::CreditFacade(var)
        }
    }
    impl ::std::convert::From<CreditManagerCall> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: CreditManagerCall) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::CreditManager(var)
        }
    }
    impl ::std::convert::From<CrvCall> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: CrvCall) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::Crv(var)
        }
    }
    impl ::std::convert::From<CurrentRewardsCall> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: CurrentRewardsCall) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::CurrentRewards(var)
        }
    }
    impl ::std::convert::From<CurveLPtokenCall> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: CurveLPtokenCall) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::CurveLPtoken(var)
        }
    }
    impl ::std::convert::From<CvxCall> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: CvxCall) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::Cvx(var)
        }
    }
    impl ::std::convert::From<CvxLPtokenCall> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: CvxLPtokenCall) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::CvxLPtoken(var)
        }
    }
    impl ::std::convert::From<DonateCall> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: DonateCall) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::Donate(var)
        }
    }
    impl ::std::convert::From<DurationCall> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: DurationCall) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::Duration(var)
        }
    }
    impl ::std::convert::From<EarnedCall> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: EarnedCall) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::Earned(var)
        }
    }
    impl ::std::convert::From<ExtraReward1Call> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: ExtraReward1Call) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::ExtraReward1(var)
        }
    }
    impl ::std::convert::From<ExtraReward2Call> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: ExtraReward2Call) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::ExtraReward2(var)
        }
    }
    impl ::std::convert::From<ExtraRewardsCall> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: ExtraRewardsCall) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::ExtraRewards(var)
        }
    }
    impl ::std::convert::From<ExtraRewardsLengthCall> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: ExtraRewardsLengthCall) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::ExtraRewardsLength(var)
        }
    }
    impl ::std::convert::From<GetRewardCall> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: GetRewardCall) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::GetReward(var)
        }
    }
    impl ::std::convert::From<GetRewardWithAccountAndClaimExtrasCall>
        for ConvexV1BaseRewardPoolAdapterCalls
    {
        fn from(var: GetRewardWithAccountAndClaimExtrasCall) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::GetRewardWithAccountAndClaimExtras(var)
        }
    }
    impl ::std::convert::From<HistoricalRewardsCall> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: HistoricalRewardsCall) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::HistoricalRewards(var)
        }
    }
    impl ::std::convert::From<LastTimeRewardApplicableCall> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: LastTimeRewardApplicableCall) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::LastTimeRewardApplicable(var)
        }
    }
    impl ::std::convert::From<LastUpdateTimeCall> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: LastUpdateTimeCall) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::LastUpdateTime(var)
        }
    }
    impl ::std::convert::From<NewRewardRatioCall> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: NewRewardRatioCall) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::NewRewardRatio(var)
        }
    }
    impl ::std::convert::From<OperatorCall> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: OperatorCall) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::Operator(var)
        }
    }
    impl ::std::convert::From<PeriodFinishCall> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: PeriodFinishCall) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::PeriodFinish(var)
        }
    }
    impl ::std::convert::From<PidCall> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: PidCall) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::Pid(var)
        }
    }
    impl ::std::convert::From<QueuedRewardsCall> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: QueuedRewardsCall) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::QueuedRewards(var)
        }
    }
    impl ::std::convert::From<RewardManagerCall> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: RewardManagerCall) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::RewardManager(var)
        }
    }
    impl ::std::convert::From<RewardPerTokenCall> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: RewardPerTokenCall) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::RewardPerToken(var)
        }
    }
    impl ::std::convert::From<RewardPerTokenStoredCall> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: RewardPerTokenStoredCall) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::RewardPerTokenStored(var)
        }
    }
    impl ::std::convert::From<RewardRateCall> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: RewardRateCall) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::RewardRate(var)
        }
    }
    impl ::std::convert::From<RewardTokenCall> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: RewardTokenCall) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::RewardToken(var)
        }
    }
    impl ::std::convert::From<RewardsCall> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: RewardsCall) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::Rewards(var)
        }
    }
    impl ::std::convert::From<StakeCall> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: StakeCall) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::Stake(var)
        }
    }
    impl ::std::convert::From<StakeAllCall> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: StakeAllCall) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::StakeAll(var)
        }
    }
    impl ::std::convert::From<StakeForCall> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: StakeForCall) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::StakeFor(var)
        }
    }
    impl ::std::convert::From<StakedPhantomTokenCall> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: StakedPhantomTokenCall) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::StakedPhantomToken(var)
        }
    }
    impl ::std::convert::From<StakingTokenCall> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: StakingTokenCall) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::StakingToken(var)
        }
    }
    impl ::std::convert::From<TargetContractCall> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: TargetContractCall) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::TargetContract(var)
        }
    }
    impl ::std::convert::From<TotalSupplyCall> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: TotalSupplyCall) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::TotalSupply(var)
        }
    }
    impl ::std::convert::From<UserRewardPerTokenPaidCall> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: UserRewardPerTokenPaidCall) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::UserRewardPerTokenPaid(var)
        }
    }
    impl ::std::convert::From<WithdrawCall> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: WithdrawCall) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::Withdraw(var)
        }
    }
    impl ::std::convert::From<WithdrawAllCall> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: WithdrawAllCall) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::WithdrawAll(var)
        }
    }
    impl ::std::convert::From<WithdrawAllAndUnwrapCall> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: WithdrawAllAndUnwrapCall) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::WithdrawAllAndUnwrap(var)
        }
    }
    impl ::std::convert::From<WithdrawAndUnwrapCall> for ConvexV1BaseRewardPoolAdapterCalls {
        fn from(var: WithdrawAndUnwrapCall) -> Self {
            ConvexV1BaseRewardPoolAdapterCalls::WithdrawAndUnwrap(var)
        }
    }
}
