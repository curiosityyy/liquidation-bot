pub use poolservice_mod::*;
#[allow(clippy::too_many_arguments)]
mod poolservice_mod {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "PoolService was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static POOLSERVICE_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressProvider\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_dieselAddress\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_interestRateModelAddress\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_expectedLiquidityLimit\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"referralCode\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"AddLiquidity\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creditManager\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"creditAccount\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Borrow\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creditManager\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"BorrowForbidden\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creditManager\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"NewCreditManagerConnected\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"NewExpectedLiquidityLimit\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newInterestRateModel\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"NewInterestRateModel\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"NewWithdrawFee\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Paused\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"RemoveLiquidity\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creditManager\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Repay\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creditManager\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"UncoveredLoss\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Unpaused\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"_cumulativeIndex_RAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"_expectedLiquidityLU\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"_timestampLU\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"referralCode\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"addLiquidity\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"addressProvider\",\"outputs\":[{\"internalType\":\"contract AddressProvider\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"availableLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"borrowAPY_RAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"calcLinearCumulative_RAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cumulativeIndex_RAY\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"currentBorrowRate_RAY\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"timeDifference\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"calcLinearIndex_RAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creditManager\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"connectCreditManager\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"creditManagers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"creditManagersCanBorrow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"creditManagersCanRepay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"creditManagersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"dieselToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"expectedLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"expectedLiquidityLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creditManager\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"forbidCreditManagerToBorrow\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"fromDiesel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getDieselRate_RAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"interestRateModel\",\"outputs\":[{\"internalType\":\"contract IInterestRateModel\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"creditAccount\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"lendCreditAccount\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"pause\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"repayCreditAccount\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setExpectedLiquidityLimit\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setWithdrawFee\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"toDiesel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalBorrowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"unpause\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_interestRateModel\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"updateInterestRateModel\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static POOLSERVICE_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x60a06040523480156200001157600080fd5b50604051620028623803806200286283398101604081905262000034916200063a565b6000805460ff1916905560408051808201909152600281526105a360f41b602082015285906001600160a01b0382166200008c5760405162461bcd60e51b8152600401620000839190620006a1565b60405180910390fd5b50806001600160a01b031663087376956040518163ffffffff1660e01b8152600401602060405180830381865afa158015620000cc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000f29190620006f9565b6001600160a01b0390811660805260018055861615801591506200011e57506001600160a01b03841615155b80156200013357506001600160a01b03831615155b80156200014857506001600160a01b03821615155b6040518060400160405280600281526020016105a360f41b81525090620001845760405162461bcd60e51b8152600401620000839190620006a1565b50600580546001600160a01b038088166001600160a01b03199283168117909355600780548883169084161790556008805491871691909216179055604080516326c74fc360e01b815290516326c74fc3916004808201926020929091908290030181865afa158015620001fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002229190620006f9565b600c80546001600160a01b0319166001600160a01b03929092169190911790556b033b2e3c9fd0803ce8000000600d556200025d826200026b565b60035550620007c192505050565b60408051808201909152600281526105a360f41b60208201526001600160a01b038216620002ae5760405162461bcd60e51b8152600401620000839190620006a1565b50600680546001600160a01b0319166001600160a01b038316179055620002d660006200030d565b6040516001600160a01b038216907f0ec6cb7631d36954a05ffd646135bfd9995c71e7fa36d26abb1ad9f24a040ea190600090a250565b8062000318620003c8565b6200032491906200072d565b6002556200033162000441565b600d556006546002546001600160a01b03909116906342568d44906200035662000473565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401602060405180830381865afa15801562000398573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003be919062000747565b600e555042600f55565b600080600f5442620003db91906200072d565b905060006301e133806b033b2e3c9fd0803ce800000083600e5460045462000404919062000761565b62000410919062000761565b6200041c919062000783565b62000428919062000783565b9050806002546200043a9190620007a6565b9250505090565b600080600f54426200045491906200072d565b90506200046d600d54600e5483620004e860201b60201c565b91505090565b6007546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015620004bd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004e3919062000747565b905090565b6000806301e13380620004fc848662000761565b62000508919062000783565b62000520906b033b2e3c9fd0803ce8000000620007a6565b90506200053c81866200054560201b620017ba1790919060201c565b95945050505050565b600082158062000553575081155b15620005625750600062000617565b816200057c60026b033b2e3c9fd0803ce800000062000783565b6200058a906000196200072d565b62000596919062000783565b831115604051806040016040528060028152602001614d3160f01b81525090620005d55760405162461bcd60e51b8152600401620000839190620006a1565b506b033b2e3c9fd0803ce8000000620005f060028262000783565b620005fc848662000761565b620006089190620007a6565b62000614919062000783565b90505b92915050565b80516001600160a01b03811681146200063557600080fd5b919050565b600080600080600060a086880312156200065357600080fd5b6200065e866200061d565b94506200066e602087016200061d565b93506200067e604087016200061d565b92506200068e606087016200061d565b9150608086015190509295509295909350565b600060208083528351808285015260005b81811015620006d057858101830151858201604001528201620006b2565b81811115620006e3576000604083870101525b50601f01601f1916929092016040019392505050565b6000602082840312156200070c57600080fd5b62000614826200061d565b634e487b7160e01b600052601160045260246000fd5b60008282101562000742576200074262000717565b500390565b6000602082840312156200075a57600080fd5b5051919050565b60008160001904831182151516156200077e576200077e62000717565b500290565b600082620007a157634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115620007bc57620007bc62000717565b500190565b60805161205b620008076000396000818161069b015281816108420152818161095f01528181610b5d01528181610f1e0152818161105b01526114f2015261205b6000f3fe608060405234801561001057600080fd5b506004361061021c5760003560e01c8063609ae31711610125578063bf28068b116100ad578063dbcb313b1161007c578063dbcb313b1461044e578063e941fa7814610457578063ef8d960314610460578063f3fdb15a14610469578063fe14112d1461047c57600080fd5b8063bf28068b14610402578063c5f956af14610415578063ca9505e414610428578063cf33d9551461043b57600080fd5b80638456cb59116100f45780638456cb59146103b95780639aa5d462146103c1578063a4e8273e146103d4578063b6ac642a146103dc578063bb04b193146103ef57600080fd5b8063609ae3171461038d5780636f307dc31461039657806374375359146103a9578063788c6bfe146103b157600080fd5b80633e163df0116101a85780634d778ad1116101775780634d778ad1146103415780635427c9381461035457806354fd4d50146103675780635664cacf1461036f5780635c975abb1461038257600080fd5b80633e163df0146103045780633f4ba83a1461032757806345d31f9d1461032f5780634c19386c1461033857600080fd5b80631e16e4fc116101ef5780631e16e4fc1461026d5780632954018c146102985780632e97ca21146102ab57806331d8bc27146102de57806336dda7d5146102f157600080fd5b8063030dbb041461022157806305fe138b1461023d578063078c4781146102505780630fce70fb14610265575b600080fd5b61022a60025481565b6040519081526020015b60405180910390f35b61022a61024b366004611dd8565b610484565b61026361025e366004611e08565b610686565b005b61022a610793565b61028061027b366004611e25565b6107bb565b6040516001600160a01b039091168152602001610234565b600554610280906001600160a01b031681565b6102ce6102b9366004611e08565b60096020526000908152604090205460ff1681565b6040519015158152602001610234565b61022a6102ec366004611e3e565b6107e5565b600854610280906001600160a01b031681565b6102ce610312366004611e08565b600a6020526000908152604090205460ff1681565b61026361082d565b61022a600e5481565b61022a60045481565b61022a61034f366004611e25565b6108fb565b61022a610362366004611e25565b61092a565b61022a600181565b61026361037d366004611e08565b61094a565b60005460ff166102ce565b61022a600f5481565b600754610280906001600160a01b031681565b61022a610a1a565b61022a610a8c565b610263610b48565b6102636103cf366004611e6a565b610c14565b600b5461022a565b6102636103ea366004611e25565b610f09565b6102636103fd366004611e25565b611046565b610263610410366004611dd8565b61113f565b600c54610280906001600160a01b031681565b610263610436366004611e3e565b611227565b610263610449366004611e08565b6114dd565b61022a600d5481565b61022a60105481565b61022a60035481565b600654610280906001600160a01b031681565b61022a61174e565b6000805460ff16156104b15760405162461bcd60e51b81526004016104a890611ea2565b60405180910390fd5b600260015414156105045760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104a8565b60026001819055604080518082019091529081526105a360f41b60208201526001600160a01b03831661054a5760405162461bcd60e51b81526004016104a89190611ef8565b5060006105568461092a565b9050600061056f6010548361187390919063ffffffff16565b9050600061057d8284611f41565b600754909150610597906001600160a01b0316868361189b565b81156105ba57600c546007546105ba916001600160a01b0391821691168461189b565b600854604051632770a7eb60e21b8152336004820152602481018890526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b15801561060657600080fd5b505af115801561061a573d6000803e3d6000fd5b505050508260025461062c9190611f41565b6002556106396000611903565b6040518681526001600160a01b0386169033907fd8ae9b9ba89e637bcb66a69ac91e8f688018e81d6f92c57e02226425c8efbdf69060200160405180910390a36001805595945050505050565b604051632f92cd5d60e11b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635f259aba90602401602060405180830381865afa1580156106ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070e9190611f58565b6040518060400160405280600481526020016320a1a61960e11b815250906107495760405162461bcd60e51b81526004016104a89190611ef8565b506001600160a01b038116600081815260096020526040808220805460ff19169055517f9181736fce85d2d4cca2e4406f10679302ae5c387180fdb62963af3cd9a24fd69190a250565b600080600f54426107a49190611f41565b90506107b5600d54600e54836107e5565b91505090565b600b81815481106107cb57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000806301e133806107f78486611f7a565b6108019190611f99565b61081690676765c793fa10079d601b1b611fbb565b905061082285826117ba565b9150505b9392505050565b604051630d4eb5db60e41b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d4eb5db090602401602060405180830381865afa158015610891573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b59190611f58565b6040518060400160405280600481526020016341434c3160e01b815250906108f05760405162461bcd60e51b81526004016104a89190611ef8565b506108f96119b3565b565b6000610905610a8c565b61091a676765c793fa10079d601b1b84611f7a565b6109249190611f99565b92915050565b6000676765c793fa10079d601b1b610940610a8c565b61091a9084611f7a565b604051632f92cd5d60e11b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635f259aba90602401602060405180830381865afa1580156109ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d29190611f58565b6040518060400160405280600481526020016320a1a61960e11b81525090610a0d5760405162461bcd60e51b81526004016104a89190611ef8565b50610a1781611a46565b50565b6007546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610a63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a879190611fd3565b905090565b600080600860009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ae2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b069190611fd3565b905080610b1f57676765c793fa10079d601b1b91505090565b80676765c793fa10079d601b1b610b3461174e565b610b3e9190611f7a565b6107b59190611f99565b604051630e907b1960e21b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690633a41ec6490602401602060405180830381865afa158015610bac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd09190611f58565b6040518060400160405280600481526020016341434c3160e01b81525090610c0b5760405162461bcd60e51b81526004016104a89190611ef8565b506108f9611ae3565b60005460ff1615610c375760405162461bcd60e51b81526004016104a890611ea2565b60026001541415610c8a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104a8565b60026001819055604080518082019091529081526105a360f41b60208201526001600160a01b038316610cd05760405162461bcd60e51b81526004016104a89190611ef8565b5060035483610cdd61174e565b610ce79190611fbb565b11156040518060400160405280600381526020016228299960e91b81525090610d235760405162461bcd60e51b81526004016104a89190611ef8565b506007546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610d6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d919190611fd3565b600754909150610dac906001600160a01b0316333087611b3b565b6007546040516370a0823160e01b815230600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa158015610df4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e189190611fd3565b610e229190611f41565b6008549094506001600160a01b03166340c10f1984610e40876108fb565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015610e8657600080fd5b505af1158015610e9a573d6000803e3d6000fd5b5050505083600254610eac9190611fbb565b600255610eb96000611903565b60408051858152602081018490526001600160a01b0385169133917fd2491a9b4fe81a7cd4511e8b7b7743951b061dad5bed7da8a7795b080ee08c7e910160405180910390a35050600180555050565b604051632f92cd5d60e11b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635f259aba90602401602060405180830381865afa158015610f6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f919190611f58565b6040518060400160405280600481526020016320a1a61960e11b81525090610fcc5760405162461bcd60e51b81526004016104a89190611ef8565b5060408051808201909152600381526250533360e81b602082015260648211156110095760405162461bcd60e51b81526004016104a89190611ef8565b5060108190556040518181527fd5fe46099fa396290a7f57e36c3c3c8774e2562c18ed5d1dcc0fa75071e03f1d906020015b60405180910390a150565b604051632f92cd5d60e11b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635f259aba90602401602060405180830381865afa1580156110aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ce9190611f58565b6040518060400160405280600481526020016320a1a61960e11b815250906111095760405162461bcd60e51b81526004016104a89190611ef8565b5060038190556040518181527fd7a183c9fe85b604c25d54bd676e0866f6c13bcca9fb9b0850213de118fdc99c9060200161103b565b60005460ff16156111625760405162461bcd60e51b81526004016104a890611ea2565b33600090815260096020908152604091829020548251808401909352600383526205053360ec1b9183019190915260ff166111b05760405162461bcd60e51b81526004016104a89190611ef8565b506007546111c8906001600160a01b0316828461189b565b6111d26000611903565b816004546111e09190611fbb565b6004556040518281526001600160a01b0382169033907f312a5e5e1079f5dda4e95dbbd0b908b291fd5b992ef22073643ab691572c5b529060200160405180910390a35050565b60005460ff161561124a5760405162461bcd60e51b81526004016104a890611ea2565b336000908152600a6020908152604091829020548251808401909352600383526205053360ec1b9183019190915260ff166112985760405162461bcd60e51b81526004016104a89190611ef8565b50811561133557600854600c546001600160a01b03918216916340c10f1991166112c1856108fb565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561130757600080fd5b505af115801561131b573d6000803e3d6000fd5b505050508160025461132d9190611fbb565b600255611475565b6000611340826108fb565b600854600c546040516370a0823160e01b81526001600160a01b0391821660048201529293506000929116906370a0823190602401602060405180830381865afa158015611392573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b69190611fd3565b90508181101561140a57905080337fef3653ded679720ab04913b6f3820be7cedc8286d42ff5dd8dff17e91bd2964c6113ee8361092a565b6113f89086611f41565b60405190815260200160405180910390a25b600854600c54604051632770a7eb60e21b81526001600160a01b03918216600482015260248101859052911690639dc29fac90604401600060405180830381600087803b15801561145a57600080fd5b505af115801561146e573d6000803e3d6000fd5b5050505050505b61147e81611903565b82600460008282546114909190611f41565b9091555050604080518481526020810184905290810182905233907f2fe77b1c99aca6b022b8efc6e3e8dd1b48b30748709339b65c50ef3263443e099060600160405180910390a2505050565b604051632f92cd5d60e11b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635f259aba90602401602060405180830381865afa158015611541573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115659190611f58565b6040518060400160405280600481526020016320a1a61960e11b815250906115a05760405162461bcd60e51b81526004016104a89190611ef8565b50806001600160a01b031663570a7af26040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116039190611fec565b6001600160a01b0316306001600160a01b0316146040518060400160405280600381526020016250533160e81b815250906116515760405162461bcd60e51b81526004016104a89190611ef8565b506001600160a01b0381166000908152600a602090815260409182902054825180840190935260038352621414cd60ea1b9183019190915260ff16156116aa5760405162461bcd60e51b81526004016104a89190611ef8565b506001600160a01b03811660008181526009602090815260408083208054600160ff199182168117909255600a90935281842080549093168117909255600b8054928301815583527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db990910180546001600160a01b03191684179055517fe076020e7eac3915d33aec40c24f95e73eb6c9921ff89747d50aa8fd934d2c019190a250565b600080600f544261175f9190611f41565b905060006301e13380676765c793fa10079d601b1b83600e546004546117859190611f7a565b61178f9190611f7a565b6117999190611f99565b6117a39190611f99565b9050806002546117b39190611fbb565b9250505090565b60008215806117c7575081155b156117d457506000610924565b816117eb6002676765c793fa10079d601b1b611f99565b6117f790600019611f41565b6118019190611f99565b831115604051806040016040528060028152602001614d3160f01b8152509061183d5760405162461bcd60e51b81526004016104a89190611ef8565b50676765c793fa10079d601b1b611855600282611f99565b61185f8486611f7a565b6118699190611fbb565b6108269190611f99565b6000821580611880575081155b1561188d57506000610924565b612710611855600282611f99565b6040516001600160a01b0383166024820152604481018290526118fe90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611b79565b505050565b8061190c61174e565b6119169190611f41565b600255611921610793565b600d556006546002546001600160a01b03909116906342568d4490611944610a1a565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401602060405180830381865afa158015611985573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a99190611fd3565b600e555042600f55565b60005460ff166119fc5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016104a8565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60408051808201909152600281526105a360f41b60208201526001600160a01b038216611a865760405162461bcd60e51b81526004016104a89190611ef8565b50600680546001600160a01b0319166001600160a01b038316179055611aac6000611903565b6040516001600160a01b038216907f0ec6cb7631d36954a05ffd646135bfd9995c71e7fa36d26abb1ad9f24a040ea190600090a250565b60005460ff1615611b065760405162461bcd60e51b81526004016104a890611ea2565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611a293390565b6040516001600160a01b0380851660248301528316604482015260648101829052611b739085906323b872dd60e01b906084016118c7565b50505050565b6000611bce826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c4b9092919063ffffffff16565b8051909150156118fe5780806020019051810190611bec9190611f58565b6118fe5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104a8565b6060611c5a8484600085611c62565b949350505050565b606082471015611cc35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104a8565b843b611d115760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104a8565b600080866001600160a01b03168587604051611d2d9190612009565b60006040518083038185875af1925050503d8060008114611d6a576040519150601f19603f3d011682016040523d82523d6000602084013e611d6f565b606091505b5091509150611d7f828286611d8a565b979650505050505050565b60608315611d99575081610826565b825115611da95782518084602001fd5b8160405162461bcd60e51b81526004016104a89190611ef8565b6001600160a01b0381168114610a1757600080fd5b60008060408385031215611deb57600080fd5b823591506020830135611dfd81611dc3565b809150509250929050565b600060208284031215611e1a57600080fd5b813561082681611dc3565b600060208284031215611e3757600080fd5b5035919050565b600080600060608486031215611e5357600080fd5b505081359360208301359350604090920135919050565b600080600060608486031215611e7f57600080fd5b833592506020840135611e9181611dc3565b929592945050506040919091013590565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60005b83811015611ee7578181015183820152602001611ecf565b83811115611b735750506000910152565b6020815260008251806020840152611f17816040850160208701611ecc565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601160045260246000fd5b600082821015611f5357611f53611f2b565b500390565b600060208284031215611f6a57600080fd5b8151801515811461082657600080fd5b6000816000190483118215151615611f9457611f94611f2b565b500290565b600082611fb657634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115611fce57611fce611f2b565b500190565b600060208284031215611fe557600080fd5b5051919050565b600060208284031215611ffe57600080fd5b815161082681611dc3565b6000825161201b818460208701611ecc565b919091019291505056fea2646970667358221220325276eba9f6b91ea21e14b83cd87c0bc03b2e0cabf22faaff1825b29a7f7e1864736f6c634300080a0033" . parse () . expect ("invalid bytecode")
        });
    #[derive(Clone)]
    pub struct PoolService<M>(ethers::contract::Contract<M>);
    impl<M> std::ops::Deref for PoolService<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for PoolService<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(PoolService))
                .field(&self.address())
                .finish()
        }
    }
    impl<'a, M: ethers::providers::Middleware> PoolService<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), POOLSERVICE_ABI.clone(), client).into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                POOLSERVICE_ABI.clone(),
                POOLSERVICE_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `_cumulativeIndex_RAY` (0xdbcb313b) function"]
        pub fn cumulative_index_ray(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([219, 203, 49, 59], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `_expectedLiquidityLU` (0x030dbb04) function"]
        pub fn expected_liquidity_lu(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([3, 13, 187, 4], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `_timestampLU` (0x609ae317) function"]
        pub fn timestamp_lu(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([96, 154, 227, 23], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `addLiquidity` (0x9aa5d462) function"]
        pub fn add_liquidity(
            &self,
            amount: ethers::core::types::U256,
            on_behalf_of: ethers::core::types::Address,
            referral_code: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([154, 165, 212, 98], (amount, on_behalf_of, referral_code))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `addressProvider` (0x2954018c) function"]
        pub fn address_provider(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([41, 84, 1, 140], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `availableLiquidity` (0x74375359) function"]
        pub fn available_liquidity(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([116, 55, 83, 89], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `borrowAPY_RAY` (0x45d31f9d) function"]
        pub fn borrow_apy_ray(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([69, 211, 31, 157], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `calcLinearCumulative_RAY` (0x0fce70fb) function"]
        pub fn calc_linear_cumulative_ray(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([15, 206, 112, 251], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `calcLinearIndex_RAY` (0x31d8bc27) function"]
        pub fn calc_linear_index_ray(
            &self,
            cumulative_index_ray: ethers::core::types::U256,
            current_borrow_rate_ray: ethers::core::types::U256,
            time_difference: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash(
                    [49, 216, 188, 39],
                    (
                        cumulative_index_ray,
                        current_borrow_rate_ray,
                        time_difference,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `connectCreditManager` (0xcf33d955) function"]
        pub fn connect_credit_manager(
            &self,
            credit_manager: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([207, 51, 217, 85], credit_manager)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `creditManagers` (0x1e16e4fc) function"]
        pub fn credit_managers(
            &self,
            p0: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([30, 22, 228, 252], p0)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `creditManagersCanBorrow` (0x2e97ca21) function"]
        pub fn credit_managers_can_borrow(
            &self,
            p0: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([46, 151, 202, 33], p0)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `creditManagersCanRepay` (0x3e163df0) function"]
        pub fn credit_managers_can_repay(
            &self,
            p0: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([62, 22, 61, 240], p0)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `creditManagersCount` (0xa4e8273e) function"]
        pub fn credit_managers_count(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([164, 232, 39, 62], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `dieselToken` (0x36dda7d5) function"]
        pub fn diesel_token(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([54, 221, 167, 213], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `expectedLiquidity` (0xfe14112d) function"]
        pub fn expected_liquidity(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([254, 20, 17, 45], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `expectedLiquidityLimit` (0xef8d9603) function"]
        pub fn expected_liquidity_limit(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([239, 141, 150, 3], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `forbidCreditManagerToBorrow` (0x078c4781) function"]
        pub fn forbid_credit_manager_to_borrow(
            &self,
            credit_manager: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([7, 140, 71, 129], credit_manager)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `fromDiesel` (0x5427c938) function"]
        pub fn from_diesel(
            &self,
            amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([84, 39, 201, 56], amount)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getDieselRate_RAY` (0x788c6bfe) function"]
        pub fn get_diesel_rate_ray(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([120, 140, 107, 254], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `interestRateModel` (0xf3fdb15a) function"]
        pub fn interest_rate_model(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([243, 253, 177, 90], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `lendCreditAccount` (0xbf28068b) function"]
        pub fn lend_credit_account(
            &self,
            borrowed_amount: ethers::core::types::U256,
            credit_account: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([191, 40, 6, 139], (borrowed_amount, credit_account))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `pause` (0x8456cb59) function"]
        pub fn pause(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([132, 86, 203, 89], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `paused` (0x5c975abb) function"]
        pub fn paused(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([92, 151, 90, 187], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `removeLiquidity` (0x05fe138b) function"]
        pub fn remove_liquidity(
            &self,
            amount: ethers::core::types::U256,
            to: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([5, 254, 19, 139], (amount, to))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `repayCreditAccount` (0xca9505e4) function"]
        pub fn repay_credit_account(
            &self,
            borrowed_amount: ethers::core::types::U256,
            profit: ethers::core::types::U256,
            loss: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([202, 149, 5, 228], (borrowed_amount, profit, loss))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setExpectedLiquidityLimit` (0xbb04b193) function"]
        pub fn set_expected_liquidity_limit(
            &self,
            new_limit: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([187, 4, 177, 147], new_limit)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setWithdrawFee` (0xb6ac642a) function"]
        pub fn set_withdraw_fee(
            &self,
            fee: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([182, 172, 100, 42], fee)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `toDiesel` (0x4d778ad1) function"]
        pub fn to_diesel(
            &self,
            amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([77, 119, 138, 209], amount)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `totalBorrowed` (0x4c19386c) function"]
        pub fn total_borrowed(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([76, 25, 56, 108], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `treasuryAddress` (0xc5f956af) function"]
        pub fn treasury_address(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([197, 249, 86, 175], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `underlying` (0x6f307dc3) function"]
        pub fn underlying(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([111, 48, 125, 195], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `unpause` (0x3f4ba83a) function"]
        pub fn unpause(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([63, 75, 168, 58], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `updateInterestRateModel` (0x5664cacf) function"]
        pub fn update_interest_rate_model(
            &self,
            interest_rate_model: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([86, 100, 202, 207], interest_rate_model)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `version` (0x54fd4d50) function"]
        pub fn version(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([84, 253, 77, 80], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `withdrawFee` (0xe941fa78) function"]
        pub fn withdraw_fee(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([233, 65, 250, 120], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `AddLiquidity` event"]
        pub fn add_liquidity_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, AddLiquidityFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `Borrow` event"]
        pub fn borrow_filter(&self) -> ethers::contract::builders::Event<M, BorrowFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `BorrowForbidden` event"]
        pub fn borrow_forbidden_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, BorrowForbiddenFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `NewCreditManagerConnected` event"]
        pub fn new_credit_manager_connected_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, NewCreditManagerConnectedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `NewExpectedLiquidityLimit` event"]
        pub fn new_expected_liquidity_limit_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, NewExpectedLiquidityLimitFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `NewInterestRateModel` event"]
        pub fn new_interest_rate_model_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, NewInterestRateModelFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `NewWithdrawFee` event"]
        pub fn new_withdraw_fee_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, NewWithdrawFeeFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `Paused` event"]
        pub fn paused_filter(&self) -> ethers::contract::builders::Event<M, PausedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `RemoveLiquidity` event"]
        pub fn remove_liquidity_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, RemoveLiquidityFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `Repay` event"]
        pub fn repay_filter(&self) -> ethers::contract::builders::Event<M, RepayFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `UncoveredLoss` event"]
        pub fn uncovered_loss_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, UncoveredLossFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `Unpaused` event"]
        pub fn unpaused_filter(&self) -> ethers::contract::builders::Event<M, UnpausedFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, PoolServiceEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for PoolService<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "AddLiquidity",
        abi = "AddLiquidity(address,address,uint256,uint256)"
    )]
    pub struct AddLiquidityFilter {
        #[ethevent(indexed)]
        pub sender: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub on_behalf_of: ethers::core::types::Address,
        pub amount: ethers::core::types::U256,
        pub referral_code: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "Borrow", abi = "Borrow(address,address,uint256)")]
    pub struct BorrowFilter {
        #[ethevent(indexed)]
        pub credit_manager: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub credit_account: ethers::core::types::Address,
        pub amount: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "BorrowForbidden", abi = "BorrowForbidden(address)")]
    pub struct BorrowForbiddenFilter {
        #[ethevent(indexed)]
        pub credit_manager: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "NewCreditManagerConnected",
        abi = "NewCreditManagerConnected(address)"
    )]
    pub struct NewCreditManagerConnectedFilter {
        #[ethevent(indexed)]
        pub credit_manager: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "NewExpectedLiquidityLimit",
        abi = "NewExpectedLiquidityLimit(uint256)"
    )]
    pub struct NewExpectedLiquidityLimitFilter {
        pub new_limit: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "NewInterestRateModel", abi = "NewInterestRateModel(address)")]
    pub struct NewInterestRateModelFilter {
        #[ethevent(indexed)]
        pub new_interest_rate_model: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "NewWithdrawFee", abi = "NewWithdrawFee(uint256)")]
    pub struct NewWithdrawFeeFilter {
        pub fee: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "Paused", abi = "Paused(address)")]
    pub struct PausedFilter {
        pub account: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "RemoveLiquidity",
        abi = "RemoveLiquidity(address,address,uint256)"
    )]
    pub struct RemoveLiquidityFilter {
        #[ethevent(indexed)]
        pub sender: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub to: ethers::core::types::Address,
        pub amount: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "Repay", abi = "Repay(address,uint256,uint256,uint256)")]
    pub struct RepayFilter {
        #[ethevent(indexed)]
        pub credit_manager: ethers::core::types::Address,
        pub borrowed_amount: ethers::core::types::U256,
        pub profit: ethers::core::types::U256,
        pub loss: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "UncoveredLoss", abi = "UncoveredLoss(address,uint256)")]
    pub struct UncoveredLossFilter {
        #[ethevent(indexed)]
        pub credit_manager: ethers::core::types::Address,
        pub loss: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "Unpaused", abi = "Unpaused(address)")]
    pub struct UnpausedFilter {
        pub account: ethers::core::types::Address,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum PoolServiceEvents {
        AddLiquidityFilter(AddLiquidityFilter),
        BorrowFilter(BorrowFilter),
        BorrowForbiddenFilter(BorrowForbiddenFilter),
        NewCreditManagerConnectedFilter(NewCreditManagerConnectedFilter),
        NewExpectedLiquidityLimitFilter(NewExpectedLiquidityLimitFilter),
        NewInterestRateModelFilter(NewInterestRateModelFilter),
        NewWithdrawFeeFilter(NewWithdrawFeeFilter),
        PausedFilter(PausedFilter),
        RemoveLiquidityFilter(RemoveLiquidityFilter),
        RepayFilter(RepayFilter),
        UncoveredLossFilter(UncoveredLossFilter),
        UnpausedFilter(UnpausedFilter),
    }
    impl ethers::contract::EthLogDecode for PoolServiceEvents {
        fn decode_log(log: &ethers::core::abi::RawLog) -> Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = AddLiquidityFilter::decode_log(log) {
                return Ok(PoolServiceEvents::AddLiquidityFilter(decoded));
            }
            if let Ok(decoded) = BorrowFilter::decode_log(log) {
                return Ok(PoolServiceEvents::BorrowFilter(decoded));
            }
            if let Ok(decoded) = BorrowForbiddenFilter::decode_log(log) {
                return Ok(PoolServiceEvents::BorrowForbiddenFilter(decoded));
            }
            if let Ok(decoded) = NewCreditManagerConnectedFilter::decode_log(log) {
                return Ok(PoolServiceEvents::NewCreditManagerConnectedFilter(decoded));
            }
            if let Ok(decoded) = NewExpectedLiquidityLimitFilter::decode_log(log) {
                return Ok(PoolServiceEvents::NewExpectedLiquidityLimitFilter(decoded));
            }
            if let Ok(decoded) = NewInterestRateModelFilter::decode_log(log) {
                return Ok(PoolServiceEvents::NewInterestRateModelFilter(decoded));
            }
            if let Ok(decoded) = NewWithdrawFeeFilter::decode_log(log) {
                return Ok(PoolServiceEvents::NewWithdrawFeeFilter(decoded));
            }
            if let Ok(decoded) = PausedFilter::decode_log(log) {
                return Ok(PoolServiceEvents::PausedFilter(decoded));
            }
            if let Ok(decoded) = RemoveLiquidityFilter::decode_log(log) {
                return Ok(PoolServiceEvents::RemoveLiquidityFilter(decoded));
            }
            if let Ok(decoded) = RepayFilter::decode_log(log) {
                return Ok(PoolServiceEvents::RepayFilter(decoded));
            }
            if let Ok(decoded) = UncoveredLossFilter::decode_log(log) {
                return Ok(PoolServiceEvents::UncoveredLossFilter(decoded));
            }
            if let Ok(decoded) = UnpausedFilter::decode_log(log) {
                return Ok(PoolServiceEvents::UnpausedFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for PoolServiceEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                PoolServiceEvents::AddLiquidityFilter(element) => element.fmt(f),
                PoolServiceEvents::BorrowFilter(element) => element.fmt(f),
                PoolServiceEvents::BorrowForbiddenFilter(element) => element.fmt(f),
                PoolServiceEvents::NewCreditManagerConnectedFilter(element) => element.fmt(f),
                PoolServiceEvents::NewExpectedLiquidityLimitFilter(element) => element.fmt(f),
                PoolServiceEvents::NewInterestRateModelFilter(element) => element.fmt(f),
                PoolServiceEvents::NewWithdrawFeeFilter(element) => element.fmt(f),
                PoolServiceEvents::PausedFilter(element) => element.fmt(f),
                PoolServiceEvents::RemoveLiquidityFilter(element) => element.fmt(f),
                PoolServiceEvents::RepayFilter(element) => element.fmt(f),
                PoolServiceEvents::UncoveredLossFilter(element) => element.fmt(f),
                PoolServiceEvents::UnpausedFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `_cumulativeIndex_RAY`function with signature `_cumulativeIndex_RAY()` and selector `[219, 203, 49, 59]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "_cumulativeIndex_RAY", abi = "_cumulativeIndex_RAY()")]
    pub struct CumulativeIndexRAYCall;
    #[doc = "Container type for all input parameters for the `_expectedLiquidityLU`function with signature `_expectedLiquidityLU()` and selector `[3, 13, 187, 4]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "_expectedLiquidityLU", abi = "_expectedLiquidityLU()")]
    pub struct ExpectedLiquidityLUCall;
    #[doc = "Container type for all input parameters for the `_timestampLU`function with signature `_timestampLU()` and selector `[96, 154, 227, 23]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "_timestampLU", abi = "_timestampLU()")]
    pub struct TimestampLUCall;
    #[doc = "Container type for all input parameters for the `addLiquidity`function with signature `addLiquidity(uint256,address,uint256)` and selector `[154, 165, 212, 98]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "addLiquidity", abi = "addLiquidity(uint256,address,uint256)")]
    pub struct AddLiquidityCall {
        pub amount: ethers::core::types::U256,
        pub on_behalf_of: ethers::core::types::Address,
        pub referral_code: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `addressProvider`function with signature `addressProvider()` and selector `[41, 84, 1, 140]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "addressProvider", abi = "addressProvider()")]
    pub struct AddressProviderCall;
    #[doc = "Container type for all input parameters for the `availableLiquidity`function with signature `availableLiquidity()` and selector `[116, 55, 83, 89]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "availableLiquidity", abi = "availableLiquidity()")]
    pub struct AvailableLiquidityCall;
    #[doc = "Container type for all input parameters for the `borrowAPY_RAY`function with signature `borrowAPY_RAY()` and selector `[69, 211, 31, 157]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "borrowAPY_RAY", abi = "borrowAPY_RAY()")]
    pub struct BorrowAPYRAYCall;
    #[doc = "Container type for all input parameters for the `calcLinearCumulative_RAY`function with signature `calcLinearCumulative_RAY()` and selector `[15, 206, 112, 251]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "calcLinearCumulative_RAY", abi = "calcLinearCumulative_RAY()")]
    pub struct CalcLinearCumulativeRAYCall;
    #[doc = "Container type for all input parameters for the `calcLinearIndex_RAY`function with signature `calcLinearIndex_RAY(uint256,uint256,uint256)` and selector `[49, 216, 188, 39]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "calcLinearIndex_RAY",
        abi = "calcLinearIndex_RAY(uint256,uint256,uint256)"
    )]
    pub struct CalcLinearIndexRAYCall {
        pub cumulative_index_ray: ethers::core::types::U256,
        pub current_borrow_rate_ray: ethers::core::types::U256,
        pub time_difference: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `connectCreditManager`function with signature `connectCreditManager(address)` and selector `[207, 51, 217, 85]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "connectCreditManager", abi = "connectCreditManager(address)")]
    pub struct ConnectCreditManagerCall {
        pub credit_manager: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `creditManagers`function with signature `creditManagers(uint256)` and selector `[30, 22, 228, 252]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "creditManagers", abi = "creditManagers(uint256)")]
    pub struct CreditManagersCall(pub ethers::core::types::U256);
    #[doc = "Container type for all input parameters for the `creditManagersCanBorrow`function with signature `creditManagersCanBorrow(address)` and selector `[46, 151, 202, 33]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "creditManagersCanBorrow",
        abi = "creditManagersCanBorrow(address)"
    )]
    pub struct CreditManagersCanBorrowCall(pub ethers::core::types::Address);
    #[doc = "Container type for all input parameters for the `creditManagersCanRepay`function with signature `creditManagersCanRepay(address)` and selector `[62, 22, 61, 240]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "creditManagersCanRepay",
        abi = "creditManagersCanRepay(address)"
    )]
    pub struct CreditManagersCanRepayCall(pub ethers::core::types::Address);
    #[doc = "Container type for all input parameters for the `creditManagersCount`function with signature `creditManagersCount()` and selector `[164, 232, 39, 62]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "creditManagersCount", abi = "creditManagersCount()")]
    pub struct CreditManagersCountCall;
    #[doc = "Container type for all input parameters for the `dieselToken`function with signature `dieselToken()` and selector `[54, 221, 167, 213]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "dieselToken", abi = "dieselToken()")]
    pub struct DieselTokenCall;
    #[doc = "Container type for all input parameters for the `expectedLiquidity`function with signature `expectedLiquidity()` and selector `[254, 20, 17, 45]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "expectedLiquidity", abi = "expectedLiquidity()")]
    pub struct ExpectedLiquidityCall;
    #[doc = "Container type for all input parameters for the `expectedLiquidityLimit`function with signature `expectedLiquidityLimit()` and selector `[239, 141, 150, 3]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "expectedLiquidityLimit", abi = "expectedLiquidityLimit()")]
    pub struct ExpectedLiquidityLimitCall;
    #[doc = "Container type for all input parameters for the `forbidCreditManagerToBorrow`function with signature `forbidCreditManagerToBorrow(address)` and selector `[7, 140, 71, 129]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "forbidCreditManagerToBorrow",
        abi = "forbidCreditManagerToBorrow(address)"
    )]
    pub struct ForbidCreditManagerToBorrowCall {
        pub credit_manager: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `fromDiesel`function with signature `fromDiesel(uint256)` and selector `[84, 39, 201, 56]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "fromDiesel", abi = "fromDiesel(uint256)")]
    pub struct FromDieselCall {
        pub amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `getDieselRate_RAY`function with signature `getDieselRate_RAY()` and selector `[120, 140, 107, 254]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "getDieselRate_RAY", abi = "getDieselRate_RAY()")]
    pub struct GetDieselRateRAYCall;
    #[doc = "Container type for all input parameters for the `interestRateModel`function with signature `interestRateModel()` and selector `[243, 253, 177, 90]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "interestRateModel", abi = "interestRateModel()")]
    pub struct InterestRateModelCall;
    #[doc = "Container type for all input parameters for the `lendCreditAccount`function with signature `lendCreditAccount(uint256,address)` and selector `[191, 40, 6, 139]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "lendCreditAccount", abi = "lendCreditAccount(uint256,address)")]
    pub struct LendCreditAccountCall {
        pub borrowed_amount: ethers::core::types::U256,
        pub credit_account: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `pause`function with signature `pause()` and selector `[132, 86, 203, 89]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "pause", abi = "pause()")]
    pub struct PauseCall;
    #[doc = "Container type for all input parameters for the `paused`function with signature `paused()` and selector `[92, 151, 90, 187]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "paused", abi = "paused()")]
    pub struct PausedCall;
    #[doc = "Container type for all input parameters for the `removeLiquidity`function with signature `removeLiquidity(uint256,address)` and selector `[5, 254, 19, 139]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "removeLiquidity", abi = "removeLiquidity(uint256,address)")]
    pub struct RemoveLiquidityCall {
        pub amount: ethers::core::types::U256,
        pub to: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `repayCreditAccount`function with signature `repayCreditAccount(uint256,uint256,uint256)` and selector `[202, 149, 5, 228]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "repayCreditAccount",
        abi = "repayCreditAccount(uint256,uint256,uint256)"
    )]
    pub struct RepayCreditAccountCall {
        pub borrowed_amount: ethers::core::types::U256,
        pub profit: ethers::core::types::U256,
        pub loss: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `setExpectedLiquidityLimit`function with signature `setExpectedLiquidityLimit(uint256)` and selector `[187, 4, 177, 147]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "setExpectedLiquidityLimit",
        abi = "setExpectedLiquidityLimit(uint256)"
    )]
    pub struct SetExpectedLiquidityLimitCall {
        pub new_limit: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `setWithdrawFee`function with signature `setWithdrawFee(uint256)` and selector `[182, 172, 100, 42]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "setWithdrawFee", abi = "setWithdrawFee(uint256)")]
    pub struct SetWithdrawFeeCall {
        pub fee: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `toDiesel`function with signature `toDiesel(uint256)` and selector `[77, 119, 138, 209]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "toDiesel", abi = "toDiesel(uint256)")]
    pub struct ToDieselCall {
        pub amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `totalBorrowed`function with signature `totalBorrowed()` and selector `[76, 25, 56, 108]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "totalBorrowed", abi = "totalBorrowed()")]
    pub struct TotalBorrowedCall;
    #[doc = "Container type for all input parameters for the `treasuryAddress`function with signature `treasuryAddress()` and selector `[197, 249, 86, 175]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "treasuryAddress", abi = "treasuryAddress()")]
    pub struct TreasuryAddressCall;
    #[doc = "Container type for all input parameters for the `underlying`function with signature `underlying()` and selector `[111, 48, 125, 195]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "underlying", abi = "underlying()")]
    pub struct UnderlyingCall;
    #[doc = "Container type for all input parameters for the `unpause`function with signature `unpause()` and selector `[63, 75, 168, 58]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "unpause", abi = "unpause()")]
    pub struct UnpauseCall;
    #[doc = "Container type for all input parameters for the `updateInterestRateModel`function with signature `updateInterestRateModel(address)` and selector `[86, 100, 202, 207]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "updateInterestRateModel",
        abi = "updateInterestRateModel(address)"
    )]
    pub struct UpdateInterestRateModelCall {
        pub interest_rate_model: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `version`function with signature `version()` and selector `[84, 253, 77, 80]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "version", abi = "version()")]
    pub struct VersionCall;
    #[doc = "Container type for all input parameters for the `withdrawFee`function with signature `withdrawFee()` and selector `[233, 65, 250, 120]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "withdrawFee", abi = "withdrawFee()")]
    pub struct WithdrawFeeCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum PoolServiceCalls {
        CumulativeIndexRAY(CumulativeIndexRAYCall),
        ExpectedLiquidityLU(ExpectedLiquidityLUCall),
        TimestampLU(TimestampLUCall),
        AddLiquidity(AddLiquidityCall),
        AddressProvider(AddressProviderCall),
        AvailableLiquidity(AvailableLiquidityCall),
        BorrowAPYRAY(BorrowAPYRAYCall),
        CalcLinearCumulativeRAY(CalcLinearCumulativeRAYCall),
        CalcLinearIndexRAY(CalcLinearIndexRAYCall),
        ConnectCreditManager(ConnectCreditManagerCall),
        CreditManagers(CreditManagersCall),
        CreditManagersCanBorrow(CreditManagersCanBorrowCall),
        CreditManagersCanRepay(CreditManagersCanRepayCall),
        CreditManagersCount(CreditManagersCountCall),
        DieselToken(DieselTokenCall),
        ExpectedLiquidity(ExpectedLiquidityCall),
        ExpectedLiquidityLimit(ExpectedLiquidityLimitCall),
        ForbidCreditManagerToBorrow(ForbidCreditManagerToBorrowCall),
        FromDiesel(FromDieselCall),
        GetDieselRateRAY(GetDieselRateRAYCall),
        InterestRateModel(InterestRateModelCall),
        LendCreditAccount(LendCreditAccountCall),
        Pause(PauseCall),
        Paused(PausedCall),
        RemoveLiquidity(RemoveLiquidityCall),
        RepayCreditAccount(RepayCreditAccountCall),
        SetExpectedLiquidityLimit(SetExpectedLiquidityLimitCall),
        SetWithdrawFee(SetWithdrawFeeCall),
        ToDiesel(ToDieselCall),
        TotalBorrowed(TotalBorrowedCall),
        TreasuryAddress(TreasuryAddressCall),
        Underlying(UnderlyingCall),
        Unpause(UnpauseCall),
        UpdateInterestRateModel(UpdateInterestRateModelCall),
        Version(VersionCall),
        WithdrawFee(WithdrawFeeCall),
    }
    impl ethers::core::abi::AbiDecode for PoolServiceCalls {
        fn decode(data: impl AsRef<[u8]>) -> Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <CumulativeIndexRAYCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PoolServiceCalls::CumulativeIndexRAY(decoded));
            }
            if let Ok(decoded) =
                <ExpectedLiquidityLUCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PoolServiceCalls::ExpectedLiquidityLU(decoded));
            }
            if let Ok(decoded) =
                <TimestampLUCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PoolServiceCalls::TimestampLU(decoded));
            }
            if let Ok(decoded) =
                <AddLiquidityCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PoolServiceCalls::AddLiquidity(decoded));
            }
            if let Ok(decoded) =
                <AddressProviderCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PoolServiceCalls::AddressProvider(decoded));
            }
            if let Ok(decoded) =
                <AvailableLiquidityCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PoolServiceCalls::AvailableLiquidity(decoded));
            }
            if let Ok(decoded) =
                <BorrowAPYRAYCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PoolServiceCalls::BorrowAPYRAY(decoded));
            }
            if let Ok(decoded) =
                <CalcLinearCumulativeRAYCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PoolServiceCalls::CalcLinearCumulativeRAY(decoded));
            }
            if let Ok(decoded) =
                <CalcLinearIndexRAYCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PoolServiceCalls::CalcLinearIndexRAY(decoded));
            }
            if let Ok(decoded) =
                <ConnectCreditManagerCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PoolServiceCalls::ConnectCreditManager(decoded));
            }
            if let Ok(decoded) =
                <CreditManagersCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PoolServiceCalls::CreditManagers(decoded));
            }
            if let Ok(decoded) =
                <CreditManagersCanBorrowCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PoolServiceCalls::CreditManagersCanBorrow(decoded));
            }
            if let Ok(decoded) =
                <CreditManagersCanRepayCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PoolServiceCalls::CreditManagersCanRepay(decoded));
            }
            if let Ok(decoded) =
                <CreditManagersCountCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PoolServiceCalls::CreditManagersCount(decoded));
            }
            if let Ok(decoded) =
                <DieselTokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PoolServiceCalls::DieselToken(decoded));
            }
            if let Ok(decoded) =
                <ExpectedLiquidityCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PoolServiceCalls::ExpectedLiquidity(decoded));
            }
            if let Ok(decoded) =
                <ExpectedLiquidityLimitCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PoolServiceCalls::ExpectedLiquidityLimit(decoded));
            }
            if let Ok(decoded) =
                <ForbidCreditManagerToBorrowCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(PoolServiceCalls::ForbidCreditManagerToBorrow(decoded));
            }
            if let Ok(decoded) =
                <FromDieselCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PoolServiceCalls::FromDiesel(decoded));
            }
            if let Ok(decoded) =
                <GetDieselRateRAYCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PoolServiceCalls::GetDieselRateRAY(decoded));
            }
            if let Ok(decoded) =
                <InterestRateModelCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PoolServiceCalls::InterestRateModel(decoded));
            }
            if let Ok(decoded) =
                <LendCreditAccountCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PoolServiceCalls::LendCreditAccount(decoded));
            }
            if let Ok(decoded) = <PauseCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PoolServiceCalls::Pause(decoded));
            }
            if let Ok(decoded) = <PausedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PoolServiceCalls::Paused(decoded));
            }
            if let Ok(decoded) =
                <RemoveLiquidityCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PoolServiceCalls::RemoveLiquidity(decoded));
            }
            if let Ok(decoded) =
                <RepayCreditAccountCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PoolServiceCalls::RepayCreditAccount(decoded));
            }
            if let Ok(decoded) =
                <SetExpectedLiquidityLimitCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(PoolServiceCalls::SetExpectedLiquidityLimit(decoded));
            }
            if let Ok(decoded) =
                <SetWithdrawFeeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PoolServiceCalls::SetWithdrawFee(decoded));
            }
            if let Ok(decoded) =
                <ToDieselCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PoolServiceCalls::ToDiesel(decoded));
            }
            if let Ok(decoded) =
                <TotalBorrowedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PoolServiceCalls::TotalBorrowed(decoded));
            }
            if let Ok(decoded) =
                <TreasuryAddressCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PoolServiceCalls::TreasuryAddress(decoded));
            }
            if let Ok(decoded) =
                <UnderlyingCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PoolServiceCalls::Underlying(decoded));
            }
            if let Ok(decoded) =
                <UnpauseCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PoolServiceCalls::Unpause(decoded));
            }
            if let Ok(decoded) =
                <UpdateInterestRateModelCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PoolServiceCalls::UpdateInterestRateModel(decoded));
            }
            if let Ok(decoded) =
                <VersionCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PoolServiceCalls::Version(decoded));
            }
            if let Ok(decoded) =
                <WithdrawFeeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(PoolServiceCalls::WithdrawFee(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for PoolServiceCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                PoolServiceCalls::CumulativeIndexRAY(element) => element.encode(),
                PoolServiceCalls::ExpectedLiquidityLU(element) => element.encode(),
                PoolServiceCalls::TimestampLU(element) => element.encode(),
                PoolServiceCalls::AddLiquidity(element) => element.encode(),
                PoolServiceCalls::AddressProvider(element) => element.encode(),
                PoolServiceCalls::AvailableLiquidity(element) => element.encode(),
                PoolServiceCalls::BorrowAPYRAY(element) => element.encode(),
                PoolServiceCalls::CalcLinearCumulativeRAY(element) => element.encode(),
                PoolServiceCalls::CalcLinearIndexRAY(element) => element.encode(),
                PoolServiceCalls::ConnectCreditManager(element) => element.encode(),
                PoolServiceCalls::CreditManagers(element) => element.encode(),
                PoolServiceCalls::CreditManagersCanBorrow(element) => element.encode(),
                PoolServiceCalls::CreditManagersCanRepay(element) => element.encode(),
                PoolServiceCalls::CreditManagersCount(element) => element.encode(),
                PoolServiceCalls::DieselToken(element) => element.encode(),
                PoolServiceCalls::ExpectedLiquidity(element) => element.encode(),
                PoolServiceCalls::ExpectedLiquidityLimit(element) => element.encode(),
                PoolServiceCalls::ForbidCreditManagerToBorrow(element) => element.encode(),
                PoolServiceCalls::FromDiesel(element) => element.encode(),
                PoolServiceCalls::GetDieselRateRAY(element) => element.encode(),
                PoolServiceCalls::InterestRateModel(element) => element.encode(),
                PoolServiceCalls::LendCreditAccount(element) => element.encode(),
                PoolServiceCalls::Pause(element) => element.encode(),
                PoolServiceCalls::Paused(element) => element.encode(),
                PoolServiceCalls::RemoveLiquidity(element) => element.encode(),
                PoolServiceCalls::RepayCreditAccount(element) => element.encode(),
                PoolServiceCalls::SetExpectedLiquidityLimit(element) => element.encode(),
                PoolServiceCalls::SetWithdrawFee(element) => element.encode(),
                PoolServiceCalls::ToDiesel(element) => element.encode(),
                PoolServiceCalls::TotalBorrowed(element) => element.encode(),
                PoolServiceCalls::TreasuryAddress(element) => element.encode(),
                PoolServiceCalls::Underlying(element) => element.encode(),
                PoolServiceCalls::Unpause(element) => element.encode(),
                PoolServiceCalls::UpdateInterestRateModel(element) => element.encode(),
                PoolServiceCalls::Version(element) => element.encode(),
                PoolServiceCalls::WithdrawFee(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for PoolServiceCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                PoolServiceCalls::CumulativeIndexRAY(element) => element.fmt(f),
                PoolServiceCalls::ExpectedLiquidityLU(element) => element.fmt(f),
                PoolServiceCalls::TimestampLU(element) => element.fmt(f),
                PoolServiceCalls::AddLiquidity(element) => element.fmt(f),
                PoolServiceCalls::AddressProvider(element) => element.fmt(f),
                PoolServiceCalls::AvailableLiquidity(element) => element.fmt(f),
                PoolServiceCalls::BorrowAPYRAY(element) => element.fmt(f),
                PoolServiceCalls::CalcLinearCumulativeRAY(element) => element.fmt(f),
                PoolServiceCalls::CalcLinearIndexRAY(element) => element.fmt(f),
                PoolServiceCalls::ConnectCreditManager(element) => element.fmt(f),
                PoolServiceCalls::CreditManagers(element) => element.fmt(f),
                PoolServiceCalls::CreditManagersCanBorrow(element) => element.fmt(f),
                PoolServiceCalls::CreditManagersCanRepay(element) => element.fmt(f),
                PoolServiceCalls::CreditManagersCount(element) => element.fmt(f),
                PoolServiceCalls::DieselToken(element) => element.fmt(f),
                PoolServiceCalls::ExpectedLiquidity(element) => element.fmt(f),
                PoolServiceCalls::ExpectedLiquidityLimit(element) => element.fmt(f),
                PoolServiceCalls::ForbidCreditManagerToBorrow(element) => element.fmt(f),
                PoolServiceCalls::FromDiesel(element) => element.fmt(f),
                PoolServiceCalls::GetDieselRateRAY(element) => element.fmt(f),
                PoolServiceCalls::InterestRateModel(element) => element.fmt(f),
                PoolServiceCalls::LendCreditAccount(element) => element.fmt(f),
                PoolServiceCalls::Pause(element) => element.fmt(f),
                PoolServiceCalls::Paused(element) => element.fmt(f),
                PoolServiceCalls::RemoveLiquidity(element) => element.fmt(f),
                PoolServiceCalls::RepayCreditAccount(element) => element.fmt(f),
                PoolServiceCalls::SetExpectedLiquidityLimit(element) => element.fmt(f),
                PoolServiceCalls::SetWithdrawFee(element) => element.fmt(f),
                PoolServiceCalls::ToDiesel(element) => element.fmt(f),
                PoolServiceCalls::TotalBorrowed(element) => element.fmt(f),
                PoolServiceCalls::TreasuryAddress(element) => element.fmt(f),
                PoolServiceCalls::Underlying(element) => element.fmt(f),
                PoolServiceCalls::Unpause(element) => element.fmt(f),
                PoolServiceCalls::UpdateInterestRateModel(element) => element.fmt(f),
                PoolServiceCalls::Version(element) => element.fmt(f),
                PoolServiceCalls::WithdrawFee(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<CumulativeIndexRAYCall> for PoolServiceCalls {
        fn from(var: CumulativeIndexRAYCall) -> Self {
            PoolServiceCalls::CumulativeIndexRAY(var)
        }
    }
    impl ::std::convert::From<ExpectedLiquidityLUCall> for PoolServiceCalls {
        fn from(var: ExpectedLiquidityLUCall) -> Self {
            PoolServiceCalls::ExpectedLiquidityLU(var)
        }
    }
    impl ::std::convert::From<TimestampLUCall> for PoolServiceCalls {
        fn from(var: TimestampLUCall) -> Self {
            PoolServiceCalls::TimestampLU(var)
        }
    }
    impl ::std::convert::From<AddLiquidityCall> for PoolServiceCalls {
        fn from(var: AddLiquidityCall) -> Self {
            PoolServiceCalls::AddLiquidity(var)
        }
    }
    impl ::std::convert::From<AddressProviderCall> for PoolServiceCalls {
        fn from(var: AddressProviderCall) -> Self {
            PoolServiceCalls::AddressProvider(var)
        }
    }
    impl ::std::convert::From<AvailableLiquidityCall> for PoolServiceCalls {
        fn from(var: AvailableLiquidityCall) -> Self {
            PoolServiceCalls::AvailableLiquidity(var)
        }
    }
    impl ::std::convert::From<BorrowAPYRAYCall> for PoolServiceCalls {
        fn from(var: BorrowAPYRAYCall) -> Self {
            PoolServiceCalls::BorrowAPYRAY(var)
        }
    }
    impl ::std::convert::From<CalcLinearCumulativeRAYCall> for PoolServiceCalls {
        fn from(var: CalcLinearCumulativeRAYCall) -> Self {
            PoolServiceCalls::CalcLinearCumulativeRAY(var)
        }
    }
    impl ::std::convert::From<CalcLinearIndexRAYCall> for PoolServiceCalls {
        fn from(var: CalcLinearIndexRAYCall) -> Self {
            PoolServiceCalls::CalcLinearIndexRAY(var)
        }
    }
    impl ::std::convert::From<ConnectCreditManagerCall> for PoolServiceCalls {
        fn from(var: ConnectCreditManagerCall) -> Self {
            PoolServiceCalls::ConnectCreditManager(var)
        }
    }
    impl ::std::convert::From<CreditManagersCall> for PoolServiceCalls {
        fn from(var: CreditManagersCall) -> Self {
            PoolServiceCalls::CreditManagers(var)
        }
    }
    impl ::std::convert::From<CreditManagersCanBorrowCall> for PoolServiceCalls {
        fn from(var: CreditManagersCanBorrowCall) -> Self {
            PoolServiceCalls::CreditManagersCanBorrow(var)
        }
    }
    impl ::std::convert::From<CreditManagersCanRepayCall> for PoolServiceCalls {
        fn from(var: CreditManagersCanRepayCall) -> Self {
            PoolServiceCalls::CreditManagersCanRepay(var)
        }
    }
    impl ::std::convert::From<CreditManagersCountCall> for PoolServiceCalls {
        fn from(var: CreditManagersCountCall) -> Self {
            PoolServiceCalls::CreditManagersCount(var)
        }
    }
    impl ::std::convert::From<DieselTokenCall> for PoolServiceCalls {
        fn from(var: DieselTokenCall) -> Self {
            PoolServiceCalls::DieselToken(var)
        }
    }
    impl ::std::convert::From<ExpectedLiquidityCall> for PoolServiceCalls {
        fn from(var: ExpectedLiquidityCall) -> Self {
            PoolServiceCalls::ExpectedLiquidity(var)
        }
    }
    impl ::std::convert::From<ExpectedLiquidityLimitCall> for PoolServiceCalls {
        fn from(var: ExpectedLiquidityLimitCall) -> Self {
            PoolServiceCalls::ExpectedLiquidityLimit(var)
        }
    }
    impl ::std::convert::From<ForbidCreditManagerToBorrowCall> for PoolServiceCalls {
        fn from(var: ForbidCreditManagerToBorrowCall) -> Self {
            PoolServiceCalls::ForbidCreditManagerToBorrow(var)
        }
    }
    impl ::std::convert::From<FromDieselCall> for PoolServiceCalls {
        fn from(var: FromDieselCall) -> Self {
            PoolServiceCalls::FromDiesel(var)
        }
    }
    impl ::std::convert::From<GetDieselRateRAYCall> for PoolServiceCalls {
        fn from(var: GetDieselRateRAYCall) -> Self {
            PoolServiceCalls::GetDieselRateRAY(var)
        }
    }
    impl ::std::convert::From<InterestRateModelCall> for PoolServiceCalls {
        fn from(var: InterestRateModelCall) -> Self {
            PoolServiceCalls::InterestRateModel(var)
        }
    }
    impl ::std::convert::From<LendCreditAccountCall> for PoolServiceCalls {
        fn from(var: LendCreditAccountCall) -> Self {
            PoolServiceCalls::LendCreditAccount(var)
        }
    }
    impl ::std::convert::From<PauseCall> for PoolServiceCalls {
        fn from(var: PauseCall) -> Self {
            PoolServiceCalls::Pause(var)
        }
    }
    impl ::std::convert::From<PausedCall> for PoolServiceCalls {
        fn from(var: PausedCall) -> Self {
            PoolServiceCalls::Paused(var)
        }
    }
    impl ::std::convert::From<RemoveLiquidityCall> for PoolServiceCalls {
        fn from(var: RemoveLiquidityCall) -> Self {
            PoolServiceCalls::RemoveLiquidity(var)
        }
    }
    impl ::std::convert::From<RepayCreditAccountCall> for PoolServiceCalls {
        fn from(var: RepayCreditAccountCall) -> Self {
            PoolServiceCalls::RepayCreditAccount(var)
        }
    }
    impl ::std::convert::From<SetExpectedLiquidityLimitCall> for PoolServiceCalls {
        fn from(var: SetExpectedLiquidityLimitCall) -> Self {
            PoolServiceCalls::SetExpectedLiquidityLimit(var)
        }
    }
    impl ::std::convert::From<SetWithdrawFeeCall> for PoolServiceCalls {
        fn from(var: SetWithdrawFeeCall) -> Self {
            PoolServiceCalls::SetWithdrawFee(var)
        }
    }
    impl ::std::convert::From<ToDieselCall> for PoolServiceCalls {
        fn from(var: ToDieselCall) -> Self {
            PoolServiceCalls::ToDiesel(var)
        }
    }
    impl ::std::convert::From<TotalBorrowedCall> for PoolServiceCalls {
        fn from(var: TotalBorrowedCall) -> Self {
            PoolServiceCalls::TotalBorrowed(var)
        }
    }
    impl ::std::convert::From<TreasuryAddressCall> for PoolServiceCalls {
        fn from(var: TreasuryAddressCall) -> Self {
            PoolServiceCalls::TreasuryAddress(var)
        }
    }
    impl ::std::convert::From<UnderlyingCall> for PoolServiceCalls {
        fn from(var: UnderlyingCall) -> Self {
            PoolServiceCalls::Underlying(var)
        }
    }
    impl ::std::convert::From<UnpauseCall> for PoolServiceCalls {
        fn from(var: UnpauseCall) -> Self {
            PoolServiceCalls::Unpause(var)
        }
    }
    impl ::std::convert::From<UpdateInterestRateModelCall> for PoolServiceCalls {
        fn from(var: UpdateInterestRateModelCall) -> Self {
            PoolServiceCalls::UpdateInterestRateModel(var)
        }
    }
    impl ::std::convert::From<VersionCall> for PoolServiceCalls {
        fn from(var: VersionCall) -> Self {
            PoolServiceCalls::Version(var)
        }
    }
    impl ::std::convert::From<WithdrawFeeCall> for PoolServiceCalls {
        fn from(var: WithdrawFeeCall) -> Self {
            PoolServiceCalls::WithdrawFee(var)
        }
    }
}
