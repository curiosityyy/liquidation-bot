pub use accountfactory_mod::*;
#[allow(clippy::too_many_arguments)]
mod accountfactory_mod {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "AccountFactory was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static ACCOUNTFACTORY_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressProvider\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"AccountMinerChanged\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"creditManager\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"InitializeCreditAccount\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"NewCreditAccount\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Paused\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"ReturnCreditAccount\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creditAccount\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"TakeForever\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Unpaused\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"_contractsRegister\",\"outputs\":[{\"internalType\":\"contract ContractsRegister\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"addCreditAccount\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"struct MiningApproval[]\",\"name\":\"_miningApprovals\",\"type\":\"tuple[]\",\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"swapContract\",\"type\":\"address\",\"components\":[]}]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"addMiningApprovals\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"cancelAllowance\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"countCreditAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"countCreditAccountsInStock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"creditAccounts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"finishMining\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creditAccount\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getNext\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"head\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isCreditAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isMiningFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"masterCreditAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"mineCreditAccount\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"miningApprovals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"swapContract\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"pause\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usedAccount\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"returnCreditAccount\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"tail\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_borrowedAmount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_cumulativeIndexAtOpen\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"takeCreditAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prev\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"creditAccount\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"takeOut\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"unpause\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static ACCOUNTFACTORY_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x60e06040523480156200001157600080fd5b5060405162002cc738038062002cc78339810160408190526200003491620004d8565b6000805460ff1916905560408051808201909152600281526105a360f41b602082015281906001600160a01b0382166200008c5760405162461bcd60e51b81526004016200008391906200050a565b60405180910390fd5b50806001600160a01b031663087376956040518163ffffffff1660e01b8152600401602060405180830381865afa158015620000cc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000f29190620004d8565b6001600160a01b039081166080526001805560408051808201909152600281526105a360f41b602082015291508216620001415760405162461bcd60e51b81526004016200008391906200050a565b50806001600160a01b031663c513c9bb6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000181573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001a79190620004d8565b6001600160a01b031660c052604051620001c190620004ca565b604051809103906000f080158015620001de573d6000803e3d6000fd5b506001600160a01b031660a08190526040805163204a7f0760e21b81529051638129fc1c9160048082019260009290919082900301818387803b1580156200022557600080fd5b505af11580156200023a573d6000803e3d6000fd5b505050506200024e620002a760201b60201c565b50600454600380546001600160a01b039092166001600160a01b03199283161790556000805260026020527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b8054909116905562000562565b6000620002c160a051620003a960201b620013d61760201c565b9050806001600160a01b0316638129fc1c6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620002ff57600080fd5b505af115801562000314573d6000803e3d6000fd5b5050600480546001600160a01b03908116600090815260026020908152604090912080546001600160a01b031990811693881693841790915583541690911790915562000371925060059150839062000458811b6200147317901c565b506040516001600160a01b038216907f9f69b6c10f6810213e055b0ba6bc0a4e2603f73c221aad77ea35da819cda7dc390600090a250565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b038116620004535760405162461bcd60e51b815260206004820152601660248201527f455243313136373a20637265617465206661696c656400000000000000000000604482015260640162000083565b919050565b60006200046f836001600160a01b03841662000478565b90505b92915050565b6000818152600183016020526040812054620004c15750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000472565b50600062000472565b610d1e8062001fa983390190565b600060208284031215620004eb57600080fd5b81516001600160a01b03811681146200050357600080fd5b9392505050565b600060208083528351808285015260005b8181101562000539578581018301518582016040015282016200051b565b818111156200054c576000604083870101525b50601f01601f1916929092016040019392505050565b60805160a05160c0516119df620005ca6000396000818161026b015281816103570152610cf801526000818161021001526112df015260008181610501015281816107b50152818161088801528181610b5e01528181610c2c0152610f4001526119df6000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c80638456cb59116100c3578063b014352f1161007c578063b014352f146102f9578063b193976314610301578063b60e851814610309578063d82ecc4814610311578063e3ba9ace14610324578063f23953ab1461033757600080fd5b80638456cb591461025e57806388f64c541461026657806389b77b3e1461028d5780638f7dcfa3146102a05780639c650789146102b3578063a904aab6146102e657600080fd5b80633b9c4867116101155780633b9c4867146101cf5780633f4ba83a146101e257806354fd4d50146101ea5780635c975abb146102005780635da33c5b1461020b578063765e01591461023257600080fd5b806313d8c8401461015257806321d184561461018257806323428dbd146101955780632932472f146101b25780633a1ed19a146101c7575b600080fd5b600454610165906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610165610190366004611780565b61033f565b6008546101a29060ff1681565b6040519015158152602001610179565b6101c56101c03660046117b9565b6104ec565b005b6101c56107a0565b6101c56101dd3660046117fc565b610873565b6101c5610b49565b6101f2600181565b604051908152602001610179565b60005460ff166101a2565b6101657f000000000000000000000000000000000000000000000000000000000000000081565b610165610240366004611871565b6001600160a01b039081166000908152600260205260409020541690565b6101c5610c17565b6101657f000000000000000000000000000000000000000000000000000000000000000081565b6101c561029b366004611871565b610ce3565b600354610165906001600160a01b031681565b6102c66102c136600461188c565b610ef2565b604080516001600160a01b03938416815292909116602083015201610179565b6101c56102f43660046117b9565b610f2b565b6101c5611057565b6101f2611259565b6101f26112ad565b6101a261031f366004611871565b6112be565b61016561033236600461188c565b6112cb565b6101c56112d8565b604051636fbc6f6b60e01b81523360048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636fbc6f6b90602401602060405180830381865afa1580156103a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ca91906118a5565b60405180604001604052806002815260200161043560f41b8152509061040c5760405162461bcd60e51b815260040161040391906118c7565b60405180910390fd5b5061041561148f565b600380546001600160a01b038082166000818152600260205260409081902080549093166001600160a01b03199485161790945581549092169055905163c75b5a7160e01b81523360048201526024810185905260448101849052819063c75b5a7190606401600060405180830381600087803b15801561049557600080fd5b505af11580156104a9573d6000803e3d6000fd5b50506040513392506001600160a01b03841691507ff3ede7039176503a8ad1fe7cfaa29475a9dbe0cdcaf04ecf9a5c10570c47b10390600090a390505b92915050565b604051632f92cd5d60e11b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635f259aba90602401602060405180830381865afa158015610550573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057491906118a5565b6040518060400160405280600481526020016320a1a61960e11b815250906105af5760405162461bcd60e51b815260040161040391906118c7565b506105b861148f565b6003546001600160a01b038381169116141561060a57600380546001600160a01b03808216600090815260026020526040902080549091166001600160a01b03199283161790925581541690556106dd565b6001600160a01b03838116600090815260026020908152604091829020548251808401909352600383526241463360e81b9183019190915290918481169116146106675760405162461bcd60e51b815260040161040391906118c7565b506004546001600160a01b038381169116141561069a57600480546001600160a01b0319166001600160a01b0385161790555b6001600160a01b03828116600081815260026020526040808220805488861684529183208054929095166001600160a01b03199283161790945591905281541690555b60405163c75b5a7160e01b81526001600160a01b038281166004830152600060248301819052604483015283169063c75b5a7190606401600060405180830381600087803b15801561072e57600080fd5b505af1158015610742573d6000803e3d6000fd5b5050505061075a8260056114b990919063ffffffff16565b50806001600160a01b0316826001600160a01b03167f25e267469ba2ae82515be7b3d45df60bf8308343f0809e8cf7319058e2255ce660405160405180910390a3505050565b604051632f92cd5d60e11b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635f259aba90602401602060405180830381865afa158015610804573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082891906118a5565b6040518060400160405280600481526020016320a1a61960e11b815250906108635760405162461bcd60e51b815260040161040391906118c7565b506008805460ff19166001179055565b604051632f92cd5d60e11b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635f259aba90602401602060405180830381865afa1580156108d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fb91906118a5565b6040518060400160405280600481526020016320a1a61960e11b815250906109365760405162461bcd60e51b815260040161040391906118c7565b5060085460408051808201909152600381526220a31960e91b60208201529060ff16156109765760405162461bcd60e51b815260040161040391906118c7565b5060005b81811015610b445760008383838181106109965761099661191c565b6109ac9260206040909202019081019150611871565b6001600160a01b0316141580156109f6575060008383838181106109d2576109d261191c565b90506040020160200160208101906109ea9190611871565b6001600160a01b031614155b6040518060400160405280600281526020016105a360f41b81525090610a2f5760405162461bcd60e51b815260040161040391906118c7565b5060006040518060400160405280858585818110610a4f57610a4f61191c565b610a659260206040909202019081019150611871565b6001600160a01b03168152602001858585818110610a8557610a8561191c565b9050604002016020016020810190610a9d9190611871565b6001600160a01b0390811690915260078054600181018255600091909152825160029091027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688810180549284166001600160a01b03199384161790556020909301517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68990930180549390921692169190911790555080610b3c81611948565b91505061097a565b505050565b604051630d4eb5db60e41b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d4eb5db090602401602060405180830381865afa158015610bad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd191906118a5565b6040518060400160405280600481526020016341434c3160e01b81525090610c0c5760405162461bcd60e51b815260040161040391906118c7565b50610c156114ce565b565b604051630e907b1960e21b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690633a41ec6490602401602060405180830381865afa158015610c7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9f91906118a5565b6040518060400160405280600481526020016341434c3160e01b81525090610cda5760405162461bcd60e51b815260040161040391906118c7565b50610c15611561565b604051636fbc6f6b60e01b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636fbc6f6b90602401602060405180830381865afa158015610d47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6b91906118a5565b60405180604001604052806002815260200161043560f41b81525090610da45760405162461bcd60e51b815260040161040391906118c7565b50610db06005826115dc565b6040518060400160405280600381526020016210518d60ea1b81525090610dea5760405162461bcd60e51b815260040161040391906118c7565b5043816001600160a01b0316633dc54b406040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4e9190611963565b14156040518060400160405280600381526020016241463160e81b81525090610e8a5760405162461bcd60e51b815260040161040391906118c7565b50600480546001600160a01b0390811660009081526002602052604080822080546001600160a01b03199081169487169485179091558454168317909355915190917fced6ab9afc868b3a088366f6631ae20752993b5cce5d5f0534ea5a59fcc57d5691a250565b60078181548110610f0257600080fd5b6000918252602090912060029091020180546001909101546001600160a01b0391821692501682565b604051632f92cd5d60e11b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635f259aba90602401602060405180830381865afa158015610f8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb391906118a5565b6040518060400160405280600481526020016320a1a61960e11b81525090610fee5760405162461bcd60e51b815260040161040391906118c7565b506040516319a1603960e01b81526001600160a01b03838116600483015282811660248301528416906319a1603990604401600060405180830381600087803b15801561103a57600080fd5b505af115801561104e573d6000803e3d6000fd5b50505050505050565b600260015414156110aa5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610403565b600260015560085460408051808201909152600381526220a31960e91b60208201529060ff16156110ee5760405162461bcd60e51b815260040161040391906118c7565b506110f76112d8565b6004805460405163c75b5a7160e01b8152309281019290925260016024830181905260448301526001600160a01b03169063c75b5a7190606401600060405180830381600087803b15801561114b57600080fd5b505af115801561115f573d6000803e3d6000fd5b5050505060005b60075481101561125257600454600780546001600160a01b03909216916303105b0491908490811061119a5761119a61191c565b6000918252602090912060029091020154600780546001600160a01b0390921691859081106111cb576111cb61191c565b600091825260209091206002909102016001015460405160e084901b6001600160e01b03191681526001600160a01b03928316600482015291166024820152604401600060405180830381600087803b15801561122757600080fd5b505af115801561123b573d6000803e3d6000fd5b50505050808061124a90611948565b915050611166565b5060018055565b60035460009081906001600160a01b03165b6001600160a01b038116156112a7576001600160a01b03908116600090815260026020526040902054168161129f81611948565b92505061126b565b50919050565b60006112b960056115fe565b905090565b60006104e66005836115dc565b60006104e6600583611608565b60006113037f00000000000000000000000000000000000000000000000000000000000000006113d6565b9050806001600160a01b0316638129fc1c6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561134057600080fd5b505af1158015611354573d6000803e3d6000fd5b5050600480546001600160a01b03908116600090815260026020526040902080546001600160a01b03199081169287169283179091558254161790555061139e9050600582611473565b506040516001600160a01b038216907f9f69b6c10f6810213e055b0ba6bc0a4e2603f73c221aad77ea35da819cda7dc390600090a250565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b03811661146e5760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b6044820152606401610403565b919050565b6000611488836001600160a01b038416611614565b9392505050565b6003546001600160a01b0390811660009081526002602052604090205416610c1557610c156112d8565b6000611488836001600160a01b038416611663565b60005460ff166115175760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610403565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60005460ff16156115a75760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610403565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586115443390565b6001600160a01b03811660009081526001830160205260408120541515611488565b60006104e6825490565b60006114888383611756565b600081815260018301602052604081205461165b575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556104e6565b5060006104e6565b6000818152600183016020526040812054801561174c57600061168760018361197c565b855490915060009061169b9060019061197c565b90508181146117005760008660000182815481106116bb576116bb61191c565b90600052602060002001549050808760000184815481106116de576116de61191c565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061171157611711611993565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506104e6565b60009150506104e6565b600082600001828154811061176d5761176d61191c565b9060005260206000200154905092915050565b6000806040838503121561179357600080fd5b50508035926020909101359150565b80356001600160a01b038116811461146e57600080fd5b6000806000606084860312156117ce57600080fd5b6117d7846117a2565b92506117e5602085016117a2565b91506117f3604085016117a2565b90509250925092565b6000806020838503121561180f57600080fd5b823567ffffffffffffffff8082111561182757600080fd5b818501915085601f83011261183b57600080fd5b81358181111561184a57600080fd5b8660208260061b850101111561185f57600080fd5b60209290920196919550909350505050565b60006020828403121561188357600080fd5b611488826117a2565b60006020828403121561189e57600080fd5b5035919050565b6000602082840312156118b757600080fd5b8151801515811461148857600080fd5b600060208083528351808285015260005b818110156118f4578581018301518582016040015282016118d8565b81811115611906576000604083870101525b50601f01601f1916929092016040019392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561195c5761195c611932565b5060010190565b60006020828403121561197557600080fd5b5051919050565b60008282101561198e5761198e611932565b500390565b634e487b7160e01b600052603160045260246000fdfea264697066735822122027ac1274edce75cc18b2784db8009bdf93023b83c655b2b967544a042038fda264736f6c634300080a0033608060405234801561001057600080fd5b50610cfe806100206000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80633dc54b401161008c578063c12c21c011610066578063c12c21c01461016d578063c45a015514610198578063c75b5a71146101b1578063d1660f99146101c457600080fd5b80633dc54b401461015457806354fd4d501461015d5780638129fc1c1461016557600080fd5b806303105b04146100d457806316128211146100e957806317d11a15146100fc57806319a16039146101185780631afbb7a41461012b5780631cff79cd14610134575b600080fd5b6100e76100e2366004610a66565b6101d7565b005b6100e76100f7366004610a99565b610388565b61010560035481565b6040519081526020015b60405180910390f35b6100e7610126366004610a66565b6103da565b61010560025481565b610147610142366004610ad1565b61043c565b60405161010f9190610bef565b61010560045481565b610105600181565b6100e761049f565b600154610180906001600160a01b031681565b6040516001600160a01b03909116815260200161010f565b600054610180906201000090046001600160a01b031681565b6100e76101bf366004610c02565b610571565b6100e76101d2366004610c35565b6105eb565b60015460408051808201909152600381526243413160e81b6020820152906001600160a01b031633146102265760405162461bcd60e51b815260040161021d9190610bef565b60405180910390fd5b5060405163095ea7b360e01b81526001600160a01b038281166004830152600019602483015283169063095ea7b3906044016020604051808303816000875af1925050508015610293575060408051601f3d908101601f1916820190925261029091810190610c71565b60015b61037f5760405163095ea7b360e01b81526001600160a01b0382811660048301526000602483015283169063095ea7b3906044016020604051808303816000875af11580156102e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030a9190610c71565b5060405163095ea7b360e01b81526001600160a01b038281166004830152600019602483015283169063095ea7b3906044016020604051808303816000875af115801561035b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037f9190610c71565b505050565b5050565b60015460408051808201909152600381526243413160e81b6020820152906001600160a01b031633146103ce5760405162461bcd60e51b815260040161021d9190610bef565b50600291909155600355565b60005460408051808201909152600381526221a09960e91b6020820152906201000090046001600160a01b031633146104265760405162461bcd60e51b815260040161021d9190610bef565b506103846001600160a01b038316826000610646565b60015460408051808201909152600381526243413160e81b60208201526060916001600160a01b031633146104845760405162461bcd60e51b815260040161021d9190610bef565b506104986001600160a01b0384168361078e565b9392505050565b600054610100900460ff166104ba5760005460ff16156104be565b303b155b6105215760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161021d565b600054610100900460ff16158015610543576000805461ffff19166101011790555b6000805462010000600160b01b031916336201000002179055801561056e576000805461ff00191690555b50565b60005460408051808201909152600381526221a09960e91b6020820152906201000090046001600160a01b031633146105bd5760405162461bcd60e51b815260040161021d9190610bef565b50600180546001600160a01b0319166001600160a01b03949094169390931790925560025560035543600455565b60015460408051808201909152600381526243413160e81b6020820152906001600160a01b031633146106315760405162461bcd60e51b815260040161021d9190610bef565b5061037f6001600160a01b03841683836107d0565b8015806106c05750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa15801561069a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106be9190610c93565b155b61072b5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161021d565b6040516001600160a01b03831660248201526044810182905261037f90849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610800565b606061049883836040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c656400008152506108d2565b6040516001600160a01b03831660248201526044810182905261037f90849063a9059cbb60e01b90606401610757565b6000610855826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166108d29092919063ffffffff16565b80519091501561037f57808060200190518101906108739190610c71565b61037f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161021d565b60606108e184846000856108e9565b949350505050565b60608247101561094a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161021d565b843b6109985760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161021d565b600080866001600160a01b031685876040516109b49190610cac565b60006040518083038185875af1925050503d80600081146109f1576040519150601f19603f3d011682016040523d82523d6000602084013e6109f6565b606091505b5091509150610a06828286610a11565b979650505050505050565b60608315610a20575081610498565b825115610a305782518084602001fd5b8160405162461bcd60e51b815260040161021d9190610bef565b80356001600160a01b0381168114610a6157600080fd5b919050565b60008060408385031215610a7957600080fd5b610a8283610a4a565b9150610a9060208401610a4a565b90509250929050565b60008060408385031215610aac57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215610ae457600080fd5b610aed83610a4a565b9150602083013567ffffffffffffffff80821115610b0a57600080fd5b818501915085601f830112610b1e57600080fd5b813581811115610b3057610b30610abb565b604051601f8201601f19908116603f01168101908382118183101715610b5857610b58610abb565b81604052828152886020848701011115610b7157600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60005b83811015610bae578181015183820152602001610b96565b83811115610bbd576000848401525b50505050565b60008151808452610bdb816020860160208601610b93565b601f01601f19169290920160200192915050565b6020815260006104986020830184610bc3565b600080600060608486031215610c1757600080fd5b610c2084610a4a565b95602085013595506040909401359392505050565b600080600060608486031215610c4a57600080fd5b610c5384610a4a565b9250610c6160208501610a4a565b9150604084013590509250925092565b600060208284031215610c8357600080fd5b8151801515811461049857600080fd5b600060208284031215610ca557600080fd5b5051919050565b60008251610cbe818460208701610b93565b919091019291505056fea2646970667358221220767f262ec46278aa06105a9ddf34249141a9a891d586d7b2a24f4f675222692264736f6c634300080a0033" . parse () . expect ("invalid bytecode")
        });
    #[derive(Clone)]
    pub struct AccountFactory<M>(ethers::contract::Contract<M>);
    impl<M> std::ops::Deref for AccountFactory<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for AccountFactory<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(AccountFactory))
                .field(&self.address())
                .finish()
        }
    }
    impl<'a, M: ethers::providers::Middleware> AccountFactory<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), ACCOUNTFACTORY_ABI.clone(), client)
                .into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                ACCOUNTFACTORY_ABI.clone(),
                ACCOUNTFACTORY_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `_contractsRegister` (0x88f64c54) function"]
        pub fn contracts_register(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([136, 246, 76, 84], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `addCreditAccount` (0xf23953ab) function"]
        pub fn add_credit_account(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([242, 57, 83, 171], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `addMiningApprovals` (0x3b9c4867) function"]
        pub fn add_mining_approvals(
            &self,
            mining_approvals: ::std::vec::Vec<MiningApproval>,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([59, 156, 72, 103], mining_approvals)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `cancelAllowance` (0xa904aab6) function"]
        pub fn cancel_allowance(
            &self,
            account: ethers::core::types::Address,
            token: ethers::core::types::Address,
            target_contract: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([169, 4, 170, 182], (account, token, target_contract))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `countCreditAccounts` (0xb60e8518) function"]
        pub fn count_credit_accounts(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([182, 14, 133, 24], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `countCreditAccountsInStock` (0xb1939763) function"]
        pub fn count_credit_accounts_in_stock(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([177, 147, 151, 99], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `creditAccounts` (0xe3ba9ace) function"]
        pub fn credit_accounts(
            &self,
            id: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([227, 186, 154, 206], id)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `finishMining` (0x3a1ed19a) function"]
        pub fn finish_mining(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([58, 30, 209, 154], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getNext` (0x765e0159) function"]
        pub fn get_next(
            &self,
            credit_account: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([118, 94, 1, 89], credit_account)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `head` (0x8f7dcfa3) function"]
        pub fn head(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([143, 125, 207, 163], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `isCreditAccount` (0xd82ecc48) function"]
        pub fn is_credit_account(
            &self,
            addr: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([216, 46, 204, 72], addr)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `isMiningFinished` (0x23428dbd) function"]
        pub fn is_mining_finished(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([35, 66, 141, 189], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `masterCreditAccount` (0x5da33c5b) function"]
        pub fn master_credit_account(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([93, 163, 60, 91], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `mineCreditAccount` (0xb014352f) function"]
        pub fn mine_credit_account(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([176, 20, 53, 47], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `miningApprovals` (0x9c650789) function"]
        pub fn mining_approvals(
            &self,
            p0: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<
            M,
            (ethers::core::types::Address, ethers::core::types::Address),
        > {
            self.0
                .method_hash([156, 101, 7, 137], p0)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `pause` (0x8456cb59) function"]
        pub fn pause(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([132, 86, 203, 89], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `paused` (0x5c975abb) function"]
        pub fn paused(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([92, 151, 90, 187], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `returnCreditAccount` (0x89b77b3e) function"]
        pub fn return_credit_account(
            &self,
            used_account: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([137, 183, 123, 62], used_account)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `tail` (0x13d8c840) function"]
        pub fn tail(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([19, 216, 200, 64], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `takeCreditAccount` (0x21d18456) function"]
        pub fn take_credit_account(
            &self,
            borrowed_amount: ethers::core::types::U256,
            cumulative_index_at_open: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash(
                    [33, 209, 132, 86],
                    (borrowed_amount, cumulative_index_at_open),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `takeOut` (0x2932472f) function"]
        pub fn take_out(
            &self,
            prev: ethers::core::types::Address,
            credit_account: ethers::core::types::Address,
            to: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([41, 50, 71, 47], (prev, credit_account, to))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `unpause` (0x3f4ba83a) function"]
        pub fn unpause(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([63, 75, 168, 58], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `version` (0x54fd4d50) function"]
        pub fn version(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([84, 253, 77, 80], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `AccountMinerChanged` event"]
        pub fn account_miner_changed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, AccountMinerChangedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `InitializeCreditAccount` event"]
        pub fn initialize_credit_account_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, InitializeCreditAccountFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `NewCreditAccount` event"]
        pub fn new_credit_account_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, NewCreditAccountFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `Paused` event"]
        pub fn paused_filter(&self) -> ethers::contract::builders::Event<M, PausedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `ReturnCreditAccount` event"]
        pub fn return_credit_account_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, ReturnCreditAccountFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TakeForever` event"]
        pub fn take_forever_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TakeForeverFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `Unpaused` event"]
        pub fn unpaused_filter(&self) -> ethers::contract::builders::Event<M, UnpausedFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, AccountFactoryEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for AccountFactory<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "AccountMinerChanged", abi = "AccountMinerChanged(address)")]
    pub struct AccountMinerChangedFilter {
        #[ethevent(indexed)]
        pub miner: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "InitializeCreditAccount",
        abi = "InitializeCreditAccount(address,address)"
    )]
    pub struct InitializeCreditAccountFilter {
        #[ethevent(indexed)]
        pub account: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub credit_manager: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "NewCreditAccount", abi = "NewCreditAccount(address)")]
    pub struct NewCreditAccountFilter {
        #[ethevent(indexed)]
        pub account: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "Paused", abi = "Paused(address)")]
    pub struct PausedFilter {
        pub account: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "ReturnCreditAccount", abi = "ReturnCreditAccount(address)")]
    pub struct ReturnCreditAccountFilter {
        #[ethevent(indexed)]
        pub account: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "TakeForever", abi = "TakeForever(address,address)")]
    pub struct TakeForeverFilter {
        #[ethevent(indexed)]
        pub credit_account: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub to: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "Unpaused", abi = "Unpaused(address)")]
    pub struct UnpausedFilter {
        pub account: ethers::core::types::Address,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum AccountFactoryEvents {
        AccountMinerChangedFilter(AccountMinerChangedFilter),
        InitializeCreditAccountFilter(InitializeCreditAccountFilter),
        NewCreditAccountFilter(NewCreditAccountFilter),
        PausedFilter(PausedFilter),
        ReturnCreditAccountFilter(ReturnCreditAccountFilter),
        TakeForeverFilter(TakeForeverFilter),
        UnpausedFilter(UnpausedFilter),
    }
    impl ethers::contract::EthLogDecode for AccountFactoryEvents {
        fn decode_log(log: &ethers::core::abi::RawLog) -> Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = AccountMinerChangedFilter::decode_log(log) {
                return Ok(AccountFactoryEvents::AccountMinerChangedFilter(decoded));
            }
            if let Ok(decoded) = InitializeCreditAccountFilter::decode_log(log) {
                return Ok(AccountFactoryEvents::InitializeCreditAccountFilter(decoded));
            }
            if let Ok(decoded) = NewCreditAccountFilter::decode_log(log) {
                return Ok(AccountFactoryEvents::NewCreditAccountFilter(decoded));
            }
            if let Ok(decoded) = PausedFilter::decode_log(log) {
                return Ok(AccountFactoryEvents::PausedFilter(decoded));
            }
            if let Ok(decoded) = ReturnCreditAccountFilter::decode_log(log) {
                return Ok(AccountFactoryEvents::ReturnCreditAccountFilter(decoded));
            }
            if let Ok(decoded) = TakeForeverFilter::decode_log(log) {
                return Ok(AccountFactoryEvents::TakeForeverFilter(decoded));
            }
            if let Ok(decoded) = UnpausedFilter::decode_log(log) {
                return Ok(AccountFactoryEvents::UnpausedFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for AccountFactoryEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                AccountFactoryEvents::AccountMinerChangedFilter(element) => element.fmt(f),
                AccountFactoryEvents::InitializeCreditAccountFilter(element) => element.fmt(f),
                AccountFactoryEvents::NewCreditAccountFilter(element) => element.fmt(f),
                AccountFactoryEvents::PausedFilter(element) => element.fmt(f),
                AccountFactoryEvents::ReturnCreditAccountFilter(element) => element.fmt(f),
                AccountFactoryEvents::TakeForeverFilter(element) => element.fmt(f),
                AccountFactoryEvents::UnpausedFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `_contractsRegister`function with signature `_contractsRegister()` and selector `[136, 246, 76, 84]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "_contractsRegister", abi = "_contractsRegister()")]
    pub struct ContractsRegisterCall;
    #[doc = "Container type for all input parameters for the `addCreditAccount`function with signature `addCreditAccount()` and selector `[242, 57, 83, 171]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "addCreditAccount", abi = "addCreditAccount()")]
    pub struct AddCreditAccountCall;
    #[doc = "Container type for all input parameters for the `addMiningApprovals`function with signature `addMiningApprovals((address,address)[])` and selector `[59, 156, 72, 103]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "addMiningApprovals",
        abi = "addMiningApprovals((address,address)[])"
    )]
    pub struct AddMiningApprovalsCall {
        pub mining_approvals: ::std::vec::Vec<MiningApproval>,
    }
    #[doc = "Container type for all input parameters for the `cancelAllowance`function with signature `cancelAllowance(address,address,address)` and selector `[169, 4, 170, 182]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "cancelAllowance",
        abi = "cancelAllowance(address,address,address)"
    )]
    pub struct CancelAllowanceCall {
        pub account: ethers::core::types::Address,
        pub token: ethers::core::types::Address,
        pub target_contract: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `countCreditAccounts`function with signature `countCreditAccounts()` and selector `[182, 14, 133, 24]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "countCreditAccounts", abi = "countCreditAccounts()")]
    pub struct CountCreditAccountsCall;
    #[doc = "Container type for all input parameters for the `countCreditAccountsInStock`function with signature `countCreditAccountsInStock()` and selector `[177, 147, 151, 99]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "countCreditAccountsInStock",
        abi = "countCreditAccountsInStock()"
    )]
    pub struct CountCreditAccountsInStockCall;
    #[doc = "Container type for all input parameters for the `creditAccounts`function with signature `creditAccounts(uint256)` and selector `[227, 186, 154, 206]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "creditAccounts", abi = "creditAccounts(uint256)")]
    pub struct CreditAccountsCall {
        pub id: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `finishMining`function with signature `finishMining()` and selector `[58, 30, 209, 154]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "finishMining", abi = "finishMining()")]
    pub struct FinishMiningCall;
    #[doc = "Container type for all input parameters for the `getNext`function with signature `getNext(address)` and selector `[118, 94, 1, 89]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "getNext", abi = "getNext(address)")]
    pub struct GetNextCall {
        pub credit_account: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `head`function with signature `head()` and selector `[143, 125, 207, 163]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "head", abi = "head()")]
    pub struct HeadCall;
    #[doc = "Container type for all input parameters for the `isCreditAccount`function with signature `isCreditAccount(address)` and selector `[216, 46, 204, 72]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "isCreditAccount", abi = "isCreditAccount(address)")]
    pub struct IsCreditAccountCall {
        pub addr: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `isMiningFinished`function with signature `isMiningFinished()` and selector `[35, 66, 141, 189]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "isMiningFinished", abi = "isMiningFinished()")]
    pub struct IsMiningFinishedCall;
    #[doc = "Container type for all input parameters for the `masterCreditAccount`function with signature `masterCreditAccount()` and selector `[93, 163, 60, 91]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "masterCreditAccount", abi = "masterCreditAccount()")]
    pub struct MasterCreditAccountCall;
    #[doc = "Container type for all input parameters for the `mineCreditAccount`function with signature `mineCreditAccount()` and selector `[176, 20, 53, 47]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "mineCreditAccount", abi = "mineCreditAccount()")]
    pub struct MineCreditAccountCall;
    #[doc = "Container type for all input parameters for the `miningApprovals`function with signature `miningApprovals(uint256)` and selector `[156, 101, 7, 137]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "miningApprovals", abi = "miningApprovals(uint256)")]
    pub struct MiningApprovalsCall(pub ethers::core::types::U256);
    #[doc = "Container type for all input parameters for the `pause`function with signature `pause()` and selector `[132, 86, 203, 89]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "pause", abi = "pause()")]
    pub struct PauseCall;
    #[doc = "Container type for all input parameters for the `paused`function with signature `paused()` and selector `[92, 151, 90, 187]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "paused", abi = "paused()")]
    pub struct PausedCall;
    #[doc = "Container type for all input parameters for the `returnCreditAccount`function with signature `returnCreditAccount(address)` and selector `[137, 183, 123, 62]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "returnCreditAccount", abi = "returnCreditAccount(address)")]
    pub struct ReturnCreditAccountCall {
        pub used_account: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `tail`function with signature `tail()` and selector `[19, 216, 200, 64]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "tail", abi = "tail()")]
    pub struct TailCall;
    #[doc = "Container type for all input parameters for the `takeCreditAccount`function with signature `takeCreditAccount(uint256,uint256)` and selector `[33, 209, 132, 86]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "takeCreditAccount", abi = "takeCreditAccount(uint256,uint256)")]
    pub struct TakeCreditAccountCall {
        pub borrowed_amount: ethers::core::types::U256,
        pub cumulative_index_at_open: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `takeOut`function with signature `takeOut(address,address,address)` and selector `[41, 50, 71, 47]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "takeOut", abi = "takeOut(address,address,address)")]
    pub struct TakeOutCall {
        pub prev: ethers::core::types::Address,
        pub credit_account: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `unpause`function with signature `unpause()` and selector `[63, 75, 168, 58]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "unpause", abi = "unpause()")]
    pub struct UnpauseCall;
    #[doc = "Container type for all input parameters for the `version`function with signature `version()` and selector `[84, 253, 77, 80]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "version", abi = "version()")]
    pub struct VersionCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum AccountFactoryCalls {
        ContractsRegister(ContractsRegisterCall),
        AddCreditAccount(AddCreditAccountCall),
        AddMiningApprovals(AddMiningApprovalsCall),
        CancelAllowance(CancelAllowanceCall),
        CountCreditAccounts(CountCreditAccountsCall),
        CountCreditAccountsInStock(CountCreditAccountsInStockCall),
        CreditAccounts(CreditAccountsCall),
        FinishMining(FinishMiningCall),
        GetNext(GetNextCall),
        Head(HeadCall),
        IsCreditAccount(IsCreditAccountCall),
        IsMiningFinished(IsMiningFinishedCall),
        MasterCreditAccount(MasterCreditAccountCall),
        MineCreditAccount(MineCreditAccountCall),
        MiningApprovals(MiningApprovalsCall),
        Pause(PauseCall),
        Paused(PausedCall),
        ReturnCreditAccount(ReturnCreditAccountCall),
        Tail(TailCall),
        TakeCreditAccount(TakeCreditAccountCall),
        TakeOut(TakeOutCall),
        Unpause(UnpauseCall),
        Version(VersionCall),
    }
    impl ethers::core::abi::AbiDecode for AccountFactoryCalls {
        fn decode(data: impl AsRef<[u8]>) -> Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <ContractsRegisterCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AccountFactoryCalls::ContractsRegister(decoded));
            }
            if let Ok(decoded) =
                <AddCreditAccountCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AccountFactoryCalls::AddCreditAccount(decoded));
            }
            if let Ok(decoded) =
                <AddMiningApprovalsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AccountFactoryCalls::AddMiningApprovals(decoded));
            }
            if let Ok(decoded) =
                <CancelAllowanceCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AccountFactoryCalls::CancelAllowance(decoded));
            }
            if let Ok(decoded) =
                <CountCreditAccountsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AccountFactoryCalls::CountCreditAccounts(decoded));
            }
            if let Ok(decoded) =
                <CountCreditAccountsInStockCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(AccountFactoryCalls::CountCreditAccountsInStock(decoded));
            }
            if let Ok(decoded) =
                <CreditAccountsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AccountFactoryCalls::CreditAccounts(decoded));
            }
            if let Ok(decoded) =
                <FinishMiningCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AccountFactoryCalls::FinishMining(decoded));
            }
            if let Ok(decoded) =
                <GetNextCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AccountFactoryCalls::GetNext(decoded));
            }
            if let Ok(decoded) = <HeadCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(AccountFactoryCalls::Head(decoded));
            }
            if let Ok(decoded) =
                <IsCreditAccountCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AccountFactoryCalls::IsCreditAccount(decoded));
            }
            if let Ok(decoded) =
                <IsMiningFinishedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AccountFactoryCalls::IsMiningFinished(decoded));
            }
            if let Ok(decoded) =
                <MasterCreditAccountCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AccountFactoryCalls::MasterCreditAccount(decoded));
            }
            if let Ok(decoded) =
                <MineCreditAccountCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AccountFactoryCalls::MineCreditAccount(decoded));
            }
            if let Ok(decoded) =
                <MiningApprovalsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AccountFactoryCalls::MiningApprovals(decoded));
            }
            if let Ok(decoded) = <PauseCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AccountFactoryCalls::Pause(decoded));
            }
            if let Ok(decoded) = <PausedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AccountFactoryCalls::Paused(decoded));
            }
            if let Ok(decoded) =
                <ReturnCreditAccountCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AccountFactoryCalls::ReturnCreditAccount(decoded));
            }
            if let Ok(decoded) = <TailCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(AccountFactoryCalls::Tail(decoded));
            }
            if let Ok(decoded) =
                <TakeCreditAccountCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AccountFactoryCalls::TakeCreditAccount(decoded));
            }
            if let Ok(decoded) =
                <TakeOutCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AccountFactoryCalls::TakeOut(decoded));
            }
            if let Ok(decoded) =
                <UnpauseCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AccountFactoryCalls::Unpause(decoded));
            }
            if let Ok(decoded) =
                <VersionCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AccountFactoryCalls::Version(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for AccountFactoryCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                AccountFactoryCalls::ContractsRegister(element) => element.encode(),
                AccountFactoryCalls::AddCreditAccount(element) => element.encode(),
                AccountFactoryCalls::AddMiningApprovals(element) => element.encode(),
                AccountFactoryCalls::CancelAllowance(element) => element.encode(),
                AccountFactoryCalls::CountCreditAccounts(element) => element.encode(),
                AccountFactoryCalls::CountCreditAccountsInStock(element) => element.encode(),
                AccountFactoryCalls::CreditAccounts(element) => element.encode(),
                AccountFactoryCalls::FinishMining(element) => element.encode(),
                AccountFactoryCalls::GetNext(element) => element.encode(),
                AccountFactoryCalls::Head(element) => element.encode(),
                AccountFactoryCalls::IsCreditAccount(element) => element.encode(),
                AccountFactoryCalls::IsMiningFinished(element) => element.encode(),
                AccountFactoryCalls::MasterCreditAccount(element) => element.encode(),
                AccountFactoryCalls::MineCreditAccount(element) => element.encode(),
                AccountFactoryCalls::MiningApprovals(element) => element.encode(),
                AccountFactoryCalls::Pause(element) => element.encode(),
                AccountFactoryCalls::Paused(element) => element.encode(),
                AccountFactoryCalls::ReturnCreditAccount(element) => element.encode(),
                AccountFactoryCalls::Tail(element) => element.encode(),
                AccountFactoryCalls::TakeCreditAccount(element) => element.encode(),
                AccountFactoryCalls::TakeOut(element) => element.encode(),
                AccountFactoryCalls::Unpause(element) => element.encode(),
                AccountFactoryCalls::Version(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for AccountFactoryCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                AccountFactoryCalls::ContractsRegister(element) => element.fmt(f),
                AccountFactoryCalls::AddCreditAccount(element) => element.fmt(f),
                AccountFactoryCalls::AddMiningApprovals(element) => element.fmt(f),
                AccountFactoryCalls::CancelAllowance(element) => element.fmt(f),
                AccountFactoryCalls::CountCreditAccounts(element) => element.fmt(f),
                AccountFactoryCalls::CountCreditAccountsInStock(element) => element.fmt(f),
                AccountFactoryCalls::CreditAccounts(element) => element.fmt(f),
                AccountFactoryCalls::FinishMining(element) => element.fmt(f),
                AccountFactoryCalls::GetNext(element) => element.fmt(f),
                AccountFactoryCalls::Head(element) => element.fmt(f),
                AccountFactoryCalls::IsCreditAccount(element) => element.fmt(f),
                AccountFactoryCalls::IsMiningFinished(element) => element.fmt(f),
                AccountFactoryCalls::MasterCreditAccount(element) => element.fmt(f),
                AccountFactoryCalls::MineCreditAccount(element) => element.fmt(f),
                AccountFactoryCalls::MiningApprovals(element) => element.fmt(f),
                AccountFactoryCalls::Pause(element) => element.fmt(f),
                AccountFactoryCalls::Paused(element) => element.fmt(f),
                AccountFactoryCalls::ReturnCreditAccount(element) => element.fmt(f),
                AccountFactoryCalls::Tail(element) => element.fmt(f),
                AccountFactoryCalls::TakeCreditAccount(element) => element.fmt(f),
                AccountFactoryCalls::TakeOut(element) => element.fmt(f),
                AccountFactoryCalls::Unpause(element) => element.fmt(f),
                AccountFactoryCalls::Version(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<ContractsRegisterCall> for AccountFactoryCalls {
        fn from(var: ContractsRegisterCall) -> Self {
            AccountFactoryCalls::ContractsRegister(var)
        }
    }
    impl ::std::convert::From<AddCreditAccountCall> for AccountFactoryCalls {
        fn from(var: AddCreditAccountCall) -> Self {
            AccountFactoryCalls::AddCreditAccount(var)
        }
    }
    impl ::std::convert::From<AddMiningApprovalsCall> for AccountFactoryCalls {
        fn from(var: AddMiningApprovalsCall) -> Self {
            AccountFactoryCalls::AddMiningApprovals(var)
        }
    }
    impl ::std::convert::From<CancelAllowanceCall> for AccountFactoryCalls {
        fn from(var: CancelAllowanceCall) -> Self {
            AccountFactoryCalls::CancelAllowance(var)
        }
    }
    impl ::std::convert::From<CountCreditAccountsCall> for AccountFactoryCalls {
        fn from(var: CountCreditAccountsCall) -> Self {
            AccountFactoryCalls::CountCreditAccounts(var)
        }
    }
    impl ::std::convert::From<CountCreditAccountsInStockCall> for AccountFactoryCalls {
        fn from(var: CountCreditAccountsInStockCall) -> Self {
            AccountFactoryCalls::CountCreditAccountsInStock(var)
        }
    }
    impl ::std::convert::From<CreditAccountsCall> for AccountFactoryCalls {
        fn from(var: CreditAccountsCall) -> Self {
            AccountFactoryCalls::CreditAccounts(var)
        }
    }
    impl ::std::convert::From<FinishMiningCall> for AccountFactoryCalls {
        fn from(var: FinishMiningCall) -> Self {
            AccountFactoryCalls::FinishMining(var)
        }
    }
    impl ::std::convert::From<GetNextCall> for AccountFactoryCalls {
        fn from(var: GetNextCall) -> Self {
            AccountFactoryCalls::GetNext(var)
        }
    }
    impl ::std::convert::From<HeadCall> for AccountFactoryCalls {
        fn from(var: HeadCall) -> Self {
            AccountFactoryCalls::Head(var)
        }
    }
    impl ::std::convert::From<IsCreditAccountCall> for AccountFactoryCalls {
        fn from(var: IsCreditAccountCall) -> Self {
            AccountFactoryCalls::IsCreditAccount(var)
        }
    }
    impl ::std::convert::From<IsMiningFinishedCall> for AccountFactoryCalls {
        fn from(var: IsMiningFinishedCall) -> Self {
            AccountFactoryCalls::IsMiningFinished(var)
        }
    }
    impl ::std::convert::From<MasterCreditAccountCall> for AccountFactoryCalls {
        fn from(var: MasterCreditAccountCall) -> Self {
            AccountFactoryCalls::MasterCreditAccount(var)
        }
    }
    impl ::std::convert::From<MineCreditAccountCall> for AccountFactoryCalls {
        fn from(var: MineCreditAccountCall) -> Self {
            AccountFactoryCalls::MineCreditAccount(var)
        }
    }
    impl ::std::convert::From<MiningApprovalsCall> for AccountFactoryCalls {
        fn from(var: MiningApprovalsCall) -> Self {
            AccountFactoryCalls::MiningApprovals(var)
        }
    }
    impl ::std::convert::From<PauseCall> for AccountFactoryCalls {
        fn from(var: PauseCall) -> Self {
            AccountFactoryCalls::Pause(var)
        }
    }
    impl ::std::convert::From<PausedCall> for AccountFactoryCalls {
        fn from(var: PausedCall) -> Self {
            AccountFactoryCalls::Paused(var)
        }
    }
    impl ::std::convert::From<ReturnCreditAccountCall> for AccountFactoryCalls {
        fn from(var: ReturnCreditAccountCall) -> Self {
            AccountFactoryCalls::ReturnCreditAccount(var)
        }
    }
    impl ::std::convert::From<TailCall> for AccountFactoryCalls {
        fn from(var: TailCall) -> Self {
            AccountFactoryCalls::Tail(var)
        }
    }
    impl ::std::convert::From<TakeCreditAccountCall> for AccountFactoryCalls {
        fn from(var: TakeCreditAccountCall) -> Self {
            AccountFactoryCalls::TakeCreditAccount(var)
        }
    }
    impl ::std::convert::From<TakeOutCall> for AccountFactoryCalls {
        fn from(var: TakeOutCall) -> Self {
            AccountFactoryCalls::TakeOut(var)
        }
    }
    impl ::std::convert::From<UnpauseCall> for AccountFactoryCalls {
        fn from(var: UnpauseCall) -> Self {
            AccountFactoryCalls::Unpause(var)
        }
    }
    impl ::std::convert::From<VersionCall> for AccountFactoryCalls {
        fn from(var: VersionCall) -> Self {
            AccountFactoryCalls::Version(var)
        }
    }
    #[doc = "`MiningApproval(address,address)`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct MiningApproval {
        pub token: ethers::core::types::Address,
        pub swap_contract: ethers::core::types::Address,
    }
}
