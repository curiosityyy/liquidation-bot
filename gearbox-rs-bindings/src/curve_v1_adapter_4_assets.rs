pub use curvev1adapter4assets_mod::*;
#[allow(clippy::too_many_arguments)]
mod curvev1adapter4assets_mod {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "CurveV1Adapter4Assets was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static CURVEV1ADAPTER4ASSETS_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creditManager\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_curvePool\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"NotImplementedException\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"ZeroAddressException\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"_gearboxAdapterType\",\"outputs\":[{\"internalType\":\"enum AdapterType\",\"name\":\"\",\"type\":\"uint8\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"_gearboxAdapterVersion\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"i\",\"type\":\"int128\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"rateMinRAY\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"add_all_liquidity_one_coin\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"amounts\",\"type\":\"uint256[4]\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"min_mint_amount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"add_liquidity\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"coins\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"creditFacade\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"creditManager\",\"outputs\":[{\"internalType\":\"contract ICreditManager\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"i\",\"type\":\"int128\",\"components\":[]},{\"internalType\":\"int128\",\"name\":\"j\",\"type\":\"int128\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"min_dy\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"exchange\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"i\",\"type\":\"int128\",\"components\":[]},{\"internalType\":\"int128\",\"name\":\"j\",\"type\":\"int128\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"rateMinRAY\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"exchange_all\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\",\"components\":[]},{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"exchange_underlying\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"i\",\"type\":\"int128\",\"components\":[]},{\"internalType\":\"int128\",\"name\":\"j\",\"type\":\"int128\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"get_dy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"i\",\"type\":\"int128\",\"components\":[]},{\"internalType\":\"int128\",\"name\":\"j\",\"type\":\"int128\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"get_dy_underlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"get_virtual_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lp_token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"i\",\"type\":\"int128\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"minRateRAY\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_all_liquidity_one_coin\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256[4]\",\"name\":\"min_amounts\",\"type\":\"uint256[4]\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_liquidity\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"amounts\",\"type\":\"uint256[4]\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"max_burn_amount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_liquidity_imbalance\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"int128\",\"name\":\"i\",\"type\":\"int128\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_liquidity_one_coin\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"targetContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"token2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"token3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static CURVEV1ADAPTER4ASSETS_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x6101806040523480156200001257600080fd5b5060405162002b3038038062002b30833981016040819052620000359162000494565b818181816001600160a01b03821615806200005757506001600160a01b038116155b156200007657604051635919af9760e11b815260040160405180910390fd5b6001600160a01b038216608081905260408051632f7a188160e01b81529051632f7a1881916004808201926020929091908290030181865afa158015620000c1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000e79190620004cc565b6001600160a01b0390811660a052600080546001600160a01b03191692821692909217909155600180558216151590506200013557604051635919af9760e11b815260040160405180910390fd5b6000816001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801562000194575060408051601f3d908101601f191682019092526200019191810190620004cc565b60015b6200022057604051633795104960e01b81526001600160a01b03831660048201527390e00ace148ca3b23ac1bc8c240c2a7dd9c2d7f590633795104990602401602060405180830381865afa158015620001f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002189190620004cc565b905062000223565b90505b6001600160a01b0390811660c081905260e05260405163c661065760e01b815260006004820152908416925063c66106579150602401602060405180830381865afa15801562000277573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200029d9190620004cc565b6001600160a01b039081166101005260405163c661065760e01b8152600160048201529082169063c661065790602401602060405180830381865afa158015620002eb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003119190620004cc565b6001600160a01b039081166101205260405163c661065760e01b8152600260048201529082169063c661065790602401602060405180830381865afa1580156200035f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003859190620004cc565b6001600160a01b039081166101405260405163c661065760e01b8152600360048201529082169063c661065790602401602060405180830381865afa158015620003d3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003f99190620004cc565b6001600160a01b039081166101605261010051161580620004245750610120516001600160a01b0316155b806200043a5750610140516001600160a01b0316155b80620004505750610160516001600160a01b0316155b156200046f57604051635919af9760e11b815260040160405180910390fd5b5050620004f1565b80516001600160a01b03811681146200048f57600080fd5b919050565b60008060408385031215620004a857600080fd5b620004b38362000477565b9150620004c36020840162000477565b90509250929050565b600060208284031215620004df57600080fd5b620004ea8262000477565b9392505050565b60805160a05160c05160e051610100516101205161014051610160516124a56200068b600039600081816103a8015281816107220152818161169d01526117680152600081816102020152818161066d015281816115ef015261178e01526000818161036e015281816105b80152818161154101526117b401526000818161019d015281816105030152818161149301526117da0152600081816102ca0152818161125f01528181611891015281816119f20152611a710152600081816103cf01526107c70152600081816102290152818161139d01528181611caf0152611e5701526000818161031f0152818161043a015281816104d1015281816105860152818161063b015281816106f0015281816107980152818161093501528181610ca501528181610f65015281816111440152818161130e015281816113e10152818161146401528181611512015281816115c00152818161166e01528181611817015281816118d10152818161195701528181611b0201528181611c3001528181611dc901528181611eb90152611f3101526124a56000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80637d49d875116100c3578063c66106571161007c578063c661065714610341578063ce30bbdb14610354578063d21220a714610369578063ec026ca714610390578063ef14101e146103a3578063fc0c546a146103ca57600080fd5b80637d49d875146102b257806382c63066146102c5578063a6417ed6146102ec578063bb7b8b80146102ff578063bd90df7014610307578063c12c21c01461031a57600080fd5b80632f7a1881116101155780632f7a18811461022457806333d2ebf21461024b5780633df021241461025e5780635e0d443f1461027157806378aa73a41461028457806379bea6641461029f57600080fd5b8063029b2f341461015d57806307211ef7146101725780630dfe16811461019857806318a7bd76146101d75780631a4d01d2146101ea57806325be124e146101fd575b600080fd5b61017061016b366004612048565b6103f1565b005b61018561018036600461208a565b61086c565b6040519081526020015b60405180910390f35b6101bf7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161018f565b6101706101e5366004612048565b6108f5565b6101706101f83660046120c6565b6109f5565b6101bf7f000000000000000000000000000000000000000000000000000000000000000081565b6101bf7f000000000000000000000000000000000000000000000000000000000000000081565b6101706102593660046120eb565b610a6b565b61017061026c366004612115565b610ab4565b61018561027f36600461208a565b610c21565b61028c600281565b60405161ffff909116815260200161018f565b6101706102ad36600461208a565b610c65565b6101706102c0366004612157565b610f25565b6101bf7f000000000000000000000000000000000000000000000000000000000000000081565b6101706102fa366004612115565b610fe4565b610185610ffd565b6000546101bf906001600160a01b031681565b6101bf7f000000000000000000000000000000000000000000000000000000000000000081565b6101bf61034f366004612184565b61107a565b61035c600581565b60405161018f919061219d565b6101bf7f000000000000000000000000000000000000000000000000000000000000000081565b61017061039e3660046120eb565b6110ee565b6101bf7f000000000000000000000000000000000000000000000000000000000000000081565b6101bf7f000000000000000000000000000000000000000000000000000000000000000081565b6002600154141561041d5760405162461bcd60e51b8152600401610414906121c5565b60405180910390fd5b6002600155604051633a562dc160e21b81523360048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e958b70490602401602060405180830381865afa158015610489573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ad91906121fc565b835190915015610562576000546040516346fb371d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116926346fb371d9261052f92339216907f00000000000000000000000000000000000000000000000000000000000000009060001990600401612242565b600060405180830381600087803b15801561054957600080fd5b505af115801561055d573d6000803e3d6000fd5b505050505b602083015115610617576000546040516346fb371d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116926346fb371d926105e492339216907f00000000000000000000000000000000000000000000000000000000000000009060001990600401612242565b600060405180830381600087803b1580156105fe57600080fd5b505af1158015610612573d6000803e3d6000fd5b505050505b6040830151156106cc576000546040516346fb371d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116926346fb371d9261069992339216907f00000000000000000000000000000000000000000000000000000000000000009060001990600401612242565b600060405180830381600087803b1580156106b357600080fd5b505af11580156106c7573d6000803e3d6000fd5b505050505b606083015115610781576000546040516346fb371d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116926346fb371d9261074e92339216907f00000000000000000000000000000000000000000000000000000000000000009060001990600401612242565b600060405180830381600087803b15801561076857600080fd5b505af115801561077c573d6000803e3d6000fd5b505050505b60405163028f1f8b60e51b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906351e3f160906107ef9084907f00000000000000000000000000000000000000000000000000000000000000009060040161226c565b600060405180830381600087803b15801561080957600080fd5b505af115801561081d573d6000803e3d6000fd5b50505050610862816000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506112f192505050565b5050600180555050565b600080546040516307211ef760e01b8152600f86810b600483015285900b6024820152604481018490526001600160a01b03909116906307211ef7906064015b602060405180830381865afa1580156108c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ed9190612286565b949350505050565b600260015414156109185760405162461bcd60e51b8152600401610414906121c5565b6002600155604051633a562dc160e21b81523360048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e958b70490602401602060405180830381865afa158015610984573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a891906121fc565b90506109b48184611443565b610862816000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506112f192505050565b60026001541415610a185760405162461bcd60e51b8152600401610414906121c5565b60026001556000610a28836116fc565b9050610862816000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506117ff92505050565b60026001541415610a8e5760405162461bcd60e51b8152600401610414906121c5565b60026001556000610a9e836116fc565b9050610aab83828461193f565b50506001805550565b60026001541415610ad75760405162461bcd60e51b8152600401610414906121c5565b60026001556000805460405163c661065760e01b81526001600160801b03871660048201526001600160a01b039091169063c661065790602401602060405180830381865afa158015610b2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5291906121fc565b6000805460405163c661065760e01b81526001600160801b038816600482015292935090916001600160a01b039091169063c661065790602401602060405180830381865afa158015610ba9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcd91906121fc565b9050610c1482826000368080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525060019250611adf915050565b5050600180555050505050565b60008054604051635e0d443f60e01b8152600f86810b600483015285900b6024820152604481018490526001600160a01b0390911690635e0d443f906064016108ac565b60026001541415610c885760405162461bcd60e51b8152600401610414906121c5565b6002600155604051633a562dc160e21b81523360048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e958b70490602401602060405180830381865afa158015610cf4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1891906121fc565b6000805460405163c661065760e01b81526001600160801b038816600482015292935090916001600160a01b039091169063c661065790602401602060405180830381865afa158015610d6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9391906121fc565b6000805460405163c661065760e01b81526001600160801b038816600482015292935090916001600160a01b039091169063c661065790602401602060405180830381865afa158015610dea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0e91906121fc565b6040516370a0823160e01b81526001600160a01b038581166004830152919250600091600191908516906370a0823190602401602060405180830381865afa158015610e5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e829190612286565b610e8c91906122b5565b905060006b033b2e3c9fd0803ce8000000610ea787846122cc565b610eb191906122eb565b60408051600f8b810b60248301528a900b60448201526064810185905260848082018490528251808303909101815260a49091019091526020810180516001600160e01b0316630f7c084960e21b179052909150610f16908690869086906001611b86565b50506001805550505050505050565b60026001541415610f485760405162461bcd60e51b8152600401610414906121c5565b6002600155604051633a562dc160e21b81523360048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e958b70490602401602060405180830381865afa158015610fb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd891906121fc565b90506109b48183611443565b60405163024e46f760e41b815260040160405180910390fd5b60008060009054906101000a90046001600160a01b03166001600160a01b031663bb7b8b806040518163ffffffff1660e01b8152600401602060405180830381865afa158015611051573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110759190612286565b905090565b6000805460405163c661065760e01b8152600481018490526001600160a01b039091169063c661065790602401602060405180830381865afa1580156110c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e891906121fc565b92915050565b600260015414156111115760405162461bcd60e51b8152600401610414906121c5565b60026001556000611121836116fc565b604051633a562dc160e21b81523360048201529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e958b70490602401602060405180830381865afa15801561118b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111af91906121fc565b6040516370a0823160e01b81526001600160a01b038083166004830152919250600091600191908516906370a0823190602401602060405180830381865afa1580156111ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112239190612286565b61122d91906122b5565b9050611237611fa6565b8181876001600160801b0316600481106112535761125361222c565b6020020152610c1483857f000000000000000000000000000000000000000000000000000000000000000062a6cbcd60e21b856b033b2e3c9fd0803ce800000061129d8c8a6122cc565b6112a791906122eb565b6040516024016112b892919061230d565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526000611b86565b60005460405163367203a560e11b81526060916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811692636ce4074a926113499233929116908790600401612375565b6000604051808303816000875af1158015611368573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261139091908101906123c2565b9050336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146110e8576040516312a6e60360e31b81526001600160a01b0384811660048301527f00000000000000000000000000000000000000000000000000000000000000001690639537301890602401600060405180830381600087803b15801561142557600080fd5b505af1158015611439573d6000803e3d6000fd5b5050505092915050565b8051600110156114ee5760405163028f1f8b60e51b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906351e3f160906114bb9085907f00000000000000000000000000000000000000000000000000000000000000009060040161226c565b600060405180830381600087803b1580156114d557600080fd5b505af11580156114e9573d6000803e3d6000fd5b505050505b60208101516001101561159c5760405163028f1f8b60e51b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906351e3f160906115699085907f00000000000000000000000000000000000000000000000000000000000000009060040161226c565b600060405180830381600087803b15801561158357600080fd5b505af1158015611597573d6000803e3d6000fd5b505050505b60408101516001101561164a5760405163028f1f8b60e51b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906351e3f160906116179085907f00000000000000000000000000000000000000000000000000000000000000009060040161226c565b600060405180830381600087803b15801561163157600080fd5b505af1158015611645573d6000803e3d6000fd5b505050505b6060810151600110156116f85760405163028f1f8b60e51b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906351e3f160906116c59085907f00000000000000000000000000000000000000000000000000000000000000009060040161226c565b600060405180830381600087803b1580156116df57600080fd5b505af11580156116f3573d6000803e3d6000fd5b505050505b5050565b60006004600f83900b13156117455760405162461bcd60e51b815260206004820152600f60248201526e092dcc6dee4e4cac6e840d2dcc8caf608b1b6044820152606401610414565b81600f0b6000146117d85781600f0b6001146117b25781600f0b60021461178c577f00000000000000000000000000000000000000000000000000000000000000006110e8565b7f00000000000000000000000000000000000000000000000000000000000000006110e8565b7f00000000000000000000000000000000000000000000000000000000000000006110e8565b7f000000000000000000000000000000000000000000000000000000000000000092915050565b604051633a562dc160e21b81523360048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e958b70490602401602060405180830381865afa158015611866573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188a91906121fc565b90506118b97f000000000000000000000000000000000000000000000000000000000000000084846000611adf565b5060405163028f1f8b60e51b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906351e3f16090611908908490879060040161226c565b600060405180830381600087803b15801561192257600080fd5b505af1158015611936573d6000803e3d6000fd5b50505050505050565b604051633a562dc160e21b81523360048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e958b70490602401602060405180830381865afa1580156119a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ca91906121fc565b6040516370a0823160e01b81526001600160a01b0382811660048301529192506000916001917f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401602060405180830381865afa158015611a3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5f9190612286565b611a6991906122b5565b90506116f3827f000000000000000000000000000000000000000000000000000000000000000086630d2680e960e11b858a6b033b2e3c9fd0803ce8000000611ab28b846122cc565b611abc91906122eb565b6040516024810193909352600f9190910b604483015260648201526084016112b8565b604051633a562dc160e21b81523360048201526060906000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e958b70490602401602060405180830381865afa158015611b49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6d91906121fc565b9050611b7c8187878787611b86565b9695505050505050565b60608115611ca157600054604051636eb1769f60e11b81526b1fffffffffffffffffffffff916001600160a01b038089169263dd62ed3e92611bcf928c9291169060040161226c565b602060405180830381865afa158015611bec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c109190612286565b1015611ca1576000546040516346fb371d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116926346fb371d92611c6e92339216908a9060001990600401612242565b600060405180830381600087803b158015611c8857600080fd5b505af1158015611c9c573d6000803e3d6000fd5b505050505b600080336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611daf576040516370a0823160e01b81526001600160a01b0389811660048301528816906370a0823190602401602060405180830381865afa158015611d1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3e9190612286565b6040516370a0823160e01b81526001600160a01b038a81166004830152919350908716906370a0823190602401602060405180830381865afa158015611d88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dac9190612286565b90505b60005460405163367203a560e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811692636ce4074a92611e0392339216908a90600401612375565b6000604051808303816000875af1158015611e22573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e4a91908101906123c2565b9250336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611f1a576040516332a54f6d60e11b81526001600160a01b0389811660048301528881166024830152878116604483015260648201849052608482018390527f0000000000000000000000000000000000000000000000000000000000000000169063654a9eda9060a401600060405180830381600087803b158015611efd57600080fd5b505af1158015611f11573d6000803e3d6000fd5b50505050611f9b565b60405163028f1f8b60e51b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906351e3f16090611f68908b908a9060040161226c565b600060405180830381600087803b158015611f8257600080fd5b505af1158015611f96573d6000803e3d6000fd5b505050505b505095945050505050565b60405180608001604052806004906020820280368337509192915050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112611feb57600080fd5b6040516080810181811067ffffffffffffffff8211171561200e5761200e611fc4565b60405280608084018581111561202357600080fd5b845b8181101561203d578035835260209283019201612025565b509195945050505050565b60008060a0838503121561205b57600080fd5b6120658484611fda565b946080939093013593505050565b8035600f81900b811461208557600080fd5b919050565b60008060006060848603121561209f57600080fd5b6120a884612073565b92506120b660208501612073565b9150604084013590509250925092565b6000806000606084860312156120db57600080fd5b833592506120b660208501612073565b600080604083850312156120fe57600080fd5b61210783612073565b946020939093013593505050565b6000806000806080858703121561212b57600080fd5b61213485612073565b935061214260208601612073565b93969395505050506040820135916060013590565b60008060a0838503121561216a57600080fd5b8235915061217b8460208501611fda565b90509250929050565b60006020828403121561219657600080fd5b5035919050565b60208101600e83106121bf57634e487b7160e01b600052602160045260246000fd5b91905290565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60006020828403121561220e57600080fd5b81516001600160a01b038116811461222557600080fd5b9392505050565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b0392831681529116602082015260400190565b60006020828403121561229857600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156122c7576122c761229f565b500390565b60008160001904831182151516156122e6576122e661229f565b500290565b60008261230857634e487b7160e01b600052601260045260246000fd5b500490565b60a08101818460005b6004811015612335578151835260209283019290910190600101612316565b5050508260808301529392505050565b60005b83811015612360578181015183820152602001612348565b8381111561236f576000848401525b50505050565b600060018060a01b0380861683528085166020840152506060604083015282518060608401526123ac816080850160208701612345565b601f01601f191691909101608001949350505050565b6000602082840312156123d457600080fd5b815167ffffffffffffffff808211156123ec57600080fd5b818401915084601f83011261240057600080fd5b81518181111561241257612412611fc4565b604051601f8201601f19908116603f0116810190838211818310171561243a5761243a611fc4565b8160405282815287602084870101111561245357600080fd5b612464836020830160208801612345565b97965050505050505056fea264697066735822122031542dac14e1827ceef4182ee3a77ec013dd2537b1085bfacff6eb734180725b64736f6c634300080a0033" . parse () . expect ("invalid bytecode")
        });
    #[derive(Clone)]
    pub struct CurveV1Adapter4Assets<M>(ethers::contract::Contract<M>);
    impl<M> std::ops::Deref for CurveV1Adapter4Assets<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for CurveV1Adapter4Assets<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(CurveV1Adapter4Assets))
                .field(&self.address())
                .finish()
        }
    }
    impl<'a, M: ethers::providers::Middleware> CurveV1Adapter4Assets<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(
                address.into(),
                CURVEV1ADAPTER4ASSETS_ABI.clone(),
                client,
            )
            .into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                CURVEV1ADAPTER4ASSETS_ABI.clone(),
                CURVEV1ADAPTER4ASSETS_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `_gearboxAdapterType` (0xce30bbdb) function"]
        pub fn gearbox_adapter_type(&self) -> ethers::contract::builders::ContractCall<M, u8> {
            self.0
                .method_hash([206, 48, 187, 219], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `_gearboxAdapterVersion` (0x78aa73a4) function"]
        pub fn gearbox_adapter_version(&self) -> ethers::contract::builders::ContractCall<M, u16> {
            self.0
                .method_hash([120, 170, 115, 164], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `add_all_liquidity_one_coin` (0xec026ca7) function"]
        pub fn add_all_liquidity_one_coin(
            &self,
            i: i128,
            rate_min_ray: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([236, 2, 108, 167], (i, rate_min_ray))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `add_liquidity` (0x029b2f34) function"]
        pub fn add_liquidity(
            &self,
            amounts: [ethers::core::types::U256; 4usize],
            min_mint_amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([2, 155, 47, 52], (amounts, min_mint_amount))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `coins` (0xc6610657) function"]
        pub fn coins(
            &self,
            i: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([198, 97, 6, 87], i)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `creditFacade` (0x2f7a1881) function"]
        pub fn credit_facade(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([47, 122, 24, 129], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `creditManager` (0xc12c21c0) function"]
        pub fn credit_manager(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([193, 44, 33, 192], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `exchange` (0x3df02124) function"]
        pub fn exchange(
            &self,
            i: i128,
            j: i128,
            dx: ethers::core::types::U256,
            min_dy: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([61, 240, 33, 36], (i, j, dx, min_dy))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `exchange_all` (0x79bea664) function"]
        pub fn exchange_all(
            &self,
            i: i128,
            j: i128,
            rate_min_ray: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([121, 190, 166, 100], (i, j, rate_min_ray))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `exchange_underlying` (0xa6417ed6) function"]
        pub fn exchange_underlying(
            &self,
            p0: i128,
            p1: i128,
            p2: ethers::core::types::U256,
            p3: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([166, 65, 126, 214], (p0, p1, p2, p3))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `get_dy` (0x5e0d443f) function"]
        pub fn get_dy(
            &self,
            i: i128,
            j: i128,
            dx: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([94, 13, 68, 63], (i, j, dx))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `get_dy_underlying` (0x07211ef7) function"]
        pub fn get_dy_underlying(
            &self,
            i: i128,
            j: i128,
            dx: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([7, 33, 30, 247], (i, j, dx))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `get_virtual_price` (0xbb7b8b80) function"]
        pub fn get_virtual_price(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([187, 123, 139, 128], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `lp_token` (0x82c63066) function"]
        pub fn lp_token(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([130, 198, 48, 102], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `remove_all_liquidity_one_coin` (0x33d2ebf2) function"]
        pub fn remove_all_liquidity_one_coin(
            &self,
            i: i128,
            min_rate_ray: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([51, 210, 235, 242], (i, min_rate_ray))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `remove_liquidity` (0x7d49d875) function"]
        pub fn remove_liquidity(
            &self,
            amount: ethers::core::types::U256,
            min_amounts: [ethers::core::types::U256; 4usize],
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([125, 73, 216, 117], (amount, min_amounts))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `remove_liquidity_imbalance` (0x18a7bd76) function"]
        pub fn remove_liquidity_imbalance(
            &self,
            amounts: [ethers::core::types::U256; 4usize],
            max_burn_amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([24, 167, 189, 118], (amounts, max_burn_amount))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `remove_liquidity_one_coin` (0x1a4d01d2) function"]
        pub fn remove_liquidity_one_coin(
            &self,
            p0: ethers::core::types::U256,
            i: i128,
            p2: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([26, 77, 1, 210], (p0, i, p2))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `targetContract` (0xbd90df70) function"]
        pub fn target_contract(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([189, 144, 223, 112], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `token` (0xfc0c546a) function"]
        pub fn token(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([252, 12, 84, 106], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `token0` (0x0dfe1681) function"]
        pub fn token_0(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([13, 254, 22, 129], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `token1` (0xd21220a7) function"]
        pub fn token_1(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([210, 18, 32, 167], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `token2` (0x25be124e) function"]
        pub fn token_2(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([37, 190, 18, 78], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `token3` (0xef14101e) function"]
        pub fn token_3(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([239, 20, 16, 30], ())
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>>
        for CurveV1Adapter4Assets<M>
    {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[doc = "Container type for all input parameters for the `_gearboxAdapterType`function with signature `_gearboxAdapterType()` and selector `[206, 48, 187, 219]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "_gearboxAdapterType", abi = "_gearboxAdapterType()")]
    pub struct GearboxAdapterTypeCall;
    #[doc = "Container type for all input parameters for the `_gearboxAdapterVersion`function with signature `_gearboxAdapterVersion()` and selector `[120, 170, 115, 164]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "_gearboxAdapterVersion", abi = "_gearboxAdapterVersion()")]
    pub struct GearboxAdapterVersionCall;
    #[doc = "Container type for all input parameters for the `add_all_liquidity_one_coin`function with signature `add_all_liquidity_one_coin(int128,uint256)` and selector `[236, 2, 108, 167]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "add_all_liquidity_one_coin",
        abi = "add_all_liquidity_one_coin(int128,uint256)"
    )]
    pub struct AddAllLiquidityOneCoinCall {
        pub i: i128,
        pub rate_min_ray: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `add_liquidity`function with signature `add_liquidity(uint256[4],uint256)` and selector `[2, 155, 47, 52]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "add_liquidity", abi = "add_liquidity(uint256[4],uint256)")]
    pub struct AddLiquidityCall {
        pub amounts: [ethers::core::types::U256; 4usize],
        pub min_mint_amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `coins`function with signature `coins(uint256)` and selector `[198, 97, 6, 87]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "coins", abi = "coins(uint256)")]
    pub struct CoinsCall {
        pub i: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `creditFacade`function with signature `creditFacade()` and selector `[47, 122, 24, 129]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "creditFacade", abi = "creditFacade()")]
    pub struct CreditFacadeCall;
    #[doc = "Container type for all input parameters for the `creditManager`function with signature `creditManager()` and selector `[193, 44, 33, 192]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "creditManager", abi = "creditManager()")]
    pub struct CreditManagerCall;
    #[doc = "Container type for all input parameters for the `exchange`function with signature `exchange(int128,int128,uint256,uint256)` and selector `[61, 240, 33, 36]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "exchange", abi = "exchange(int128,int128,uint256,uint256)")]
    pub struct ExchangeCall {
        pub i: i128,
        pub j: i128,
        pub dx: ethers::core::types::U256,
        pub min_dy: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `exchange_all`function with signature `exchange_all(int128,int128,uint256)` and selector `[121, 190, 166, 100]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "exchange_all", abi = "exchange_all(int128,int128,uint256)")]
    pub struct ExchangeAllCall {
        pub i: i128,
        pub j: i128,
        pub rate_min_ray: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `exchange_underlying`function with signature `exchange_underlying(int128,int128,uint256,uint256)` and selector `[166, 65, 126, 214]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "exchange_underlying",
        abi = "exchange_underlying(int128,int128,uint256,uint256)"
    )]
    pub struct ExchangeUnderlyingCall(
        pub i128,
        pub i128,
        pub ethers::core::types::U256,
        pub ethers::core::types::U256,
    );
    #[doc = "Container type for all input parameters for the `get_dy`function with signature `get_dy(int128,int128,uint256)` and selector `[94, 13, 68, 63]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "get_dy", abi = "get_dy(int128,int128,uint256)")]
    pub struct GetDyCall {
        pub i: i128,
        pub j: i128,
        pub dx: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `get_dy_underlying`function with signature `get_dy_underlying(int128,int128,uint256)` and selector `[7, 33, 30, 247]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "get_dy_underlying",
        abi = "get_dy_underlying(int128,int128,uint256)"
    )]
    pub struct GetDyUnderlyingCall {
        pub i: i128,
        pub j: i128,
        pub dx: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `get_virtual_price`function with signature `get_virtual_price()` and selector `[187, 123, 139, 128]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "get_virtual_price", abi = "get_virtual_price()")]
    pub struct GetVirtualPriceCall;
    #[doc = "Container type for all input parameters for the `lp_token`function with signature `lp_token()` and selector `[130, 198, 48, 102]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "lp_token", abi = "lp_token()")]
    pub struct LpTokenCall;
    #[doc = "Container type for all input parameters for the `remove_all_liquidity_one_coin`function with signature `remove_all_liquidity_one_coin(int128,uint256)` and selector `[51, 210, 235, 242]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "remove_all_liquidity_one_coin",
        abi = "remove_all_liquidity_one_coin(int128,uint256)"
    )]
    pub struct RemoveAllLiquidityOneCoinCall {
        pub i: i128,
        pub min_rate_ray: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `remove_liquidity`function with signature `remove_liquidity(uint256,uint256[4])` and selector `[125, 73, 216, 117]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "remove_liquidity",
        abi = "remove_liquidity(uint256,uint256[4])"
    )]
    pub struct RemoveLiquidityCall {
        pub amount: ethers::core::types::U256,
        pub min_amounts: [ethers::core::types::U256; 4usize],
    }
    #[doc = "Container type for all input parameters for the `remove_liquidity_imbalance`function with signature `remove_liquidity_imbalance(uint256[4],uint256)` and selector `[24, 167, 189, 118]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "remove_liquidity_imbalance",
        abi = "remove_liquidity_imbalance(uint256[4],uint256)"
    )]
    pub struct RemoveLiquidityImbalanceCall {
        pub amounts: [ethers::core::types::U256; 4usize],
        pub max_burn_amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `remove_liquidity_one_coin`function with signature `remove_liquidity_one_coin(uint256,int128,uint256)` and selector `[26, 77, 1, 210]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "remove_liquidity_one_coin",
        abi = "remove_liquidity_one_coin(uint256,int128,uint256)"
    )]
    pub struct RemoveLiquidityOneCoinCall {
        pub p0: ethers::core::types::U256,
        pub i: i128,
        pub p2: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `targetContract`function with signature `targetContract()` and selector `[189, 144, 223, 112]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "targetContract", abi = "targetContract()")]
    pub struct TargetContractCall;
    #[doc = "Container type for all input parameters for the `token`function with signature `token()` and selector `[252, 12, 84, 106]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "token", abi = "token()")]
    pub struct TokenCall;
    #[doc = "Container type for all input parameters for the `token0`function with signature `token0()` and selector `[13, 254, 22, 129]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "token0", abi = "token0()")]
    pub struct Token0Call;
    #[doc = "Container type for all input parameters for the `token1`function with signature `token1()` and selector `[210, 18, 32, 167]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "token1", abi = "token1()")]
    pub struct Token1Call;
    #[doc = "Container type for all input parameters for the `token2`function with signature `token2()` and selector `[37, 190, 18, 78]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "token2", abi = "token2()")]
    pub struct Token2Call;
    #[doc = "Container type for all input parameters for the `token3`function with signature `token3()` and selector `[239, 20, 16, 30]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "token3", abi = "token3()")]
    pub struct Token3Call;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum CurveV1Adapter4AssetsCalls {
        GearboxAdapterType(GearboxAdapterTypeCall),
        GearboxAdapterVersion(GearboxAdapterVersionCall),
        AddAllLiquidityOneCoin(AddAllLiquidityOneCoinCall),
        AddLiquidity(AddLiquidityCall),
        Coins(CoinsCall),
        CreditFacade(CreditFacadeCall),
        CreditManager(CreditManagerCall),
        Exchange(ExchangeCall),
        ExchangeAll(ExchangeAllCall),
        ExchangeUnderlying(ExchangeUnderlyingCall),
        GetDy(GetDyCall),
        GetDyUnderlying(GetDyUnderlyingCall),
        GetVirtualPrice(GetVirtualPriceCall),
        LpToken(LpTokenCall),
        RemoveAllLiquidityOneCoin(RemoveAllLiquidityOneCoinCall),
        RemoveLiquidity(RemoveLiquidityCall),
        RemoveLiquidityImbalance(RemoveLiquidityImbalanceCall),
        RemoveLiquidityOneCoin(RemoveLiquidityOneCoinCall),
        TargetContract(TargetContractCall),
        Token(TokenCall),
        Token0(Token0Call),
        Token1(Token1Call),
        Token2(Token2Call),
        Token3(Token3Call),
    }
    impl ethers::core::abi::AbiDecode for CurveV1Adapter4AssetsCalls {
        fn decode(data: impl AsRef<[u8]>) -> Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <GearboxAdapterTypeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CurveV1Adapter4AssetsCalls::GearboxAdapterType(decoded));
            }
            if let Ok(decoded) =
                <GearboxAdapterVersionCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CurveV1Adapter4AssetsCalls::GearboxAdapterVersion(decoded));
            }
            if let Ok(decoded) =
                <AddAllLiquidityOneCoinCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CurveV1Adapter4AssetsCalls::AddAllLiquidityOneCoin(decoded));
            }
            if let Ok(decoded) =
                <AddLiquidityCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CurveV1Adapter4AssetsCalls::AddLiquidity(decoded));
            }
            if let Ok(decoded) = <CoinsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CurveV1Adapter4AssetsCalls::Coins(decoded));
            }
            if let Ok(decoded) =
                <CreditFacadeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CurveV1Adapter4AssetsCalls::CreditFacade(decoded));
            }
            if let Ok(decoded) =
                <CreditManagerCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CurveV1Adapter4AssetsCalls::CreditManager(decoded));
            }
            if let Ok(decoded) =
                <ExchangeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CurveV1Adapter4AssetsCalls::Exchange(decoded));
            }
            if let Ok(decoded) =
                <ExchangeAllCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CurveV1Adapter4AssetsCalls::ExchangeAll(decoded));
            }
            if let Ok(decoded) =
                <ExchangeUnderlyingCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CurveV1Adapter4AssetsCalls::ExchangeUnderlying(decoded));
            }
            if let Ok(decoded) = <GetDyCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CurveV1Adapter4AssetsCalls::GetDy(decoded));
            }
            if let Ok(decoded) =
                <GetDyUnderlyingCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CurveV1Adapter4AssetsCalls::GetDyUnderlying(decoded));
            }
            if let Ok(decoded) =
                <GetVirtualPriceCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CurveV1Adapter4AssetsCalls::GetVirtualPrice(decoded));
            }
            if let Ok(decoded) =
                <LpTokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CurveV1Adapter4AssetsCalls::LpToken(decoded));
            }
            if let Ok(decoded) =
                <RemoveAllLiquidityOneCoinCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CurveV1Adapter4AssetsCalls::RemoveAllLiquidityOneCoin(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <RemoveLiquidityCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CurveV1Adapter4AssetsCalls::RemoveLiquidity(decoded));
            }
            if let Ok(decoded) =
                <RemoveLiquidityImbalanceCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CurveV1Adapter4AssetsCalls::RemoveLiquidityImbalance(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <RemoveLiquidityOneCoinCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CurveV1Adapter4AssetsCalls::RemoveLiquidityOneCoin(decoded));
            }
            if let Ok(decoded) =
                <TargetContractCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CurveV1Adapter4AssetsCalls::TargetContract(decoded));
            }
            if let Ok(decoded) = <TokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CurveV1Adapter4AssetsCalls::Token(decoded));
            }
            if let Ok(decoded) = <Token0Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CurveV1Adapter4AssetsCalls::Token0(decoded));
            }
            if let Ok(decoded) = <Token1Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CurveV1Adapter4AssetsCalls::Token1(decoded));
            }
            if let Ok(decoded) = <Token2Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CurveV1Adapter4AssetsCalls::Token2(decoded));
            }
            if let Ok(decoded) = <Token3Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CurveV1Adapter4AssetsCalls::Token3(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for CurveV1Adapter4AssetsCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                CurveV1Adapter4AssetsCalls::GearboxAdapterType(element) => element.encode(),
                CurveV1Adapter4AssetsCalls::GearboxAdapterVersion(element) => element.encode(),
                CurveV1Adapter4AssetsCalls::AddAllLiquidityOneCoin(element) => element.encode(),
                CurveV1Adapter4AssetsCalls::AddLiquidity(element) => element.encode(),
                CurveV1Adapter4AssetsCalls::Coins(element) => element.encode(),
                CurveV1Adapter4AssetsCalls::CreditFacade(element) => element.encode(),
                CurveV1Adapter4AssetsCalls::CreditManager(element) => element.encode(),
                CurveV1Adapter4AssetsCalls::Exchange(element) => element.encode(),
                CurveV1Adapter4AssetsCalls::ExchangeAll(element) => element.encode(),
                CurveV1Adapter4AssetsCalls::ExchangeUnderlying(element) => element.encode(),
                CurveV1Adapter4AssetsCalls::GetDy(element) => element.encode(),
                CurveV1Adapter4AssetsCalls::GetDyUnderlying(element) => element.encode(),
                CurveV1Adapter4AssetsCalls::GetVirtualPrice(element) => element.encode(),
                CurveV1Adapter4AssetsCalls::LpToken(element) => element.encode(),
                CurveV1Adapter4AssetsCalls::RemoveAllLiquidityOneCoin(element) => element.encode(),
                CurveV1Adapter4AssetsCalls::RemoveLiquidity(element) => element.encode(),
                CurveV1Adapter4AssetsCalls::RemoveLiquidityImbalance(element) => element.encode(),
                CurveV1Adapter4AssetsCalls::RemoveLiquidityOneCoin(element) => element.encode(),
                CurveV1Adapter4AssetsCalls::TargetContract(element) => element.encode(),
                CurveV1Adapter4AssetsCalls::Token(element) => element.encode(),
                CurveV1Adapter4AssetsCalls::Token0(element) => element.encode(),
                CurveV1Adapter4AssetsCalls::Token1(element) => element.encode(),
                CurveV1Adapter4AssetsCalls::Token2(element) => element.encode(),
                CurveV1Adapter4AssetsCalls::Token3(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for CurveV1Adapter4AssetsCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                CurveV1Adapter4AssetsCalls::GearboxAdapterType(element) => element.fmt(f),
                CurveV1Adapter4AssetsCalls::GearboxAdapterVersion(element) => element.fmt(f),
                CurveV1Adapter4AssetsCalls::AddAllLiquidityOneCoin(element) => element.fmt(f),
                CurveV1Adapter4AssetsCalls::AddLiquidity(element) => element.fmt(f),
                CurveV1Adapter4AssetsCalls::Coins(element) => element.fmt(f),
                CurveV1Adapter4AssetsCalls::CreditFacade(element) => element.fmt(f),
                CurveV1Adapter4AssetsCalls::CreditManager(element) => element.fmt(f),
                CurveV1Adapter4AssetsCalls::Exchange(element) => element.fmt(f),
                CurveV1Adapter4AssetsCalls::ExchangeAll(element) => element.fmt(f),
                CurveV1Adapter4AssetsCalls::ExchangeUnderlying(element) => element.fmt(f),
                CurveV1Adapter4AssetsCalls::GetDy(element) => element.fmt(f),
                CurveV1Adapter4AssetsCalls::GetDyUnderlying(element) => element.fmt(f),
                CurveV1Adapter4AssetsCalls::GetVirtualPrice(element) => element.fmt(f),
                CurveV1Adapter4AssetsCalls::LpToken(element) => element.fmt(f),
                CurveV1Adapter4AssetsCalls::RemoveAllLiquidityOneCoin(element) => element.fmt(f),
                CurveV1Adapter4AssetsCalls::RemoveLiquidity(element) => element.fmt(f),
                CurveV1Adapter4AssetsCalls::RemoveLiquidityImbalance(element) => element.fmt(f),
                CurveV1Adapter4AssetsCalls::RemoveLiquidityOneCoin(element) => element.fmt(f),
                CurveV1Adapter4AssetsCalls::TargetContract(element) => element.fmt(f),
                CurveV1Adapter4AssetsCalls::Token(element) => element.fmt(f),
                CurveV1Adapter4AssetsCalls::Token0(element) => element.fmt(f),
                CurveV1Adapter4AssetsCalls::Token1(element) => element.fmt(f),
                CurveV1Adapter4AssetsCalls::Token2(element) => element.fmt(f),
                CurveV1Adapter4AssetsCalls::Token3(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<GearboxAdapterTypeCall> for CurveV1Adapter4AssetsCalls {
        fn from(var: GearboxAdapterTypeCall) -> Self {
            CurveV1Adapter4AssetsCalls::GearboxAdapterType(var)
        }
    }
    impl ::std::convert::From<GearboxAdapterVersionCall> for CurveV1Adapter4AssetsCalls {
        fn from(var: GearboxAdapterVersionCall) -> Self {
            CurveV1Adapter4AssetsCalls::GearboxAdapterVersion(var)
        }
    }
    impl ::std::convert::From<AddAllLiquidityOneCoinCall> for CurveV1Adapter4AssetsCalls {
        fn from(var: AddAllLiquidityOneCoinCall) -> Self {
            CurveV1Adapter4AssetsCalls::AddAllLiquidityOneCoin(var)
        }
    }
    impl ::std::convert::From<AddLiquidityCall> for CurveV1Adapter4AssetsCalls {
        fn from(var: AddLiquidityCall) -> Self {
            CurveV1Adapter4AssetsCalls::AddLiquidity(var)
        }
    }
    impl ::std::convert::From<CoinsCall> for CurveV1Adapter4AssetsCalls {
        fn from(var: CoinsCall) -> Self {
            CurveV1Adapter4AssetsCalls::Coins(var)
        }
    }
    impl ::std::convert::From<CreditFacadeCall> for CurveV1Adapter4AssetsCalls {
        fn from(var: CreditFacadeCall) -> Self {
            CurveV1Adapter4AssetsCalls::CreditFacade(var)
        }
    }
    impl ::std::convert::From<CreditManagerCall> for CurveV1Adapter4AssetsCalls {
        fn from(var: CreditManagerCall) -> Self {
            CurveV1Adapter4AssetsCalls::CreditManager(var)
        }
    }
    impl ::std::convert::From<ExchangeCall> for CurveV1Adapter4AssetsCalls {
        fn from(var: ExchangeCall) -> Self {
            CurveV1Adapter4AssetsCalls::Exchange(var)
        }
    }
    impl ::std::convert::From<ExchangeAllCall> for CurveV1Adapter4AssetsCalls {
        fn from(var: ExchangeAllCall) -> Self {
            CurveV1Adapter4AssetsCalls::ExchangeAll(var)
        }
    }
    impl ::std::convert::From<ExchangeUnderlyingCall> for CurveV1Adapter4AssetsCalls {
        fn from(var: ExchangeUnderlyingCall) -> Self {
            CurveV1Adapter4AssetsCalls::ExchangeUnderlying(var)
        }
    }
    impl ::std::convert::From<GetDyCall> for CurveV1Adapter4AssetsCalls {
        fn from(var: GetDyCall) -> Self {
            CurveV1Adapter4AssetsCalls::GetDy(var)
        }
    }
    impl ::std::convert::From<GetDyUnderlyingCall> for CurveV1Adapter4AssetsCalls {
        fn from(var: GetDyUnderlyingCall) -> Self {
            CurveV1Adapter4AssetsCalls::GetDyUnderlying(var)
        }
    }
    impl ::std::convert::From<GetVirtualPriceCall> for CurveV1Adapter4AssetsCalls {
        fn from(var: GetVirtualPriceCall) -> Self {
            CurveV1Adapter4AssetsCalls::GetVirtualPrice(var)
        }
    }
    impl ::std::convert::From<LpTokenCall> for CurveV1Adapter4AssetsCalls {
        fn from(var: LpTokenCall) -> Self {
            CurveV1Adapter4AssetsCalls::LpToken(var)
        }
    }
    impl ::std::convert::From<RemoveAllLiquidityOneCoinCall> for CurveV1Adapter4AssetsCalls {
        fn from(var: RemoveAllLiquidityOneCoinCall) -> Self {
            CurveV1Adapter4AssetsCalls::RemoveAllLiquidityOneCoin(var)
        }
    }
    impl ::std::convert::From<RemoveLiquidityCall> for CurveV1Adapter4AssetsCalls {
        fn from(var: RemoveLiquidityCall) -> Self {
            CurveV1Adapter4AssetsCalls::RemoveLiquidity(var)
        }
    }
    impl ::std::convert::From<RemoveLiquidityImbalanceCall> for CurveV1Adapter4AssetsCalls {
        fn from(var: RemoveLiquidityImbalanceCall) -> Self {
            CurveV1Adapter4AssetsCalls::RemoveLiquidityImbalance(var)
        }
    }
    impl ::std::convert::From<RemoveLiquidityOneCoinCall> for CurveV1Adapter4AssetsCalls {
        fn from(var: RemoveLiquidityOneCoinCall) -> Self {
            CurveV1Adapter4AssetsCalls::RemoveLiquidityOneCoin(var)
        }
    }
    impl ::std::convert::From<TargetContractCall> for CurveV1Adapter4AssetsCalls {
        fn from(var: TargetContractCall) -> Self {
            CurveV1Adapter4AssetsCalls::TargetContract(var)
        }
    }
    impl ::std::convert::From<TokenCall> for CurveV1Adapter4AssetsCalls {
        fn from(var: TokenCall) -> Self {
            CurveV1Adapter4AssetsCalls::Token(var)
        }
    }
    impl ::std::convert::From<Token0Call> for CurveV1Adapter4AssetsCalls {
        fn from(var: Token0Call) -> Self {
            CurveV1Adapter4AssetsCalls::Token0(var)
        }
    }
    impl ::std::convert::From<Token1Call> for CurveV1Adapter4AssetsCalls {
        fn from(var: Token1Call) -> Self {
            CurveV1Adapter4AssetsCalls::Token1(var)
        }
    }
    impl ::std::convert::From<Token2Call> for CurveV1Adapter4AssetsCalls {
        fn from(var: Token2Call) -> Self {
            CurveV1Adapter4AssetsCalls::Token2(var)
        }
    }
    impl ::std::convert::From<Token3Call> for CurveV1Adapter4AssetsCalls {
        fn from(var: Token3Call) -> Self {
            CurveV1Adapter4AssetsCalls::Token3(var)
        }
    }
}
