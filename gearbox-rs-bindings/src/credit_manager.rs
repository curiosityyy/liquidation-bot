pub use creditmanager_mod::*;
#[allow(clippy::too_many_arguments)]
mod creditmanager_mod {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "CreditManager was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static CREDITMANAGER_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolService\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"AdaptersOrFacadeOnlyException\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"BorrowAmountOutOfLimitsException\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"HasNoOpenedAccountException\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"IncorrectLimitsException\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"NotCreditConfiguratorException\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"NotCreditFacadeException\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"NotEnoughCollateralException\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"TargetContractNotAllowedExpcetion\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"TokenAlreadyAddedException\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"TokenNotAllowedException\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"TooMuchTokensException\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"ZeroAddressException\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"ZeroAddressOrUserAlreadyHasAccountException\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"ExecuteOrder\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newConfigurator\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"NewConfigurator\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Paused\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Unpaused\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"adapterToContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"addCollateral\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"addToken\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"allowedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"allowedTokensCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"approveCreditAccount\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"isLiquidated\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"borrowedAmountWithInterest\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"calcClosePayments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToPool\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"remainingFunds\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creditAccount\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"calcCreditAccountAccruedInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"borrowedAmountWithInterest\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"changeContractAllowance\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creditAccount\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"checkAndEnableToken\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"chiThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"isLiquidated\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"skipTokenMask\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"convertWETH\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"closeCreditAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remainingFunds\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"creditAccounts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"creditConfigurator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"creditFacade\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"enabledTokensMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"executeOrder\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"fastCheckCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creditAccount\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"balanceInBefore\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"balanceOutBefore\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"fastCollateralCheck\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"feeInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"feeLiquidation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"forbidenTokenMask\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creditAccount\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"fullCollateralCheck\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getCreditAccountOrRevert\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"result\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"hfCheckInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"liquidationDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"liquidationThresholds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"increase\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"manageDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newBorrowedAmount\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"maxBorrowedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"minBorrowedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"openCreditAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"pause\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"poolService\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creditConfigurator\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setConfigurator\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_forbidMask\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setForbidMask\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setLiquidationThreshold\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBorrowedAmount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_maxBorrowedAmount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_feeInterest\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_feeLiquidation\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_liquidationDiscount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_chiThreshold\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_hfCheckInterval\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setParams\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"tokenMasksMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferAccountOwnership\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"unpause\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creditFacade\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"upgradeContracts\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"wethAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"wethGateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static CREDITMANAGER_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x6101406040523480156200001257600080fd5b5060405162003a9138038062003a918339810160408190526200003591620005af565b806001600160a01b0316632954018c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000074573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200009a9190620005af565b6000805460ff1916905560408051808201909152600281526105a360f41b60208201526001600160a01b038216620000f05760405162461bcd60e51b8152600401620000e79190620005d6565b60405180910390fd5b50806001600160a01b031663087376956040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000130573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001569190620005af565b6001600160a01b03908116608052600180558216151590506200018c57604051635919af9760e11b815260040160405180910390fd5b6000816001600160a01b0316632954018c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620001cd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001f39190620005af565b9050816001600160a01b031660e0816001600160a01b031681525050600060e0516001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000252573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002789190620005af565b6001600160a01b03811660c05290506200029281620004d2565b6001600c6000836001600160a01b03166001600160a01b0316815260200190815260200160002081905550816001600160a01b0316634c252f916040518163ffffffff1660e01b8152600401602060405180830381865afa158015620002fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003229190620005af565b6001600160a01b0316610100816001600160a01b031681525050816001600160a01b03166377532ed96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200037b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003a19190620005af565b6001600160a01b0316610120816001600160a01b031681525050816001600160a01b031663fca513a86040518163ffffffff1660e01b8152600401602060405180830381865afa158015620003fa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004209190620005af565b601160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550816001600160a01b0316639068a8686040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000485573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004ab9190620005af565b6001600160a01b031660a0525050600980546001600160a01b03191633179055506200062e565b6001600160a01b0381166000908152600c6020526040902054156200050a57604051632e5a5c7760e01b815260040160405180910390fd5b600a54610100116200052f57604051631cbbe18560e01b815260040160405180910390fd5b600a80546001600160a01b039092166000818152600c6020526040812060019485901b905582549384018355919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a890910180546001600160a01b0319169091179055565b6001600160a01b0381168114620005ac57600080fd5b50565b600060208284031215620005c257600080fd5b8151620005cf8162000596565b9392505050565b600060208083528351808285015260005b818110156200060557858101830151858201604001528201620005e7565b8181111562000618576000604083870101525b50601f01601f1916929092016040019392505050565b60805160a05160c05160e051610100516101205161338062000711600039600081816105e1015281816126b501526127350152600081816103c7015261264e0152600081816104090152818161150801528181611553015281816117a9015281816118b901528181611aac01528181611b8401528181611c0c01528181611ca601526121060152600081816104b1015281816113e001528181611471015281816114b1015281816114e7015281816115ca01528181611b63015261232c01526000818161163b01526117790152600081816107e2015261125601526133806000f3fe608060405234801561001057600080fd5b50600436106102955760003560e01c80636e98e5e4116101675780639f5f86ae116100ce578063e46c95bc11610087578063e46c95bc1461063c578063e6dee2cc14610645578063e958b7041461064e578063f67c5bd014610661578063f9aa028a14610681578063ff6875431461069457600080fd5b80639f5f86ae146105b6578063a366f496146105c9578063c5e10eef146105dc578063ce1c455614610603578063d48bfca714610616578063e1998cf91461062957600080fd5b80638456cb59116101205780638456cb59146105425780638991b2f11461054a5780638c5c9fe11461056a5780638fe3f93f1461057d57806394cf073a1461059057806395373018146105a357600080fd5b80636e98e5e4146104995780636f307dc3146104ac57806376f54966146104d357806378327438146105065780638053fcbe14610526578063830aa7451461052f57600080fd5b806347dedfc91161020b5780635c975abb116101c45780635c975abb1461042b5780635e0b63d3146104415780635e5f2e261461044a578063621869051461045d578063654a9eda146104665780636ce4074a1461047957600080fd5b806347dedfc9146103995780634cba294a146103a25780634f0e0ef3146103c257806351e3f160146103e957806354fd4d50146103fc578063570a7af21461040457600080fd5b80632630c12f1161025d5780632630c12f146103275780632f7a18811461033a5780633192195c1461034d5780633915ffaa146103755780633f4ba83a1461037e57806346fb371d1461038657600080fd5b8063055ee9b51461029a5780630bc772da146102e05780630e30428d146102f757806311ca4fc21461030c57806320a05ff71461031f575b600080fd5b6102c36102a8366004612cb3565b6002602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6102e960035481565b6040519081526020016102d7565b61030a610305366004612cd0565b6106bd565b005b61030a61031a366004612cfc565b61073a565b600a546102e9565b6011546102c3906001600160a01b031681565b6008546102c3906001600160a01b031681565b61036061035b366004612cb3565b610793565b604080519283526020830191909152016102d7565b6102e960065481565b61030a6107cd565b61030a610394366004612d35565b6108a4565b6102e960125481565b6102e96103b0366004612cb3565b600f6020526000908152604090205481565b6102c37f000000000000000000000000000000000000000000000000000000000000000081565b61030a6103f7366004612cfc565b610c10565b6102e9600281565b6102c37f000000000000000000000000000000000000000000000000000000000000000081565b60005460ff1660405190151581526020016102d7565b6102e960055481565b6102c3610458366004612d86565b610c6d565b6102e960045481565b61030a610474366004612d9f565b610c97565b61048c610487366004612e69565b610f0a565b6040516102d79190612f66565b61030a6104a7366004612cfc565b61107b565b6102c37f000000000000000000000000000000000000000000000000000000000000000081565b6104e66104e1366004612f87565b6110d4565b6040805194855260208501939093529183015260608201526080016102d7565b6102e9610514366004612cb3565b600b6020526000908152604090205481565b6102e960075481565b61030a61053d366004612d35565b61119f565b61030a611241565b6102e9610558366004612cb3565b600e6020526000908152604090205481565b6102e9610578366004612fc4565b61130d565b6102c361058b366004613048565b6116cf565b6102e961059e36600461306d565b611957565b61030a6105b1366004612cb3565b611d9d565b61030a6105c4366004612cb3565b611df8565b61030a6105d7366004612d86565b611e6d565b6102c37f000000000000000000000000000000000000000000000000000000000000000081565b61030a6106113660046130af565b611e9d565b61030a610624366004612cb3565b611f09565b61030a610637366004612cfc565b611f3d565b6102e9600d5481565b6102e960135481565b6102c361065c366004612cb3565b611ff9565b6102e961066f366004612cb3565b600c6020526000908152604090205481565b6009546102c3906001600160a01b031681565b6102c36106a2366004612cb3565b6010602052600090815260409020546001600160a01b031681565b6009546001600160a01b031633146106e85760405163628d1ef560e01b815260040160405180910390fd5b6001600160a01b0382166000908152600c602052604090205461071e5760405163700ca0af60e01b815260040160405180910390fd5b6001600160a01b039091166000908152600b6020526040902055565b6009546001600160a01b031633146107655760405163628d1ef560e01b815260040160405180910390fd5b600880546001600160a01b039384166001600160a01b03199182161790915560118054929093169116179055565b60008060008060006107a486612037565b91965086945092509050816107b98285613111565b6107c39190613130565b9350505050915091565b604051630d4eb5db60e41b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d4eb5db090602401602060405180830381865afa158015610831573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108559190613152565b6040518060400160405280600481526020016341434c3160e01b815250906108995760405162461bcd60e51b81526004016108909190612f66565b60405180910390fd5b506108a261218e565b565b60005460ff16156108c75760405162461bcd60e51b81526004016108909061316f565b336000908152601060205260409020546001600160a01b03161580156108f857506008546001600160a01b03163314155b1561091657604051635e2a32a760e01b815260040160405180910390fd5b600260015414156109395760405162461bcd60e51b815260040161089090613199565b60026001556008546001600160a01b0316331461099f57336000908152601060205260409020546001600160a01b03848116911614158061098157506001600160a01b038316155b1561099f5760405163174b8e9d60e21b815260040160405180910390fd5b6001600160a01b0382166000908152600c60205260409020546109d55760405163700ca0af60e01b815260040160405180910390fd5b60006109e085611ff9565b604080516001600160a01b038781166024830152604480830187905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1790529151631cff79cd60e01b815292935090831691631cff79cd91610a4f918791906004016131d0565b6000604051808303816000875af1925050508015610a8f57506040513d6000823e601f3d908101601f19168201604052610a8c91908101906131f4565b60015b610c0357604080516001600160a01b038681166024830152600060448084019190915283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1790529151631cff79cd60e01b815291831691631cff79cd91610b02918791906004016131d0565b6000604051808303816000875af1158015610b21573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b4991908101906131f4565b50604080516001600160a01b038681166024830152604480830186905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1790529151631cff79cd60e01b815291831691631cff79cd91610bb6918791906004016131d0565b6000604051808303816000875af1158015610bd5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bfd91908101906131f4565b50610c05565b505b505060018055505050565b336000908152601060205260409020546001600160a01b0316158015610c4157506008546001600160a01b03163314155b15610c5f57604051635e2a32a760e01b815260040160405180910390fd5b610c698282612221565b5050565b600a8181548110610c7d57600080fd5b6000918252602090912001546001600160a01b0316905081565b336000908152601060205260409020546001600160a01b0316158015610cc857506008546001600160a01b03163314155b15610ce657604051635e2a32a760e01b815260040160405180910390fd5b610cf08584612221565b6013546001600160a01b0386166000908152600f602052604090205411610efa576040516370a0823160e01b81526001600160a01b038681166004830152600091908616906370a0823190602401602060405180830381865afa158015610d5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7f919061326b565b6040516370a0823160e01b81526001600160a01b0388811660048301529192506000918616906370a0823190602401602060405180830381865afa158015610dcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610def919061326b565b60115490915060009081906001600160a01b0316635cecbd0e610e128689613284565b8a610e1d8988613284565b6040516001600160e01b031960e086901b16815260048101939093526001600160a01b03918216602484015260448301528a1660648201526084016040805180830381865afa158015610e74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e98919061329b565b9150915060018411610eae57610eae89896122ac565b601254610ebb9083613111565b610ec761271083613111565b1115610ef5575050506001600160a01b0386166000908152600f602052604090208054600101905550610f03565b505050505b610f0385612300565b5050505050565b6060610f1860005460ff1690565b15610f355760405162461bcd60e51b81526004016108909061316f565b60026001541415610f585760405162461bcd60e51b815260040161089090613199565b6002600155336000908152601060205260409020546001600160a01b038481169116141580610f8e57506001600160a01b038316155b15610fac5760405163174b8e9d60e21b815260040160405180910390fd5b6000610fb785611ff9565b9050836001600160a01b0316856001600160a01b03167faed1eb34af6acd8c1e3911fb2ebb875a66324b03957886bd002227b17f52ab0360405160405180910390a3604051631cff79cd60e01b81526001600160a01b03821690631cff79cd9061102790879087906004016131d0565b6000604051808303816000875af1158015611046573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261106e91908101906131f4565b6001805595945050505050565b6009546001600160a01b031633146110a65760405163628d1ef560e01b815260040160405180910390fd5b6001600160a01b03918216600090815260106020526040902080546001600160a01b03191691909216179055565b60008060008061271060055487876110ec9190613284565b6110f69190613111565b6111009190613130565b61110a90866132bf565b9350861561118e5760006127106007548a6111259190613111565b61112f9190613130565b90506127106006548a6111429190613111565b61114c9190613130565b61115690866132bf565b94508481111561116d576001858203039350611171565b8094505b858110611182578585039250611188565b84860391505b50611194565b84840391505b945094509450949050565b60005460ff16156111c25760405162461bcd60e51b81526004016108909061316f565b600260015414156111e55760405162461bcd60e51b815260040161089090613199565b60026001556008546001600160a01b0316331461121557604051637dcb4dd160e01b815260040160405180910390fd5b600061122084611ff9565b905061122c8184612221565b610c056001600160a01b038416868385612596565b604051630e907b1960e21b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690633a41ec6490602401602060405180830381865afa1580156112a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c99190613152565b6040518060400160405280600481526020016341434c3160e01b815250906113045760405162461bcd60e51b81526004016108909190612f66565b506108a26125f4565b6000805460ff16156113315760405162461bcd60e51b81526004016108909061316f565b600260015414156113545760405162461bcd60e51b815260040161089090613199565b60026001556008546001600160a01b0316331461138457604051637dcb4dd160e01b815260040160405180910390fd5b600061138f89611ff9565b905060008060008060006113a286610793565b90945090506113b38c8e86846110d4565b6040516370a0823160e01b81526001600160a01b038b81166004830152939b5093985090955093506000917f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401602060405180830381865afa158015611429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144d919061326b565b905061145988876132bf565b6114649060016132bf565b8111156114a45761149f877f00000000000000000000000000000000000000000000000000000000000000008d60018c8b870303038d61264c565b6114e1565b6114e16001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168d8960018a8d0186900301612596565b61152f877f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000089600061264c565b6040516332a5417960e21b81526004810186905260248101859052604481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ca9505e490606401600060405180830381600087803b15801561159f57600080fd5b505af11580156115b3573d6000803e3d6000fd5b505050505050505060018411156115f2576115f2837f00000000000000000000000000000000000000000000000000000000000000008d87600061264c565b6001600160a01b0383166000908152600e602052604090208054871916905561161c838887612801565b6040516344dbbd9f60e11b81526001600160a01b0384811660048301527f000000000000000000000000000000000000000000000000000000000000000016906389b77b3e90602401600060405180830381600087803b15801561167f57600080fd5b505af1158015611693573d6000803e3d6000fd5b5050506001600160a01b03909b16600090815260026020526040902080546001600160a01b031916905550506001805550979650505050505050565b6000805460ff16156116f35760405162461bcd60e51b81526004016108909061316f565b600260015414156117165760405162461bcd60e51b815260040161089090613199565b60026001556008546001600160a01b0316331461174657604051637dcb4dd160e01b815260040160405180910390fd5b600354831080611757575060045483115b15611775576040516333859e6560e21b815260040160405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166321d18456857f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630fce70fb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611805573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611829919061326b565b6040516001600160e01b031960e085901b168152600481019290925260248201526044016020604051808303816000875af115801561186c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189091906132d7565b60405163bf28068b60e01b8152600481018690526001600160a01b0380831660248301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063bf28068b90604401600060405180830381600087803b1580156118ff57600080fd5b505af1158015611913573d6000803e3d6000fd5b505050506119218382612915565b6001600160a01b0381166000908152600e60209081526040808320600190819055600f9092529091205590506001805592915050565b6000805460ff161561197b5760405162461bcd60e51b81526004016108909061316f565b6002600154141561199e5760405162461bcd60e51b815260040161089090613199565b60026001556008546001600160a01b031633146119ce57604051637dcb4dd160e01b815260040160405180910390fd5b60006119d985611ff9565b905060008060006119e984612037565b92509250925085611a03576119fe8784613284565b611a0d565b611a0d87846132bf565b9450600354851080611a20575060045485115b15611a3e576040516333859e6560e21b815260040160405180910390fd5b60008615611b0f57611a508389613111565b611a5a8584613111565b611a6491906132bf565b86611a6f8585613111565b611a799190613111565b611a839190613130565b60405163bf28068b60e01b8152600481018a90526001600160a01b0387811660248301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063bf28068b90604401600060405180830381600087803b158015611af257600080fd5b505af1158015611b06573d6000803e3d6000fd5b50505050611d2b565b60008484611b1d8583613111565b611b279190613130565b611b319190613284565b9050600061271060055483611b469190613111565b611b509190613130565b9050866001600160a01b031663d1660f997f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000084868f611bb091906132bf565b611bba91906132bf565b6040518463ffffffff1660e01b8152600401611bd8939291906132f4565b600060405180830381600087803b158015611bf257600080fd5b505af1158015611c06573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ca9505e4838c611c4591906132bf565b6040516001600160e01b031960e084901b16815260048101919091526024810184905260006044820152606401600060405180830381600087803b158015611c8c57600080fd5b505af1158015611ca0573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630fce70fb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d26919061326b565b925050505b604051631612821160e01b815260048101879052602481018290526001600160a01b03861690631612821190604401600060405180830381600087803b158015611d7457600080fd5b505af1158015611d88573d6000803e3d6000fd5b50506001805550959998505050505050505050565b336000908152601060205260409020546001600160a01b0316158015611dce57506008546001600160a01b03163314155b15611dec57604051635e2a32a760e01b815260040160405180910390fd5b611df581612300565b50565b6009546001600160a01b03163314611e235760405163628d1ef560e01b815260040160405180910390fd5b600980546001600160a01b0319166001600160a01b0383169081179091556040517ff62005acebe9b616aefb5f248b48f5e89f28437b27d1eebc0b2d911209f297af90600090a250565b6009546001600160a01b03163314611e985760405163628d1ef560e01b815260040160405180910390fd5b600d55565b6009546001600160a01b03163314611ec85760405163628d1ef560e01b815260040160405180910390fd5b85871115611ee9576040516309aadd6f60e41b815260040160405180910390fd5b600396909655600494909455600592909255600655600755601255601355565b6009546001600160a01b03163314611f345760405163628d1ef560e01b815260040160405180910390fd5b611df581612990565b60005460ff1615611f605760405162461bcd60e51b81526004016108909061316f565b60026001541415611f835760405162461bcd60e51b815260040161089090613199565b60026001556008546001600160a01b03163314611fb357604051637dcb4dd160e01b815260040160405180910390fd5b6000611fbe83611ff9565b6001600160a01b038416600090815260026020526040902080546001600160a01b03191690559050611ff08282612915565b50506001805550565b6001600160a01b0380821660009081526002602052604090205416806120325760405163b5ba4c4d60e01b815260040160405180910390fd5b919050565b6000806000836001600160a01b0316631afbb7a46040518163ffffffff1660e01b8152600401602060405180830381865afa15801561207a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061209e919061326b565b9250836001600160a01b03166317d11a156040518163ffffffff1660e01b8152600401602060405180830381865afa1580156120de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612102919061326b565b91507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630fce70fb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612162573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612186919061326b565b929491935050565b60005460ff166121d75760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610890565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b0381166000908152600c602052604090205480158061224b5750600081600d5416115b156122695760405163700ca0af60e01b815260040160405180910390fd5b6001600160a01b0383166000908152600e602052604090205481166122a7576001600160a01b0383166000908152600e602052604090208054821790555b505050565b6001600160a01b038082166000908152600c60209081526040808320549386168352600e9091529020548116156122a7576001600160a01b0383166000908152600e60205260409020805482189055505050565b600061230b82610793565b601154604051630f9a650360e41b8152600481018390526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116602483015292945060009350612710929091169063f9a6503090604401602060405180830381865afa158015612387573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ab919061326b565b6123b59190613111565b6001600160a01b0384166000908152600e6020526040812054600a549293509091829190825b8181101561254f576001811b935082841615612547576000600a828154811061240657612406613318565b60009182526020822001546040516370a0823160e01b81526001600160a01b038c81166004830152909116925082906370a0823190602401602060405180830381865afa15801561245b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061247f919061326b565b9050600181111561252c576001600160a01b038281166000818152600b602052604090819020546011549151630f9a650360e41b815260048101869052602481019390935292169063f9a6503090604401602060405180830381865afa1580156124ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612511919061326b565b61251b9190613111565b61252590886132bf565b9650612536565b6125368a836122ac565b87871061254457505061254f565b50505b6001016123db565b5084841015612571576040516329973ddb60e11b815260040160405180910390fd5b5050506001600160a01b039093166000908152600f6020526040902060019055505050565b6125ee846323b872dd60e01b8585856040516024016125b7939291906132f4565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612a52565b50505050565b60005460ff16156126175760405162461bcd60e51b81526004016108909061316f565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586122043390565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b031614801561268a5750805b156127985760405163d1660f9960e01b81526001600160a01b0386169063d1660f99906126df9087907f00000000000000000000000000000000000000000000000000000000000000009087906004016132f4565b600060405180830381600087803b1580156126f957600080fd5b505af115801561270d573d6000803e3d6000fd5b5050604051630b0d3b7560e31b81526001600160a01b038681166004830152602482018690527f0000000000000000000000000000000000000000000000000000000000000000169250635869dba89150604401600060405180830381600087803b15801561277b57600080fd5b505af115801561278f573d6000803e3d6000fd5b50505050610f03565b60405163d1660f9960e01b81526001600160a01b0386169063d1660f99906127c8908790879087906004016132f4565b600060405180830381600087803b1580156127e257600080fd5b505af11580156127f6573d6000803e3d6000fd5b505050505050505050565b6001600160a01b038084166000908152600e60205260408120549091841661283c57604051635919af9760e11b815260040160405180910390fd5b600a5460015b8181101561290c576001811b935082841615612904576000600a828154811061286d5761286d613318565b60009182526020822001546040516370a0823160e01b81526001600160a01b038b81166004830152909116925082906370a0823190602401602060405180830381865afa1580156128c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128e6919061326b565b905060028111156129015761290189838a600185038b61264c565b50505b600101612842565b50505050505050565b6001600160a01b038216158061294457506001600160a01b038281166000908152600260205260409020541615155b1561296257604051634f2cb04f60e11b815260040160405180910390fd5b6001600160a01b03918216600090815260026020526040902080546001600160a01b03191691909216179055565b6001600160a01b0381166000908152600c6020526040902054156129c757604051632e5a5c7760e01b815260040160405180910390fd5b600a54610100116129eb57604051631cbbe18560e01b815260040160405180910390fd5b600a80546001600160a01b039092166000818152600c6020526040812060019485901b905582549384018355919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a890910180546001600160a01b0319169091179055565b6000612aa7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612b249092919063ffffffff16565b8051909150156122a75780806020019051810190612ac59190613152565b6122a75760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610890565b6060612b338484600085612b3d565b90505b9392505050565b606082471015612b9e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610890565b843b612bec5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610890565b600080866001600160a01b03168587604051612c08919061332e565b60006040518083038185875af1925050503d8060008114612c45576040519150601f19603f3d011682016040523d82523d6000602084013e612c4a565b606091505b5091509150612c5a828286612c65565b979650505050505050565b60608315612c74575081612b36565b825115612c845782518084602001fd5b8160405162461bcd60e51b81526004016108909190612f66565b6001600160a01b0381168114611df557600080fd5b600060208284031215612cc557600080fd5b8135612b3681612c9e565b60008060408385031215612ce357600080fd5b8235612cee81612c9e565b946020939093013593505050565b60008060408385031215612d0f57600080fd5b8235612d1a81612c9e565b91506020830135612d2a81612c9e565b809150509250929050565b60008060008060808587031215612d4b57600080fd5b8435612d5681612c9e565b93506020850135612d6681612c9e565b92506040850135612d7681612c9e565b9396929550929360600135925050565b600060208284031215612d9857600080fd5b5035919050565b600080600080600060a08688031215612db757600080fd5b8535612dc281612c9e565b94506020860135612dd281612c9e565b93506040860135612de281612c9e565b94979396509394606081013594506080013592915050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612e3957612e39612dfa565b604052919050565b600067ffffffffffffffff821115612e5b57612e5b612dfa565b50601f01601f191660200190565b600080600060608486031215612e7e57600080fd5b8335612e8981612c9e565b92506020840135612e9981612c9e565b9150604084013567ffffffffffffffff811115612eb557600080fd5b8401601f81018613612ec657600080fd5b8035612ed9612ed482612e41565b612e10565b818152876020838501011115612eee57600080fd5b816020840160208301376000602083830101528093505050509250925092565b60005b83811015612f29578181015183820152602001612f11565b838111156125ee5750506000910152565b60008151808452612f52816020860160208601612f0e565b601f01601f19169290920160200192915050565b602081526000612b366020830184612f3a565b8015158114611df557600080fd5b60008060008060808587031215612f9d57600080fd5b843593506020850135612faf81612f79565b93969395505050506040820135916060013590565b600080600080600080600060e0888a031215612fdf57600080fd5b8735612fea81612c9e565b96506020880135612ffa81612f79565b955060408801359450606088013561301181612c9e565b9350608088013561302181612c9e565b925060a0880135915060c088013561303881612f79565b8091505092959891949750929550565b6000806040838503121561305b57600080fd5b823591506020830135612d2a81612c9e565b60008060006060848603121561308257600080fd5b833561308d81612c9e565b92506020840135915060408401356130a481612f79565b809150509250925092565b600080600080600080600060e0888a0312156130ca57600080fd5b505085359760208701359750604087013596606081013596506080810135955060a0810135945060c0013592509050565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561312b5761312b6130fb565b500290565b60008261314d57634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561316457600080fd5b8151612b3681612f79565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6001600160a01b0383168152604060208201819052600090612b3390830184612f3a565b60006020828403121561320657600080fd5b815167ffffffffffffffff81111561321d57600080fd5b8201601f8101841361322e57600080fd5b805161323c612ed482612e41565b81815285602083850101111561325157600080fd5b613262826020830160208601612f0e565b95945050505050565b60006020828403121561327d57600080fd5b5051919050565b600082821015613296576132966130fb565b500390565b600080604083850312156132ae57600080fd5b505080516020909101519092909150565b600082198211156132d2576132d26130fb565b500190565b6000602082840312156132e957600080fd5b8151612b3681612c9e565b6001600160a01b039384168152919092166020820152604081019190915260600190565b634e487b7160e01b600052603260045260246000fd5b60008251613340818460208701612f0e565b919091019291505056fea2646970667358221220cfeed16a467a0d8da8151bdd9ebce6daf197fd8c6b30b958899536b799610e9464736f6c634300080a0033" . parse () . expect ("invalid bytecode")
        });
    #[derive(Clone)]
    pub struct CreditManager<M>(ethers::contract::Contract<M>);
    impl<M> std::ops::Deref for CreditManager<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for CreditManager<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(CreditManager))
                .field(&self.address())
                .finish()
        }
    }
    impl<'a, M: ethers::providers::Middleware> CreditManager<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), CREDITMANAGER_ABI.clone(), client)
                .into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                CREDITMANAGER_ABI.clone(),
                CREDITMANAGER_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `adapterToContract` (0xff687543) function"]
        pub fn adapter_to_contract(
            &self,
            p0: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([255, 104, 117, 67], p0)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `addCollateral` (0x830aa745) function"]
        pub fn add_collateral(
            &self,
            payer: ethers::core::types::Address,
            on_behalf_of: ethers::core::types::Address,
            token: ethers::core::types::Address,
            amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([131, 10, 167, 69], (payer, on_behalf_of, token, amount))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `addToken` (0xd48bfca7) function"]
        pub fn add_token(
            &self,
            token: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([212, 139, 252, 167], token)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `allowedTokens` (0x5e5f2e26) function"]
        pub fn allowed_tokens(
            &self,
            p0: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([94, 95, 46, 38], p0)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `allowedTokensCount` (0x20a05ff7) function"]
        pub fn allowed_tokens_count(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([32, 160, 95, 247], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `approveCreditAccount` (0x46fb371d) function"]
        pub fn approve_credit_account(
            &self,
            borrower: ethers::core::types::Address,
            target_contract: ethers::core::types::Address,
            token: ethers::core::types::Address,
            amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [70, 251, 55, 29],
                    (borrower, target_contract, token, amount),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `calcClosePayments` (0x76f54966) function"]
        pub fn calc_close_payments(
            &self,
            total_value: ethers::core::types::U256,
            is_liquidated: bool,
            borrowed_amount: ethers::core::types::U256,
            borrowed_amount_with_interest: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<
            M,
            (
                ethers::core::types::U256,
                ethers::core::types::U256,
                ethers::core::types::U256,
                ethers::core::types::U256,
            ),
        > {
            self.0
                .method_hash(
                    [118, 245, 73, 102],
                    (
                        total_value,
                        is_liquidated,
                        borrowed_amount,
                        borrowed_amount_with_interest,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `calcCreditAccountAccruedInterest` (0x3192195c) function"]
        pub fn calc_credit_account_accrued_interest(
            &self,
            credit_account: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<
            M,
            (ethers::core::types::U256, ethers::core::types::U256),
        > {
            self.0
                .method_hash([49, 146, 25, 92], credit_account)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `changeContractAllowance` (0x6e98e5e4) function"]
        pub fn change_contract_allowance(
            &self,
            adapter: ethers::core::types::Address,
            target_contract: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([110, 152, 229, 228], (adapter, target_contract))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `checkAndEnableToken` (0x51e3f160) function"]
        pub fn check_and_enable_token(
            &self,
            credit_account: ethers::core::types::Address,
            token_out: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([81, 227, 241, 96], (credit_account, token_out))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `chiThreshold` (0x47dedfc9) function"]
        pub fn chi_threshold(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([71, 222, 223, 201], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `closeCreditAccount` (0x8c5c9fe1) function"]
        pub fn close_credit_account(
            &self,
            borrower: ethers::core::types::Address,
            is_liquidated: bool,
            total_value: ethers::core::types::U256,
            payer: ethers::core::types::Address,
            to: ethers::core::types::Address,
            skip_token_mask: ethers::core::types::U256,
            convert_weth: bool,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash(
                    [140, 92, 159, 225],
                    (
                        borrower,
                        is_liquidated,
                        total_value,
                        payer,
                        to,
                        skip_token_mask,
                        convert_weth,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `creditAccounts` (0x055ee9b5) function"]
        pub fn credit_accounts(
            &self,
            p0: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([5, 94, 233, 181], p0)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `creditConfigurator` (0xf9aa028a) function"]
        pub fn credit_configurator(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([249, 170, 2, 138], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `creditFacade` (0x2f7a1881) function"]
        pub fn credit_facade(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([47, 122, 24, 129], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `enabledTokensMap` (0x8991b2f1) function"]
        pub fn enabled_tokens_map(
            &self,
            p0: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([137, 145, 178, 241], p0)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `executeOrder` (0x6ce4074a) function"]
        pub fn execute_order(
            &self,
            borrower: ethers::core::types::Address,
            target_contract: ethers::core::types::Address,
            data: ethers::core::types::Bytes,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Bytes> {
            self.0
                .method_hash([108, 228, 7, 74], (borrower, target_contract, data))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `fastCheckCounter` (0x4cba294a) function"]
        pub fn fast_check_counter(
            &self,
            p0: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([76, 186, 41, 74], p0)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `fastCollateralCheck` (0x654a9eda) function"]
        pub fn fast_collateral_check(
            &self,
            credit_account: ethers::core::types::Address,
            token_in: ethers::core::types::Address,
            token_out: ethers::core::types::Address,
            balance_in_before: ethers::core::types::U256,
            balance_out_before: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [101, 74, 158, 218],
                    (
                        credit_account,
                        token_in,
                        token_out,
                        balance_in_before,
                        balance_out_before,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `feeInterest` (0x5e0b63d3) function"]
        pub fn fee_interest(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([94, 11, 99, 211], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `feeLiquidation` (0x3915ffaa) function"]
        pub fn fee_liquidation(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([57, 21, 255, 170], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `forbidenTokenMask` (0xe46c95bc) function"]
        pub fn forbiden_token_mask(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([228, 108, 149, 188], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `fullCollateralCheck` (0x95373018) function"]
        pub fn full_collateral_check(
            &self,
            credit_account: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([149, 55, 48, 24], credit_account)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getCreditAccountOrRevert` (0xe958b704) function"]
        pub fn get_credit_account_or_revert(
            &self,
            borrower: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([233, 88, 183, 4], borrower)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hfCheckInterval` (0xe6dee2cc) function"]
        pub fn hf_check_interval(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([230, 222, 226, 204], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `liquidationDiscount` (0x8053fcbe) function"]
        pub fn liquidation_discount(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([128, 83, 252, 190], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `liquidationThresholds` (0x78327438) function"]
        pub fn liquidation_thresholds(
            &self,
            p0: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([120, 50, 116, 56], p0)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `manageDebt` (0x94cf073a) function"]
        pub fn manage_debt(
            &self,
            borrower: ethers::core::types::Address,
            amount: ethers::core::types::U256,
            increase: bool,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([148, 207, 7, 58], (borrower, amount, increase))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `maxBorrowedAmount` (0x62186905) function"]
        pub fn max_borrowed_amount(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([98, 24, 105, 5], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `minBorrowedAmount` (0x0bc772da) function"]
        pub fn min_borrowed_amount(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([11, 199, 114, 218], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `openCreditAccount` (0x8fe3f93f) function"]
        pub fn open_credit_account(
            &self,
            borrowed_amount: ethers::core::types::U256,
            on_behalf_of: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([143, 227, 249, 63], (borrowed_amount, on_behalf_of))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `pause` (0x8456cb59) function"]
        pub fn pause(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([132, 86, 203, 89], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `paused` (0x5c975abb) function"]
        pub fn paused(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([92, 151, 90, 187], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `poolService` (0x570a7af2) function"]
        pub fn pool_service(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([87, 10, 122, 242], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `priceOracle` (0x2630c12f) function"]
        pub fn price_oracle(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([38, 48, 193, 47], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setConfigurator` (0x9f5f86ae) function"]
        pub fn set_configurator(
            &self,
            credit_configurator: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([159, 95, 134, 174], credit_configurator)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setForbidMask` (0xa366f496) function"]
        pub fn set_forbid_mask(
            &self,
            forbid_mask: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([163, 102, 244, 150], forbid_mask)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setLiquidationThreshold` (0x0e30428d) function"]
        pub fn set_liquidation_threshold(
            &self,
            token: ethers::core::types::Address,
            liquidation_threshold: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([14, 48, 66, 141], (token, liquidation_threshold))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setParams` (0xce1c4556) function"]
        pub fn set_params(
            &self,
            min_borrowed_amount: ethers::core::types::U256,
            max_borrowed_amount: ethers::core::types::U256,
            fee_interest: ethers::core::types::U256,
            fee_liquidation: ethers::core::types::U256,
            liquidation_discount: ethers::core::types::U256,
            chi_threshold: ethers::core::types::U256,
            hf_check_interval: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [206, 28, 69, 86],
                    (
                        min_borrowed_amount,
                        max_borrowed_amount,
                        fee_interest,
                        fee_liquidation,
                        liquidation_discount,
                        chi_threshold,
                        hf_check_interval,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `tokenMasksMap` (0xf67c5bd0) function"]
        pub fn token_masks_map(
            &self,
            p0: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([246, 124, 91, 208], p0)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `transferAccountOwnership` (0xe1998cf9) function"]
        pub fn transfer_account_ownership(
            &self,
            from: ethers::core::types::Address,
            to: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([225, 153, 140, 249], (from, to))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `underlying` (0x6f307dc3) function"]
        pub fn underlying(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([111, 48, 125, 195], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `unpause` (0x3f4ba83a) function"]
        pub fn unpause(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([63, 75, 168, 58], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `upgradeContracts` (0x11ca4fc2) function"]
        pub fn upgrade_contracts(
            &self,
            credit_facade: ethers::core::types::Address,
            price_oracle: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([17, 202, 79, 194], (credit_facade, price_oracle))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `version` (0x54fd4d50) function"]
        pub fn version(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([84, 253, 77, 80], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `wethAddress` (0x4f0e0ef3) function"]
        pub fn weth_address(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([79, 14, 14, 243], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `wethGateway` (0xc5e10eef) function"]
        pub fn weth_gateway(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([197, 225, 14, 239], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `ExecuteOrder` event"]
        pub fn execute_order_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, ExecuteOrderFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `NewConfigurator` event"]
        pub fn new_configurator_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, NewConfiguratorFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `Paused` event"]
        pub fn paused_filter(&self) -> ethers::contract::builders::Event<M, PausedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `Unpaused` event"]
        pub fn unpaused_filter(&self) -> ethers::contract::builders::Event<M, UnpausedFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, CreditManagerEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for CreditManager<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "ExecuteOrder", abi = "ExecuteOrder(address,address)")]
    pub struct ExecuteOrderFilter {
        #[ethevent(indexed)]
        pub borrower: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub target: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "NewConfigurator", abi = "NewConfigurator(address)")]
    pub struct NewConfiguratorFilter {
        #[ethevent(indexed)]
        pub new_configurator: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "Paused", abi = "Paused(address)")]
    pub struct PausedFilter {
        pub account: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "Unpaused", abi = "Unpaused(address)")]
    pub struct UnpausedFilter {
        pub account: ethers::core::types::Address,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum CreditManagerEvents {
        ExecuteOrderFilter(ExecuteOrderFilter),
        NewConfiguratorFilter(NewConfiguratorFilter),
        PausedFilter(PausedFilter),
        UnpausedFilter(UnpausedFilter),
    }
    impl ethers::contract::EthLogDecode for CreditManagerEvents {
        fn decode_log(log: &ethers::core::abi::RawLog) -> Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = ExecuteOrderFilter::decode_log(log) {
                return Ok(CreditManagerEvents::ExecuteOrderFilter(decoded));
            }
            if let Ok(decoded) = NewConfiguratorFilter::decode_log(log) {
                return Ok(CreditManagerEvents::NewConfiguratorFilter(decoded));
            }
            if let Ok(decoded) = PausedFilter::decode_log(log) {
                return Ok(CreditManagerEvents::PausedFilter(decoded));
            }
            if let Ok(decoded) = UnpausedFilter::decode_log(log) {
                return Ok(CreditManagerEvents::UnpausedFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for CreditManagerEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                CreditManagerEvents::ExecuteOrderFilter(element) => element.fmt(f),
                CreditManagerEvents::NewConfiguratorFilter(element) => element.fmt(f),
                CreditManagerEvents::PausedFilter(element) => element.fmt(f),
                CreditManagerEvents::UnpausedFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `adapterToContract`function with signature `adapterToContract(address)` and selector `[255, 104, 117, 67]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "adapterToContract", abi = "adapterToContract(address)")]
    pub struct AdapterToContractCall(pub ethers::core::types::Address);
    #[doc = "Container type for all input parameters for the `addCollateral`function with signature `addCollateral(address,address,address,uint256)` and selector `[131, 10, 167, 69]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "addCollateral",
        abi = "addCollateral(address,address,address,uint256)"
    )]
    pub struct AddCollateralCall {
        pub payer: ethers::core::types::Address,
        pub on_behalf_of: ethers::core::types::Address,
        pub token: ethers::core::types::Address,
        pub amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `addToken`function with signature `addToken(address)` and selector `[212, 139, 252, 167]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "addToken", abi = "addToken(address)")]
    pub struct AddTokenCall {
        pub token: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `allowedTokens`function with signature `allowedTokens(uint256)` and selector `[94, 95, 46, 38]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "allowedTokens", abi = "allowedTokens(uint256)")]
    pub struct AllowedTokensCall(pub ethers::core::types::U256);
    #[doc = "Container type for all input parameters for the `allowedTokensCount`function with signature `allowedTokensCount()` and selector `[32, 160, 95, 247]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "allowedTokensCount", abi = "allowedTokensCount()")]
    pub struct AllowedTokensCountCall;
    #[doc = "Container type for all input parameters for the `approveCreditAccount`function with signature `approveCreditAccount(address,address,address,uint256)` and selector `[70, 251, 55, 29]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "approveCreditAccount",
        abi = "approveCreditAccount(address,address,address,uint256)"
    )]
    pub struct ApproveCreditAccountCall {
        pub borrower: ethers::core::types::Address,
        pub target_contract: ethers::core::types::Address,
        pub token: ethers::core::types::Address,
        pub amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `calcClosePayments`function with signature `calcClosePayments(uint256,bool,uint256,uint256)` and selector `[118, 245, 73, 102]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "calcClosePayments",
        abi = "calcClosePayments(uint256,bool,uint256,uint256)"
    )]
    pub struct CalcClosePaymentsCall {
        pub total_value: ethers::core::types::U256,
        pub is_liquidated: bool,
        pub borrowed_amount: ethers::core::types::U256,
        pub borrowed_amount_with_interest: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `calcCreditAccountAccruedInterest`function with signature `calcCreditAccountAccruedInterest(address)` and selector `[49, 146, 25, 92]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "calcCreditAccountAccruedInterest",
        abi = "calcCreditAccountAccruedInterest(address)"
    )]
    pub struct CalcCreditAccountAccruedInterestCall {
        pub credit_account: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `changeContractAllowance`function with signature `changeContractAllowance(address,address)` and selector `[110, 152, 229, 228]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "changeContractAllowance",
        abi = "changeContractAllowance(address,address)"
    )]
    pub struct ChangeContractAllowanceCall {
        pub adapter: ethers::core::types::Address,
        pub target_contract: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `checkAndEnableToken`function with signature `checkAndEnableToken(address,address)` and selector `[81, 227, 241, 96]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "checkAndEnableToken",
        abi = "checkAndEnableToken(address,address)"
    )]
    pub struct CheckAndEnableTokenCall {
        pub credit_account: ethers::core::types::Address,
        pub token_out: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `chiThreshold`function with signature `chiThreshold()` and selector `[71, 222, 223, 201]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "chiThreshold", abi = "chiThreshold()")]
    pub struct ChiThresholdCall;
    #[doc = "Container type for all input parameters for the `closeCreditAccount`function with signature `closeCreditAccount(address,bool,uint256,address,address,uint256,bool)` and selector `[140, 92, 159, 225]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "closeCreditAccount",
        abi = "closeCreditAccount(address,bool,uint256,address,address,uint256,bool)"
    )]
    pub struct CloseCreditAccountCall {
        pub borrower: ethers::core::types::Address,
        pub is_liquidated: bool,
        pub total_value: ethers::core::types::U256,
        pub payer: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub skip_token_mask: ethers::core::types::U256,
        pub convert_weth: bool,
    }
    #[doc = "Container type for all input parameters for the `creditAccounts`function with signature `creditAccounts(address)` and selector `[5, 94, 233, 181]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "creditAccounts", abi = "creditAccounts(address)")]
    pub struct CreditAccountsCall(pub ethers::core::types::Address);
    #[doc = "Container type for all input parameters for the `creditConfigurator`function with signature `creditConfigurator()` and selector `[249, 170, 2, 138]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "creditConfigurator", abi = "creditConfigurator()")]
    pub struct CreditConfiguratorCall;
    #[doc = "Container type for all input parameters for the `creditFacade`function with signature `creditFacade()` and selector `[47, 122, 24, 129]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "creditFacade", abi = "creditFacade()")]
    pub struct CreditFacadeCall;
    #[doc = "Container type for all input parameters for the `enabledTokensMap`function with signature `enabledTokensMap(address)` and selector `[137, 145, 178, 241]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "enabledTokensMap", abi = "enabledTokensMap(address)")]
    pub struct EnabledTokensMapCall(pub ethers::core::types::Address);
    #[doc = "Container type for all input parameters for the `executeOrder`function with signature `executeOrder(address,address,bytes)` and selector `[108, 228, 7, 74]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "executeOrder", abi = "executeOrder(address,address,bytes)")]
    pub struct ExecuteOrderCall {
        pub borrower: ethers::core::types::Address,
        pub target_contract: ethers::core::types::Address,
        pub data: ethers::core::types::Bytes,
    }
    #[doc = "Container type for all input parameters for the `fastCheckCounter`function with signature `fastCheckCounter(address)` and selector `[76, 186, 41, 74]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "fastCheckCounter", abi = "fastCheckCounter(address)")]
    pub struct FastCheckCounterCall(pub ethers::core::types::Address);
    #[doc = "Container type for all input parameters for the `fastCollateralCheck`function with signature `fastCollateralCheck(address,address,address,uint256,uint256)` and selector `[101, 74, 158, 218]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "fastCollateralCheck",
        abi = "fastCollateralCheck(address,address,address,uint256,uint256)"
    )]
    pub struct FastCollateralCheckCall {
        pub credit_account: ethers::core::types::Address,
        pub token_in: ethers::core::types::Address,
        pub token_out: ethers::core::types::Address,
        pub balance_in_before: ethers::core::types::U256,
        pub balance_out_before: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `feeInterest`function with signature `feeInterest()` and selector `[94, 11, 99, 211]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "feeInterest", abi = "feeInterest()")]
    pub struct FeeInterestCall;
    #[doc = "Container type for all input parameters for the `feeLiquidation`function with signature `feeLiquidation()` and selector `[57, 21, 255, 170]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "feeLiquidation", abi = "feeLiquidation()")]
    pub struct FeeLiquidationCall;
    #[doc = "Container type for all input parameters for the `forbidenTokenMask`function with signature `forbidenTokenMask()` and selector `[228, 108, 149, 188]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "forbidenTokenMask", abi = "forbidenTokenMask()")]
    pub struct ForbidenTokenMaskCall;
    #[doc = "Container type for all input parameters for the `fullCollateralCheck`function with signature `fullCollateralCheck(address)` and selector `[149, 55, 48, 24]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "fullCollateralCheck", abi = "fullCollateralCheck(address)")]
    pub struct FullCollateralCheckCall {
        pub credit_account: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `getCreditAccountOrRevert`function with signature `getCreditAccountOrRevert(address)` and selector `[233, 88, 183, 4]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "getCreditAccountOrRevert",
        abi = "getCreditAccountOrRevert(address)"
    )]
    pub struct GetCreditAccountOrRevertCall {
        pub borrower: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `hfCheckInterval`function with signature `hfCheckInterval()` and selector `[230, 222, 226, 204]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hfCheckInterval", abi = "hfCheckInterval()")]
    pub struct HfCheckIntervalCall;
    #[doc = "Container type for all input parameters for the `liquidationDiscount`function with signature `liquidationDiscount()` and selector `[128, 83, 252, 190]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "liquidationDiscount", abi = "liquidationDiscount()")]
    pub struct LiquidationDiscountCall;
    #[doc = "Container type for all input parameters for the `liquidationThresholds`function with signature `liquidationThresholds(address)` and selector `[120, 50, 116, 56]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "liquidationThresholds", abi = "liquidationThresholds(address)")]
    pub struct LiquidationThresholdsCall(pub ethers::core::types::Address);
    #[doc = "Container type for all input parameters for the `manageDebt`function with signature `manageDebt(address,uint256,bool)` and selector `[148, 207, 7, 58]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "manageDebt", abi = "manageDebt(address,uint256,bool)")]
    pub struct ManageDebtCall {
        pub borrower: ethers::core::types::Address,
        pub amount: ethers::core::types::U256,
        pub increase: bool,
    }
    #[doc = "Container type for all input parameters for the `maxBorrowedAmount`function with signature `maxBorrowedAmount()` and selector `[98, 24, 105, 5]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "maxBorrowedAmount", abi = "maxBorrowedAmount()")]
    pub struct MaxBorrowedAmountCall;
    #[doc = "Container type for all input parameters for the `minBorrowedAmount`function with signature `minBorrowedAmount()` and selector `[11, 199, 114, 218]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "minBorrowedAmount", abi = "minBorrowedAmount()")]
    pub struct MinBorrowedAmountCall;
    #[doc = "Container type for all input parameters for the `openCreditAccount`function with signature `openCreditAccount(uint256,address)` and selector `[143, 227, 249, 63]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "openCreditAccount", abi = "openCreditAccount(uint256,address)")]
    pub struct OpenCreditAccountCall {
        pub borrowed_amount: ethers::core::types::U256,
        pub on_behalf_of: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `pause`function with signature `pause()` and selector `[132, 86, 203, 89]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "pause", abi = "pause()")]
    pub struct PauseCall;
    #[doc = "Container type for all input parameters for the `paused`function with signature `paused()` and selector `[92, 151, 90, 187]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "paused", abi = "paused()")]
    pub struct PausedCall;
    #[doc = "Container type for all input parameters for the `poolService`function with signature `poolService()` and selector `[87, 10, 122, 242]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "poolService", abi = "poolService()")]
    pub struct PoolServiceCall;
    #[doc = "Container type for all input parameters for the `priceOracle`function with signature `priceOracle()` and selector `[38, 48, 193, 47]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "priceOracle", abi = "priceOracle()")]
    pub struct PriceOracleCall;
    #[doc = "Container type for all input parameters for the `setConfigurator`function with signature `setConfigurator(address)` and selector `[159, 95, 134, 174]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "setConfigurator", abi = "setConfigurator(address)")]
    pub struct SetConfiguratorCall {
        pub credit_configurator: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `setForbidMask`function with signature `setForbidMask(uint256)` and selector `[163, 102, 244, 150]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "setForbidMask", abi = "setForbidMask(uint256)")]
    pub struct SetForbidMaskCall {
        pub forbid_mask: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `setLiquidationThreshold`function with signature `setLiquidationThreshold(address,uint256)` and selector `[14, 48, 66, 141]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "setLiquidationThreshold",
        abi = "setLiquidationThreshold(address,uint256)"
    )]
    pub struct SetLiquidationThresholdCall {
        pub token: ethers::core::types::Address,
        pub liquidation_threshold: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `setParams`function with signature `setParams(uint256,uint256,uint256,uint256,uint256,uint256,uint256)` and selector `[206, 28, 69, 86]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "setParams",
        abi = "setParams(uint256,uint256,uint256,uint256,uint256,uint256,uint256)"
    )]
    pub struct SetParamsCall {
        pub min_borrowed_amount: ethers::core::types::U256,
        pub max_borrowed_amount: ethers::core::types::U256,
        pub fee_interest: ethers::core::types::U256,
        pub fee_liquidation: ethers::core::types::U256,
        pub liquidation_discount: ethers::core::types::U256,
        pub chi_threshold: ethers::core::types::U256,
        pub hf_check_interval: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `tokenMasksMap`function with signature `tokenMasksMap(address)` and selector `[246, 124, 91, 208]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "tokenMasksMap", abi = "tokenMasksMap(address)")]
    pub struct TokenMasksMapCall(pub ethers::core::types::Address);
    #[doc = "Container type for all input parameters for the `transferAccountOwnership`function with signature `transferAccountOwnership(address,address)` and selector `[225, 153, 140, 249]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "transferAccountOwnership",
        abi = "transferAccountOwnership(address,address)"
    )]
    pub struct TransferAccountOwnershipCall {
        pub from: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `underlying`function with signature `underlying()` and selector `[111, 48, 125, 195]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "underlying", abi = "underlying()")]
    pub struct UnderlyingCall;
    #[doc = "Container type for all input parameters for the `unpause`function with signature `unpause()` and selector `[63, 75, 168, 58]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "unpause", abi = "unpause()")]
    pub struct UnpauseCall;
    #[doc = "Container type for all input parameters for the `upgradeContracts`function with signature `upgradeContracts(address,address)` and selector `[17, 202, 79, 194]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "upgradeContracts", abi = "upgradeContracts(address,address)")]
    pub struct UpgradeContractsCall {
        pub credit_facade: ethers::core::types::Address,
        pub price_oracle: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `version`function with signature `version()` and selector `[84, 253, 77, 80]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "version", abi = "version()")]
    pub struct VersionCall;
    #[doc = "Container type for all input parameters for the `wethAddress`function with signature `wethAddress()` and selector `[79, 14, 14, 243]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "wethAddress", abi = "wethAddress()")]
    pub struct WethAddressCall;
    #[doc = "Container type for all input parameters for the `wethGateway`function with signature `wethGateway()` and selector `[197, 225, 14, 239]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "wethGateway", abi = "wethGateway()")]
    pub struct WethGatewayCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum CreditManagerCalls {
        AdapterToContract(AdapterToContractCall),
        AddCollateral(AddCollateralCall),
        AddToken(AddTokenCall),
        AllowedTokens(AllowedTokensCall),
        AllowedTokensCount(AllowedTokensCountCall),
        ApproveCreditAccount(ApproveCreditAccountCall),
        CalcClosePayments(CalcClosePaymentsCall),
        CalcCreditAccountAccruedInterest(CalcCreditAccountAccruedInterestCall),
        ChangeContractAllowance(ChangeContractAllowanceCall),
        CheckAndEnableToken(CheckAndEnableTokenCall),
        ChiThreshold(ChiThresholdCall),
        CloseCreditAccount(CloseCreditAccountCall),
        CreditAccounts(CreditAccountsCall),
        CreditConfigurator(CreditConfiguratorCall),
        CreditFacade(CreditFacadeCall),
        EnabledTokensMap(EnabledTokensMapCall),
        ExecuteOrder(ExecuteOrderCall),
        FastCheckCounter(FastCheckCounterCall),
        FastCollateralCheck(FastCollateralCheckCall),
        FeeInterest(FeeInterestCall),
        FeeLiquidation(FeeLiquidationCall),
        ForbidenTokenMask(ForbidenTokenMaskCall),
        FullCollateralCheck(FullCollateralCheckCall),
        GetCreditAccountOrRevert(GetCreditAccountOrRevertCall),
        HfCheckInterval(HfCheckIntervalCall),
        LiquidationDiscount(LiquidationDiscountCall),
        LiquidationThresholds(LiquidationThresholdsCall),
        ManageDebt(ManageDebtCall),
        MaxBorrowedAmount(MaxBorrowedAmountCall),
        MinBorrowedAmount(MinBorrowedAmountCall),
        OpenCreditAccount(OpenCreditAccountCall),
        Pause(PauseCall),
        Paused(PausedCall),
        PoolService(PoolServiceCall),
        PriceOracle(PriceOracleCall),
        SetConfigurator(SetConfiguratorCall),
        SetForbidMask(SetForbidMaskCall),
        SetLiquidationThreshold(SetLiquidationThresholdCall),
        SetParams(SetParamsCall),
        TokenMasksMap(TokenMasksMapCall),
        TransferAccountOwnership(TransferAccountOwnershipCall),
        Underlying(UnderlyingCall),
        Unpause(UnpauseCall),
        UpgradeContracts(UpgradeContractsCall),
        Version(VersionCall),
        WethAddress(WethAddressCall),
        WethGateway(WethGatewayCall),
    }
    impl ethers::core::abi::AbiDecode for CreditManagerCalls {
        fn decode(data: impl AsRef<[u8]>) -> Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <AdapterToContractCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::AdapterToContract(decoded));
            }
            if let Ok(decoded) =
                <AddCollateralCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::AddCollateral(decoded));
            }
            if let Ok(decoded) =
                <AddTokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::AddToken(decoded));
            }
            if let Ok(decoded) =
                <AllowedTokensCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::AllowedTokens(decoded));
            }
            if let Ok(decoded) =
                <AllowedTokensCountCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::AllowedTokensCount(decoded));
            }
            if let Ok(decoded) =
                <ApproveCreditAccountCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::ApproveCreditAccount(decoded));
            }
            if let Ok(decoded) =
                <CalcClosePaymentsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::CalcClosePayments(decoded));
            }
            if let Ok(decoded) =
                <CalcCreditAccountAccruedInterestCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CreditManagerCalls::CalcCreditAccountAccruedInterest(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <ChangeContractAllowanceCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::ChangeContractAllowance(decoded));
            }
            if let Ok(decoded) =
                <CheckAndEnableTokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::CheckAndEnableToken(decoded));
            }
            if let Ok(decoded) =
                <ChiThresholdCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::ChiThreshold(decoded));
            }
            if let Ok(decoded) =
                <CloseCreditAccountCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::CloseCreditAccount(decoded));
            }
            if let Ok(decoded) =
                <CreditAccountsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::CreditAccounts(decoded));
            }
            if let Ok(decoded) =
                <CreditConfiguratorCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::CreditConfigurator(decoded));
            }
            if let Ok(decoded) =
                <CreditFacadeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::CreditFacade(decoded));
            }
            if let Ok(decoded) =
                <EnabledTokensMapCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::EnabledTokensMap(decoded));
            }
            if let Ok(decoded) =
                <ExecuteOrderCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::ExecuteOrder(decoded));
            }
            if let Ok(decoded) =
                <FastCheckCounterCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::FastCheckCounter(decoded));
            }
            if let Ok(decoded) =
                <FastCollateralCheckCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::FastCollateralCheck(decoded));
            }
            if let Ok(decoded) =
                <FeeInterestCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::FeeInterest(decoded));
            }
            if let Ok(decoded) =
                <FeeLiquidationCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::FeeLiquidation(decoded));
            }
            if let Ok(decoded) =
                <ForbidenTokenMaskCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::ForbidenTokenMask(decoded));
            }
            if let Ok(decoded) =
                <FullCollateralCheckCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::FullCollateralCheck(decoded));
            }
            if let Ok(decoded) =
                <GetCreditAccountOrRevertCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CreditManagerCalls::GetCreditAccountOrRevert(decoded));
            }
            if let Ok(decoded) =
                <HfCheckIntervalCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::HfCheckInterval(decoded));
            }
            if let Ok(decoded) =
                <LiquidationDiscountCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::LiquidationDiscount(decoded));
            }
            if let Ok(decoded) =
                <LiquidationThresholdsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::LiquidationThresholds(decoded));
            }
            if let Ok(decoded) =
                <ManageDebtCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::ManageDebt(decoded));
            }
            if let Ok(decoded) =
                <MaxBorrowedAmountCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::MaxBorrowedAmount(decoded));
            }
            if let Ok(decoded) =
                <MinBorrowedAmountCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::MinBorrowedAmount(decoded));
            }
            if let Ok(decoded) =
                <OpenCreditAccountCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::OpenCreditAccount(decoded));
            }
            if let Ok(decoded) = <PauseCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::Pause(decoded));
            }
            if let Ok(decoded) = <PausedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::Paused(decoded));
            }
            if let Ok(decoded) =
                <PoolServiceCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::PoolService(decoded));
            }
            if let Ok(decoded) =
                <PriceOracleCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::PriceOracle(decoded));
            }
            if let Ok(decoded) =
                <SetConfiguratorCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::SetConfigurator(decoded));
            }
            if let Ok(decoded) =
                <SetForbidMaskCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::SetForbidMask(decoded));
            }
            if let Ok(decoded) =
                <SetLiquidationThresholdCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::SetLiquidationThreshold(decoded));
            }
            if let Ok(decoded) =
                <SetParamsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::SetParams(decoded));
            }
            if let Ok(decoded) =
                <TokenMasksMapCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::TokenMasksMap(decoded));
            }
            if let Ok(decoded) =
                <TransferAccountOwnershipCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(CreditManagerCalls::TransferAccountOwnership(decoded));
            }
            if let Ok(decoded) =
                <UnderlyingCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::Underlying(decoded));
            }
            if let Ok(decoded) =
                <UnpauseCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::Unpause(decoded));
            }
            if let Ok(decoded) =
                <UpgradeContractsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::UpgradeContracts(decoded));
            }
            if let Ok(decoded) =
                <VersionCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::Version(decoded));
            }
            if let Ok(decoded) =
                <WethAddressCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::WethAddress(decoded));
            }
            if let Ok(decoded) =
                <WethGatewayCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(CreditManagerCalls::WethGateway(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for CreditManagerCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                CreditManagerCalls::AdapterToContract(element) => element.encode(),
                CreditManagerCalls::AddCollateral(element) => element.encode(),
                CreditManagerCalls::AddToken(element) => element.encode(),
                CreditManagerCalls::AllowedTokens(element) => element.encode(),
                CreditManagerCalls::AllowedTokensCount(element) => element.encode(),
                CreditManagerCalls::ApproveCreditAccount(element) => element.encode(),
                CreditManagerCalls::CalcClosePayments(element) => element.encode(),
                CreditManagerCalls::CalcCreditAccountAccruedInterest(element) => element.encode(),
                CreditManagerCalls::ChangeContractAllowance(element) => element.encode(),
                CreditManagerCalls::CheckAndEnableToken(element) => element.encode(),
                CreditManagerCalls::ChiThreshold(element) => element.encode(),
                CreditManagerCalls::CloseCreditAccount(element) => element.encode(),
                CreditManagerCalls::CreditAccounts(element) => element.encode(),
                CreditManagerCalls::CreditConfigurator(element) => element.encode(),
                CreditManagerCalls::CreditFacade(element) => element.encode(),
                CreditManagerCalls::EnabledTokensMap(element) => element.encode(),
                CreditManagerCalls::ExecuteOrder(element) => element.encode(),
                CreditManagerCalls::FastCheckCounter(element) => element.encode(),
                CreditManagerCalls::FastCollateralCheck(element) => element.encode(),
                CreditManagerCalls::FeeInterest(element) => element.encode(),
                CreditManagerCalls::FeeLiquidation(element) => element.encode(),
                CreditManagerCalls::ForbidenTokenMask(element) => element.encode(),
                CreditManagerCalls::FullCollateralCheck(element) => element.encode(),
                CreditManagerCalls::GetCreditAccountOrRevert(element) => element.encode(),
                CreditManagerCalls::HfCheckInterval(element) => element.encode(),
                CreditManagerCalls::LiquidationDiscount(element) => element.encode(),
                CreditManagerCalls::LiquidationThresholds(element) => element.encode(),
                CreditManagerCalls::ManageDebt(element) => element.encode(),
                CreditManagerCalls::MaxBorrowedAmount(element) => element.encode(),
                CreditManagerCalls::MinBorrowedAmount(element) => element.encode(),
                CreditManagerCalls::OpenCreditAccount(element) => element.encode(),
                CreditManagerCalls::Pause(element) => element.encode(),
                CreditManagerCalls::Paused(element) => element.encode(),
                CreditManagerCalls::PoolService(element) => element.encode(),
                CreditManagerCalls::PriceOracle(element) => element.encode(),
                CreditManagerCalls::SetConfigurator(element) => element.encode(),
                CreditManagerCalls::SetForbidMask(element) => element.encode(),
                CreditManagerCalls::SetLiquidationThreshold(element) => element.encode(),
                CreditManagerCalls::SetParams(element) => element.encode(),
                CreditManagerCalls::TokenMasksMap(element) => element.encode(),
                CreditManagerCalls::TransferAccountOwnership(element) => element.encode(),
                CreditManagerCalls::Underlying(element) => element.encode(),
                CreditManagerCalls::Unpause(element) => element.encode(),
                CreditManagerCalls::UpgradeContracts(element) => element.encode(),
                CreditManagerCalls::Version(element) => element.encode(),
                CreditManagerCalls::WethAddress(element) => element.encode(),
                CreditManagerCalls::WethGateway(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for CreditManagerCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                CreditManagerCalls::AdapterToContract(element) => element.fmt(f),
                CreditManagerCalls::AddCollateral(element) => element.fmt(f),
                CreditManagerCalls::AddToken(element) => element.fmt(f),
                CreditManagerCalls::AllowedTokens(element) => element.fmt(f),
                CreditManagerCalls::AllowedTokensCount(element) => element.fmt(f),
                CreditManagerCalls::ApproveCreditAccount(element) => element.fmt(f),
                CreditManagerCalls::CalcClosePayments(element) => element.fmt(f),
                CreditManagerCalls::CalcCreditAccountAccruedInterest(element) => element.fmt(f),
                CreditManagerCalls::ChangeContractAllowance(element) => element.fmt(f),
                CreditManagerCalls::CheckAndEnableToken(element) => element.fmt(f),
                CreditManagerCalls::ChiThreshold(element) => element.fmt(f),
                CreditManagerCalls::CloseCreditAccount(element) => element.fmt(f),
                CreditManagerCalls::CreditAccounts(element) => element.fmt(f),
                CreditManagerCalls::CreditConfigurator(element) => element.fmt(f),
                CreditManagerCalls::CreditFacade(element) => element.fmt(f),
                CreditManagerCalls::EnabledTokensMap(element) => element.fmt(f),
                CreditManagerCalls::ExecuteOrder(element) => element.fmt(f),
                CreditManagerCalls::FastCheckCounter(element) => element.fmt(f),
                CreditManagerCalls::FastCollateralCheck(element) => element.fmt(f),
                CreditManagerCalls::FeeInterest(element) => element.fmt(f),
                CreditManagerCalls::FeeLiquidation(element) => element.fmt(f),
                CreditManagerCalls::ForbidenTokenMask(element) => element.fmt(f),
                CreditManagerCalls::FullCollateralCheck(element) => element.fmt(f),
                CreditManagerCalls::GetCreditAccountOrRevert(element) => element.fmt(f),
                CreditManagerCalls::HfCheckInterval(element) => element.fmt(f),
                CreditManagerCalls::LiquidationDiscount(element) => element.fmt(f),
                CreditManagerCalls::LiquidationThresholds(element) => element.fmt(f),
                CreditManagerCalls::ManageDebt(element) => element.fmt(f),
                CreditManagerCalls::MaxBorrowedAmount(element) => element.fmt(f),
                CreditManagerCalls::MinBorrowedAmount(element) => element.fmt(f),
                CreditManagerCalls::OpenCreditAccount(element) => element.fmt(f),
                CreditManagerCalls::Pause(element) => element.fmt(f),
                CreditManagerCalls::Paused(element) => element.fmt(f),
                CreditManagerCalls::PoolService(element) => element.fmt(f),
                CreditManagerCalls::PriceOracle(element) => element.fmt(f),
                CreditManagerCalls::SetConfigurator(element) => element.fmt(f),
                CreditManagerCalls::SetForbidMask(element) => element.fmt(f),
                CreditManagerCalls::SetLiquidationThreshold(element) => element.fmt(f),
                CreditManagerCalls::SetParams(element) => element.fmt(f),
                CreditManagerCalls::TokenMasksMap(element) => element.fmt(f),
                CreditManagerCalls::TransferAccountOwnership(element) => element.fmt(f),
                CreditManagerCalls::Underlying(element) => element.fmt(f),
                CreditManagerCalls::Unpause(element) => element.fmt(f),
                CreditManagerCalls::UpgradeContracts(element) => element.fmt(f),
                CreditManagerCalls::Version(element) => element.fmt(f),
                CreditManagerCalls::WethAddress(element) => element.fmt(f),
                CreditManagerCalls::WethGateway(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<AdapterToContractCall> for CreditManagerCalls {
        fn from(var: AdapterToContractCall) -> Self {
            CreditManagerCalls::AdapterToContract(var)
        }
    }
    impl ::std::convert::From<AddCollateralCall> for CreditManagerCalls {
        fn from(var: AddCollateralCall) -> Self {
            CreditManagerCalls::AddCollateral(var)
        }
    }
    impl ::std::convert::From<AddTokenCall> for CreditManagerCalls {
        fn from(var: AddTokenCall) -> Self {
            CreditManagerCalls::AddToken(var)
        }
    }
    impl ::std::convert::From<AllowedTokensCall> for CreditManagerCalls {
        fn from(var: AllowedTokensCall) -> Self {
            CreditManagerCalls::AllowedTokens(var)
        }
    }
    impl ::std::convert::From<AllowedTokensCountCall> for CreditManagerCalls {
        fn from(var: AllowedTokensCountCall) -> Self {
            CreditManagerCalls::AllowedTokensCount(var)
        }
    }
    impl ::std::convert::From<ApproveCreditAccountCall> for CreditManagerCalls {
        fn from(var: ApproveCreditAccountCall) -> Self {
            CreditManagerCalls::ApproveCreditAccount(var)
        }
    }
    impl ::std::convert::From<CalcClosePaymentsCall> for CreditManagerCalls {
        fn from(var: CalcClosePaymentsCall) -> Self {
            CreditManagerCalls::CalcClosePayments(var)
        }
    }
    impl ::std::convert::From<CalcCreditAccountAccruedInterestCall> for CreditManagerCalls {
        fn from(var: CalcCreditAccountAccruedInterestCall) -> Self {
            CreditManagerCalls::CalcCreditAccountAccruedInterest(var)
        }
    }
    impl ::std::convert::From<ChangeContractAllowanceCall> for CreditManagerCalls {
        fn from(var: ChangeContractAllowanceCall) -> Self {
            CreditManagerCalls::ChangeContractAllowance(var)
        }
    }
    impl ::std::convert::From<CheckAndEnableTokenCall> for CreditManagerCalls {
        fn from(var: CheckAndEnableTokenCall) -> Self {
            CreditManagerCalls::CheckAndEnableToken(var)
        }
    }
    impl ::std::convert::From<ChiThresholdCall> for CreditManagerCalls {
        fn from(var: ChiThresholdCall) -> Self {
            CreditManagerCalls::ChiThreshold(var)
        }
    }
    impl ::std::convert::From<CloseCreditAccountCall> for CreditManagerCalls {
        fn from(var: CloseCreditAccountCall) -> Self {
            CreditManagerCalls::CloseCreditAccount(var)
        }
    }
    impl ::std::convert::From<CreditAccountsCall> for CreditManagerCalls {
        fn from(var: CreditAccountsCall) -> Self {
            CreditManagerCalls::CreditAccounts(var)
        }
    }
    impl ::std::convert::From<CreditConfiguratorCall> for CreditManagerCalls {
        fn from(var: CreditConfiguratorCall) -> Self {
            CreditManagerCalls::CreditConfigurator(var)
        }
    }
    impl ::std::convert::From<CreditFacadeCall> for CreditManagerCalls {
        fn from(var: CreditFacadeCall) -> Self {
            CreditManagerCalls::CreditFacade(var)
        }
    }
    impl ::std::convert::From<EnabledTokensMapCall> for CreditManagerCalls {
        fn from(var: EnabledTokensMapCall) -> Self {
            CreditManagerCalls::EnabledTokensMap(var)
        }
    }
    impl ::std::convert::From<ExecuteOrderCall> for CreditManagerCalls {
        fn from(var: ExecuteOrderCall) -> Self {
            CreditManagerCalls::ExecuteOrder(var)
        }
    }
    impl ::std::convert::From<FastCheckCounterCall> for CreditManagerCalls {
        fn from(var: FastCheckCounterCall) -> Self {
            CreditManagerCalls::FastCheckCounter(var)
        }
    }
    impl ::std::convert::From<FastCollateralCheckCall> for CreditManagerCalls {
        fn from(var: FastCollateralCheckCall) -> Self {
            CreditManagerCalls::FastCollateralCheck(var)
        }
    }
    impl ::std::convert::From<FeeInterestCall> for CreditManagerCalls {
        fn from(var: FeeInterestCall) -> Self {
            CreditManagerCalls::FeeInterest(var)
        }
    }
    impl ::std::convert::From<FeeLiquidationCall> for CreditManagerCalls {
        fn from(var: FeeLiquidationCall) -> Self {
            CreditManagerCalls::FeeLiquidation(var)
        }
    }
    impl ::std::convert::From<ForbidenTokenMaskCall> for CreditManagerCalls {
        fn from(var: ForbidenTokenMaskCall) -> Self {
            CreditManagerCalls::ForbidenTokenMask(var)
        }
    }
    impl ::std::convert::From<FullCollateralCheckCall> for CreditManagerCalls {
        fn from(var: FullCollateralCheckCall) -> Self {
            CreditManagerCalls::FullCollateralCheck(var)
        }
    }
    impl ::std::convert::From<GetCreditAccountOrRevertCall> for CreditManagerCalls {
        fn from(var: GetCreditAccountOrRevertCall) -> Self {
            CreditManagerCalls::GetCreditAccountOrRevert(var)
        }
    }
    impl ::std::convert::From<HfCheckIntervalCall> for CreditManagerCalls {
        fn from(var: HfCheckIntervalCall) -> Self {
            CreditManagerCalls::HfCheckInterval(var)
        }
    }
    impl ::std::convert::From<LiquidationDiscountCall> for CreditManagerCalls {
        fn from(var: LiquidationDiscountCall) -> Self {
            CreditManagerCalls::LiquidationDiscount(var)
        }
    }
    impl ::std::convert::From<LiquidationThresholdsCall> for CreditManagerCalls {
        fn from(var: LiquidationThresholdsCall) -> Self {
            CreditManagerCalls::LiquidationThresholds(var)
        }
    }
    impl ::std::convert::From<ManageDebtCall> for CreditManagerCalls {
        fn from(var: ManageDebtCall) -> Self {
            CreditManagerCalls::ManageDebt(var)
        }
    }
    impl ::std::convert::From<MaxBorrowedAmountCall> for CreditManagerCalls {
        fn from(var: MaxBorrowedAmountCall) -> Self {
            CreditManagerCalls::MaxBorrowedAmount(var)
        }
    }
    impl ::std::convert::From<MinBorrowedAmountCall> for CreditManagerCalls {
        fn from(var: MinBorrowedAmountCall) -> Self {
            CreditManagerCalls::MinBorrowedAmount(var)
        }
    }
    impl ::std::convert::From<OpenCreditAccountCall> for CreditManagerCalls {
        fn from(var: OpenCreditAccountCall) -> Self {
            CreditManagerCalls::OpenCreditAccount(var)
        }
    }
    impl ::std::convert::From<PauseCall> for CreditManagerCalls {
        fn from(var: PauseCall) -> Self {
            CreditManagerCalls::Pause(var)
        }
    }
    impl ::std::convert::From<PausedCall> for CreditManagerCalls {
        fn from(var: PausedCall) -> Self {
            CreditManagerCalls::Paused(var)
        }
    }
    impl ::std::convert::From<PoolServiceCall> for CreditManagerCalls {
        fn from(var: PoolServiceCall) -> Self {
            CreditManagerCalls::PoolService(var)
        }
    }
    impl ::std::convert::From<PriceOracleCall> for CreditManagerCalls {
        fn from(var: PriceOracleCall) -> Self {
            CreditManagerCalls::PriceOracle(var)
        }
    }
    impl ::std::convert::From<SetConfiguratorCall> for CreditManagerCalls {
        fn from(var: SetConfiguratorCall) -> Self {
            CreditManagerCalls::SetConfigurator(var)
        }
    }
    impl ::std::convert::From<SetForbidMaskCall> for CreditManagerCalls {
        fn from(var: SetForbidMaskCall) -> Self {
            CreditManagerCalls::SetForbidMask(var)
        }
    }
    impl ::std::convert::From<SetLiquidationThresholdCall> for CreditManagerCalls {
        fn from(var: SetLiquidationThresholdCall) -> Self {
            CreditManagerCalls::SetLiquidationThreshold(var)
        }
    }
    impl ::std::convert::From<SetParamsCall> for CreditManagerCalls {
        fn from(var: SetParamsCall) -> Self {
            CreditManagerCalls::SetParams(var)
        }
    }
    impl ::std::convert::From<TokenMasksMapCall> for CreditManagerCalls {
        fn from(var: TokenMasksMapCall) -> Self {
            CreditManagerCalls::TokenMasksMap(var)
        }
    }
    impl ::std::convert::From<TransferAccountOwnershipCall> for CreditManagerCalls {
        fn from(var: TransferAccountOwnershipCall) -> Self {
            CreditManagerCalls::TransferAccountOwnership(var)
        }
    }
    impl ::std::convert::From<UnderlyingCall> for CreditManagerCalls {
        fn from(var: UnderlyingCall) -> Self {
            CreditManagerCalls::Underlying(var)
        }
    }
    impl ::std::convert::From<UnpauseCall> for CreditManagerCalls {
        fn from(var: UnpauseCall) -> Self {
            CreditManagerCalls::Unpause(var)
        }
    }
    impl ::std::convert::From<UpgradeContractsCall> for CreditManagerCalls {
        fn from(var: UpgradeContractsCall) -> Self {
            CreditManagerCalls::UpgradeContracts(var)
        }
    }
    impl ::std::convert::From<VersionCall> for CreditManagerCalls {
        fn from(var: VersionCall) -> Self {
            CreditManagerCalls::Version(var)
        }
    }
    impl ::std::convert::From<WethAddressCall> for CreditManagerCalls {
        fn from(var: WethAddressCall) -> Self {
            CreditManagerCalls::WethAddress(var)
        }
    }
    impl ::std::convert::From<WethGatewayCall> for CreditManagerCalls {
        fn from(var: WethGatewayCall) -> Self {
            CreditManagerCalls::WethGateway(var)
        }
    }
}
